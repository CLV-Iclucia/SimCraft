#line 1 "CMakeCUDACompilerId.cu"
#line 1 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"























































#line 57 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"









#line 67 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"
#pragma warning(push)
#pragma warning(disable: 4820)
#line 70 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"
#line 71 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"












#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"

















#line 77 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"






#line 84 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"






#line 91 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"





#line 97 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"



#line 101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"













#line 115 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"











#line 127 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"




















#line 148 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"







#line 156 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"



#line 160 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"

#line 162 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"
#line 163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"















#line 179 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"





#line 185 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"





#line 191 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"





#line 197 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"






#line 204 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"







#line 212 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"





#line 218 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"





#line 224 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"





#line 230 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"

#line 1 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"








#line 1 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"







#pragma once






















#line 32 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"

#line 34 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
#line 35 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"


    
#line 39 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"






    
    

#line 49 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
        


            
        #line 54 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
    #line 55 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
#line 56 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"

#line 1 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"













#pragma once







































































































































#line 151 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"



#line 155 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"
































#line 188 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"

#line 190 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"





#line 196 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"



#line 200 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"






#line 207 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"











#line 219 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"








#line 228 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"
#line 229 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"































































































































































































































































































































































































































































































#pragma region Input Buffer SAL 1 compatibility macros



























































































































































































































































































































































































































































































































































































































































































































































































#pragma endregion Input Buffer SAL 1 compatibility macros

















































































#line 1555 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"






























#line 1586 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"
























#line 1611 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"












#line 1624 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"






































#line 1663 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"















































































































#line 1775 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"






































































































#line 1878 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"








































































































































































#line 2047 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"





































































































#line 2149 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"



















































































































































































































#line 2361 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"
extern "C" {




#line 2367 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"



































































































































































































































#line 2595 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    

    
    

#line 2634 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"









































































































































































































































#line 2868 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"









#line 2878 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"



    
    


#line 2886 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"
#line 2887 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"






#line 2894 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"
#line 2895 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"






#line 2902 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"
#line 2903 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"











#line 2915 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"

































#line 2949 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"






















}
#line 2973 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"

#line 1 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\concurrencysal.h"


















#pragma once


extern "C" {
#line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\concurrencysal.h"











































































































































































































































































#line 292 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\concurrencysal.h"



#line 296 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\concurrencysal.h"
















































#line 345 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\concurrencysal.h"











































#line 389 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\concurrencysal.h"


}
#line 393 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\concurrencysal.h"

#line 395 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\concurrencysal.h"
#line 2975 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"
#line 58 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
#line 1 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"










#pragma once



#pragma pack(push, 8)



    


        
    #line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"




    


        
    #line 34 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
#line 35 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"



    
#line 40 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"




    
#line 46 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"

#pragma warning(push)
#pragma warning(disable:   4514 4820 )


extern "C" {
#line 53 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"



#line 57 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"


    
    
        typedef unsigned __int64  uintptr_t;
    

#line 65 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
#line 66 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"


    
    


        typedef char* va_list;
    #line 74 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
#line 75 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"


    


#line 81 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"





#line 87 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"



#line 91 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
    
    
#line 94 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"











#line 106 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"







#line 114 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"











#line 126 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"





#line 132 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"










#line 143 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"










#line 154 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"

    void __cdecl __va_start(va_list* , ...);

    
    



    

#line 165 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"


} 
#line 169 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"


    extern "C++"
    {
        template <typename _Ty>
        struct __vcrt_va_list_is_reference
        {
            enum : bool { __the_value = false };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        struct __vcrt_assert_va_start_is_not_reference
        {
            static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value,
                "va_start argument must not have reference type and must not be parenthesized");
        };
    } 

    





#line 206 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"

#pragma warning(pop) 
#pragma pack(pop)
#line 59 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"

#pragma warning(push)
#pragma warning(disable:   4514 4820 )






    



    





















#line 95 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"

__pragma(pack(push, 8)) extern "C" {




    


        
    #line 106 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
#line 107 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
















    

#line 126 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"

#line 128 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
        
    #line 130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
#line 131 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"


    

#line 136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
        
    #line 138 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
#line 139 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"





#line 145 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
    
    
#line 148 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"




    
#line 154 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"








    


#line 166 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"



#line 170 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
    
#line 172 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"




    
#line 178 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"


    
        
        
    

#line 186 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
#line 187 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"






    typedef unsigned __int64 size_t;
    typedef __int64          ptrdiff_t;
    typedef __int64          intptr_t;




#line 201 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"


    typedef bool  __vcrt_bool;






#line 211 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"



    
#line 216 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"


    
#line 220 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"


    
#line 224 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"








    
        
    

#line 237 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
#line 238 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"


    


#line 244 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"



#line 248 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"


    extern "C++"
    {
        template <typename _CountofType, size_t _SizeOfArray>
        char (*__countof_helper(__unaligned _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

        
    }


#line 260 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"



#line 264 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"


    
        
    

#line 271 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"


#line 274 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"


    

#line 279 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
        
    #line 281 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
#line 282 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"


    

#line 287 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
        
    #line 289 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
#line 290 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"


    

#line 295 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
        
    #line 297 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
#line 298 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"





#line 304 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"



#line 308 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"



    


        
    

#line 318 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
#line 319 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"


    


#line 325 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"









    
        
    

#line 339 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
#line 340 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"









#line 350 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"


    
        
    





#line 361 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
#line 362 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"



#line 366 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"


    
        
    


#line 374 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
#line 375 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"


    void __cdecl __security_init_cookie(void);

    


#line 383 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"


#line 386 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
        void __cdecl __security_check_cookie(  uintptr_t _StackCookie);
        __declspec(noreturn) void __cdecl __report_gsfailure(  uintptr_t _StackCookie);
    #line 389 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
#line 390 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"

extern uintptr_t __security_cookie;


    
    
    
#line 398 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"

} __pragma(pack(pop))

#pragma warning(pop) 

#line 404 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
#line 10 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"







#pragma once









    

















        
    #line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"


    
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"


    
        
    

#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"

















    


        
    #line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"



    
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"














    
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"


    











        
    #line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
#line 112 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"


    


        
    #line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
#line 120 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"

#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {







    

#line 136 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"

#line 138 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
        
    #line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
#line 141 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"




    
#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"


    

#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"

#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
        
    #line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
#line 157 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"



#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
    
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"


    


#line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"





#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
    
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"





    
#line 184 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"



#line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
    
#line 190 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"









    
#line 201 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"













    


        
    #line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"



#line 224 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
    
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"



#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
    
#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"



#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
    
#line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"


    
        
    

#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"








extern "C++"
{
    template<bool _Enable, typename _Ty>
    struct _CrtEnableIf;

    template<typename _Ty>
    struct _CrtEnableIf<true, _Ty>
    {
        typedef _Ty _Type;
    };
}
#line 266 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"


    typedef bool  __crt_bool;






#line 276 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"










    
        
    #line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"








#line 298 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"



















    

#line 320 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
        
    #line 322 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
#line 323 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"



#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"


    
#line 331 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"


 
  

#line 337 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
   
  #line 339 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
 





#line 346 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
#line 347 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"


 

#line 352 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
   
 #line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
















 void __cdecl _invalid_parameter_noinfo(void);
 __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);

__declspec(noreturn)
 void __cdecl _invoke_watson(
      wchar_t const* _Expression,
      wchar_t const* _FunctionName,
      wchar_t const* _FileName,
            unsigned int _LineNo,
            uintptr_t _Reserved);


    



        
        
        
        
        
        
        
        
        
        
        
        

    #line 401 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
#line 402 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"












    


#line 419 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"



#line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"


    
        
    



#line 432 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
#line 433 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"









    






        
    #line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
#line 452 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"


    


        
    #line 459 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
#line 460 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"



#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"













#line 478 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"















#line 494 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"





    
#line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"



#line 505 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"


    

#line 510 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
#line 511 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"


    


        


            
        #line 521 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
    #line 522 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
#line 523 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"



#line 527 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"





#line 533 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"


    


        



    #line 543 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
#line 544 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"


    
        
    



#line 553 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"

    
        
        
        
    



#line 563 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"

    
        
              
        

#line 570 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
    



#line 575 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"

    
        
    



#line 583 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"

    
        
    



#line 591 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
#line 592 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"


    
#line 596 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"








typedef int                           errno_t;
typedef unsigned short                wint_t;
typedef unsigned short                wctype_t;
typedef long                          __time32_t;
typedef __int64                       __time64_t;

typedef struct __crt_locale_data_public
{
      unsigned short const* _locale_pctype;
      int _locale_mb_cur_max;
               unsigned int _locale_lc_codepage;
} __crt_locale_data_public;

typedef struct __crt_locale_pointers
{
    struct __crt_locale_data*    locinfo;
    struct __crt_multibyte_data* mbcinfo;
} __crt_locale_pointers;

typedef __crt_locale_pointers* _locale_t;

typedef struct _Mbstatet
{ 
    unsigned long _Wchar;
    unsigned short _Byte, _State;
} _Mbstatet;

typedef _Mbstatet mbstate_t;



#line 636 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"



#line 640 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"


    


        typedef __time64_t time_t;
    #line 647 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
#line 648 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"



    
#line 653 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"


    typedef size_t rsize_t;
#line 657 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"










    

        










        










        










        










        










        










        










        










        










        












        












        
















    














#line 827 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
#line 828 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"












































































    













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1879 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"

        
        
        
        

        

            


            


            


            


            


            


            


            


            



            



            


            


            


            


            


            


            


            


            


            


            



            



            



            


            



            




            

            




            

            




            

            




            

            




            

            




            

            




            

            




            

        











































#line 2069 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
    #line 2070 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"
#line 2071 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h"

} __pragma(pack(pop))


#pragma warning(pop) 
#line 11 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"










    

#line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"
        
    #line 26 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"
#line 27 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"



    

#line 33 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"
        
    #line 35 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"



    

#line 42 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"
        
    #line 44 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"
#line 45 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"





    


#line 54 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"


#line 57 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"
        
        
    #line 60 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"
#line 61 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"


    

#line 66 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"
        

#line 69 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"
            
        #line 71 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"
    #line 72 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"
#line 73 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"


    

#line 78 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"

#line 80 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"
        
    #line 82 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"
#line 83 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"
#line 232 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"


#line 235 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"



#line 239 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"

#line 241 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"









































#line 283 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"



#line 287 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"

#line 289 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"




#line 294 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_config.h"
#line 84 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"







#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"























































#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"











































#line 103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"










#line 114 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"










































#line 157 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"








#line 168 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"



#line 172 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"








#line 181 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"




#line 186 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"










#line 198 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"




#line 203 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"
        



#line 208 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"



#line 212 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"



#line 216 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"



#line 220 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"



#line 224 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"



#line 228 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"
        





#line 235 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"








#line 244 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"





        



#line 254 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"
#line 255 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"



#line 259 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"




#line 264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
#line 61 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"







enum __declspec(__device_builtin__) cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
};




#line 80 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"

#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"























































#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"







































































































































































































#line 259 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"




#line 264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#line 61 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"























































#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"








#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"







































































































































































































#line 259 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"




#line 264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"
#line 66 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#line 67 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"






















#line 91 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"







#line 99 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"

struct __declspec(__device_builtin__) char1
{
    signed char x;
};

struct __declspec(__device_builtin__) uchar1
{
    unsigned char x;
};


struct __declspec(__device_builtin__) __declspec(align(2)) char2
{
    signed char x, y;
};

struct __declspec(__device_builtin__) __declspec(align(2)) uchar2
{
    unsigned char x, y;
};

struct __declspec(__device_builtin__) char3
{
    signed char x, y, z;
};

struct __declspec(__device_builtin__) uchar3
{
    unsigned char x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(4)) char4
{
    signed char x, y, z, w;
};

struct __declspec(__device_builtin__) __declspec(align(4)) uchar4
{
    unsigned char x, y, z, w;
};

struct __declspec(__device_builtin__) short1
{
    short x;
};

struct __declspec(__device_builtin__) ushort1
{
    unsigned short x;
};

struct __declspec(__device_builtin__) __declspec(align(4)) short2
{
    short x, y;
};

struct __declspec(__device_builtin__) __declspec(align(4)) ushort2
{
    unsigned short x, y;
};

struct __declspec(__device_builtin__) short3
{
    short x, y, z;
};

struct __declspec(__device_builtin__) ushort3
{
    unsigned short x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(8)) short4 { short x; short y; short z; short w; };
struct __declspec(__device_builtin__) __declspec(align(8)) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; };

struct __declspec(__device_builtin__) int1
{
    int x;
};

struct __declspec(__device_builtin__) uint1
{
    unsigned int x;
};

struct __declspec(__device_builtin__) __declspec(align(8)) int2 { int x; int y; };
struct __declspec(__device_builtin__) __declspec(align(8)) uint2 { unsigned int x; unsigned int y; };

struct __declspec(__device_builtin__) int3
{
    int x, y, z;
};

struct __declspec(__device_builtin__) uint3
{
    unsigned int x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) int4
{
    int x, y, z, w;
};

struct __declspec(__device_builtin__) __declspec(align(16)) uint4
{
    unsigned int x, y, z, w;
};

struct __declspec(__device_builtin__) long1
{
    long int x;
};

struct __declspec(__device_builtin__) ulong1
{
    unsigned long x;
};


struct __declspec(__device_builtin__) __declspec(align(8)) long2 { long int x; long int y; };
struct __declspec(__device_builtin__) __declspec(align(8)) ulong2 { unsigned long int x; unsigned long int y; };












#line 233 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"

struct __declspec(__device_builtin__) long3
{
    long int x, y, z;
};

struct __declspec(__device_builtin__) ulong3
{
    unsigned long int x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) long4
{
    long int x, y, z, w;
};

struct __declspec(__device_builtin__) __declspec(align(16)) ulong4
{
    unsigned long int x, y, z, w;
};

struct __declspec(__device_builtin__) float1
{
    float x;
};















#line 275 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"

struct __declspec(__device_builtin__) __declspec(align(8)) float2 { float x; float y; };

#line 279 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"


struct __declspec(__device_builtin__) float3
{
    float x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) float4
{
    float x, y, z, w;
};

struct __declspec(__device_builtin__) longlong1
{
    long long int x;
};

struct __declspec(__device_builtin__) ulonglong1
{
    unsigned long long int x;
};

struct __declspec(__device_builtin__) __declspec(align(16)) longlong2
{
    long long int x, y;
};

struct __declspec(__device_builtin__) __declspec(align(16)) ulonglong2
{
    unsigned long long int x, y;
};

struct __declspec(__device_builtin__) longlong3
{
    long long int x, y, z;
};

struct __declspec(__device_builtin__) ulonglong3
{
    unsigned long long int x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) longlong4
{
    long long int x, y, z ,w;
};

struct __declspec(__device_builtin__) __declspec(align(16)) ulonglong4
{
    unsigned long long int x, y, z, w;
};

struct __declspec(__device_builtin__) double1
{
    double x;
};

struct __declspec(__device_builtin__) __declspec(align(16)) double2
{
    double x, y;
};

struct __declspec(__device_builtin__) double3
{
    double x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) double4
{
    double x, y, z, w;
};





#line 356 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"







typedef __declspec(__device_builtin__) struct char1 char1;
typedef __declspec(__device_builtin__) struct uchar1 uchar1;
typedef __declspec(__device_builtin__) struct char2 char2;
typedef __declspec(__device_builtin__) struct uchar2 uchar2;
typedef __declspec(__device_builtin__) struct char3 char3;
typedef __declspec(__device_builtin__) struct uchar3 uchar3;
typedef __declspec(__device_builtin__) struct char4 char4;
typedef __declspec(__device_builtin__) struct uchar4 uchar4;
typedef __declspec(__device_builtin__) struct short1 short1;
typedef __declspec(__device_builtin__) struct ushort1 ushort1;
typedef __declspec(__device_builtin__) struct short2 short2;
typedef __declspec(__device_builtin__) struct ushort2 ushort2;
typedef __declspec(__device_builtin__) struct short3 short3;
typedef __declspec(__device_builtin__) struct ushort3 ushort3;
typedef __declspec(__device_builtin__) struct short4 short4;
typedef __declspec(__device_builtin__) struct ushort4 ushort4;
typedef __declspec(__device_builtin__) struct int1 int1;
typedef __declspec(__device_builtin__) struct uint1 uint1;
typedef __declspec(__device_builtin__) struct int2 int2;
typedef __declspec(__device_builtin__) struct uint2 uint2;
typedef __declspec(__device_builtin__) struct int3 int3;
typedef __declspec(__device_builtin__) struct uint3 uint3;
typedef __declspec(__device_builtin__) struct int4 int4;
typedef __declspec(__device_builtin__) struct uint4 uint4;
typedef __declspec(__device_builtin__) struct long1 long1;
typedef __declspec(__device_builtin__) struct ulong1 ulong1;
typedef __declspec(__device_builtin__) struct long2 long2;
typedef __declspec(__device_builtin__) struct ulong2 ulong2;
typedef __declspec(__device_builtin__) struct long3 long3;
typedef __declspec(__device_builtin__) struct ulong3 ulong3;
typedef __declspec(__device_builtin__) struct long4 long4;
typedef __declspec(__device_builtin__) struct ulong4 ulong4;
typedef __declspec(__device_builtin__) struct float1 float1;
typedef __declspec(__device_builtin__) struct float2 float2;
typedef __declspec(__device_builtin__) struct float3 float3;
typedef __declspec(__device_builtin__) struct float4 float4;
typedef __declspec(__device_builtin__) struct longlong1 longlong1;
typedef __declspec(__device_builtin__) struct ulonglong1 ulonglong1;
typedef __declspec(__device_builtin__) struct longlong2 longlong2;
typedef __declspec(__device_builtin__) struct ulonglong2 ulonglong2;
typedef __declspec(__device_builtin__) struct longlong3 longlong3;
typedef __declspec(__device_builtin__) struct ulonglong3 ulonglong3;
typedef __declspec(__device_builtin__) struct longlong4 longlong4;
typedef __declspec(__device_builtin__) struct ulonglong4 ulonglong4;
typedef __declspec(__device_builtin__) struct double1 double1;
typedef __declspec(__device_builtin__) struct double2 double2;
typedef __declspec(__device_builtin__) struct double3 double3;
typedef __declspec(__device_builtin__) struct double4 double4;







struct __declspec(__device_builtin__) dim3
{
    unsigned int x, y, z;





#line 427 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
    __declspec(__host__) __declspec(__device__) dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) : x(vx), y(vy), z(vz) {}
    __declspec(__host__) __declspec(__device__) dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
    __declspec(__host__) __declspec(__device__) operator uint3(void) const { uint3 t; t.x = x; t.y = y; t.z = z; return t; }
#line 431 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#line 432 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
};

typedef __declspec(__device_builtin__) struct dim3 dim3;






#line 442 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"

#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"



















#line 1 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits.h"







#pragma once




#pragma warning(push)
#pragma warning(disable:   4514 4820 )

__pragma(pack(push, 8)) extern "C" {







    
    



#line 30 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits.h"
































    
    
        
    

#line 68 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits.h"
#line 69 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits.h"


    
        
    #line 74 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits.h"
#line 75 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits.h"

} __pragma(pack(pop))

#pragma warning(pop) 
#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stddef.h"







#pragma once





#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {




    namespace std
    {
        typedef decltype(__nullptr) nullptr_t;
    }

    using ::std::nullptr_t;
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stddef.h"





     int* __cdecl _errno(void);
    

     errno_t __cdecl _set_errno(  int _Value);
     errno_t __cdecl _get_errno(  int* _Value);

#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stddef.h"









#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stddef.h"
    
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stddef.h"

 extern unsigned long  __cdecl __threadid(void);

 extern uintptr_t __cdecl __threadhandle(void);



} __pragma(pack(pop))

#pragma warning(pop) 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stddef.h"
#line 83 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#line 84 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"

















 














































































#line 181 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"




#line 186 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"





#line 192 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"











enum __declspec(__device_builtin__) cudaError
{
    




    cudaSuccess                           =      0,
  
    



    cudaErrorInvalidValue                 =     1,
  
    



    cudaErrorMemoryAllocation             =      2,
  
    



    cudaErrorInitializationError          =      3,
  
    




    cudaErrorCudartUnloading              =     4,

    




    cudaErrorProfilerDisabled             =     5,

    





    cudaErrorProfilerNotInitialized       =     6,

    




    cudaErrorProfilerAlreadyStarted       =     7,

    




     cudaErrorProfilerAlreadyStopped       =    8,
  
    






    cudaErrorInvalidConfiguration         =      9,
  
    



    cudaErrorInvalidPitchValue            =     12,
  
    



    cudaErrorInvalidSymbol                =     13,
  
    





    cudaErrorInvalidHostPointer           =     16,
  
    





    cudaErrorInvalidDevicePointer         =     17,
  
    



    cudaErrorInvalidTexture               =     18,
  
    



    cudaErrorInvalidTextureBinding        =     19,
  
    




    cudaErrorInvalidChannelDescriptor     =     20,
  
    



    cudaErrorInvalidMemcpyDirection       =     21,
  
    







    cudaErrorAddressOfConstant            =     22,
  
    






    cudaErrorTextureFetchFailed           =     23,
  
    






    cudaErrorTextureNotBound              =     24,
  
    






    cudaErrorSynchronizationError         =     25,
  
    



    cudaErrorInvalidFilterSetting         =     26,
  
    



    cudaErrorInvalidNormSetting           =     27,
  
    





    cudaErrorMixedDeviceExecution         =     28,

    





    cudaErrorNotYetImplemented            =     31,
  
    






    cudaErrorMemoryValueTooLarge          =     32,
  
    




    cudaErrorStubLibrary                  =     34,

    




    cudaErrorInsufficientDriver           =     35,

    




    cudaErrorCallRequiresNewerDriver      =     36,
  
    



    cudaErrorInvalidSurface               =     37,
  
    



    cudaErrorDuplicateVariableName        =     43,
  
    



    cudaErrorDuplicateTextureName         =     44,
  
    



    cudaErrorDuplicateSurfaceName         =     45,
  
    







    cudaErrorDevicesUnavailable           =     46,
  
    










    cudaErrorIncompatibleDriverContext    =     49,
    
    



    cudaErrorMissingConfiguration         =      52,
  
    






    cudaErrorPriorLaunchFailure           =      53,

    




    cudaErrorLaunchMaxDepthExceeded       =     65,

    





    cudaErrorLaunchFileScopedTex          =     66,

    





    cudaErrorLaunchFileScopedSurf         =     67,

    













    cudaErrorSyncDepthExceeded            =     68,

    









    cudaErrorLaunchPendingCountExceeded   =     69,
  
    



    cudaErrorInvalidDeviceFunction        =      98,
  
    



    cudaErrorNoDevice                     =     100,
  
    




    cudaErrorInvalidDevice                =     101,

    


    cudaErrorDeviceNotLicensed            =     102,

   






   cudaErrorSoftwareValidityNotEstablished  =     103,

    


    cudaErrorStartupFailure               =    127,
  
    


    cudaErrorInvalidKernelImage           =     200,

    







    cudaErrorDeviceUninitialized          =     201,

    


    cudaErrorMapBufferObjectFailed        =     205,
  
    


    cudaErrorUnmapBufferObjectFailed      =     206,

    



    cudaErrorArrayIsMapped                =     207,

    


    cudaErrorAlreadyMapped                =     208,
  
    





    cudaErrorNoKernelImageForDevice       =     209,

    


    cudaErrorAlreadyAcquired              =     210,

    


    cudaErrorNotMapped                    =     211,

    



    cudaErrorNotMappedAsArray             =     212,

    



    cudaErrorNotMappedAsPointer           =     213,
  
    



    cudaErrorECCUncorrectable             =     214,
  
    



    cudaErrorUnsupportedLimit             =     215,
    
    



    cudaErrorDeviceAlreadyInUse           =     216,

    



    cudaErrorPeerAccessUnsupported        =     217,

    



    cudaErrorInvalidPtx                   =     218,

    


    cudaErrorInvalidGraphicsContext       =     219,

    



    cudaErrorNvlinkUncorrectable          =     220,

    




    cudaErrorJitCompilerNotFound          =     221,

    




    cudaErrorUnsupportedPtxVersion        =     222,

    




    cudaErrorJitCompilationDisabled       =     223,

    


    cudaErrorUnsupportedExecAffinity      =     224,

    



    cudaErrorUnsupportedDevSideSync       =     225,

    


    cudaErrorInvalidSource                =     300,

    


    cudaErrorFileNotFound                 =     301,
  
    


    cudaErrorSharedObjectSymbolNotFound   =     302,
  
    


    cudaErrorSharedObjectInitFailed       =     303,

    


    cudaErrorOperatingSystem              =     304,
  
    




    cudaErrorInvalidResourceHandle        =     400,

    



    cudaErrorIllegalState                 =     401,

    




    cudaErrorSymbolNotFound               =     500,
  
    





    cudaErrorNotReady                     =     600,

    





    cudaErrorIllegalAddress               =     700,
  
    






    cudaErrorLaunchOutOfResources         =      701,
  
    








    cudaErrorLaunchTimeout                =      702,

    



    cudaErrorLaunchIncompatibleTexturing  =     703,
      
    




    cudaErrorPeerAccessAlreadyEnabled     =     704,
    
    




    cudaErrorPeerAccessNotEnabled         =     705,
  
    










    cudaErrorSetOnActiveProcess           =     708,

    




    cudaErrorContextIsDestroyed           =     709,

    




    cudaErrorAssert                        =    710,
  
    




    cudaErrorTooManyPeers                 =     711,
  
    



    cudaErrorHostMemoryAlreadyRegistered  =     712,
        
    



    cudaErrorHostMemoryNotRegistered      =     713,

    






    cudaErrorHardwareStackError           =     714,

    





    cudaErrorIllegalInstruction           =     715,

    






    cudaErrorMisalignedAddress            =     716,

    








    cudaErrorInvalidAddressSpace          =     717,

    





    cudaErrorInvalidPc                    =     718,
  
    








    cudaErrorLaunchFailure                =      719,

    






    cudaErrorCooperativeLaunchTooLarge    =     720,
    
    


    cudaErrorNotPermitted                 =     800,

    



    cudaErrorNotSupported                 =     801,

    






    cudaErrorSystemNotReady               =     802,

    




    cudaErrorSystemDriverMismatch         =     803,

    






    cudaErrorCompatNotSupportedOnDevice   =     804,

    


    cudaErrorMpsConnectionFailed          =     805,

    


    cudaErrorMpsRpcFailure                =     806,

    



    cudaErrorMpsServerNotReady            =     807,

    


    cudaErrorMpsMaxClientsReached         =     808,

    


    cudaErrorMpsMaxConnectionsReached     =     809,

    


    cudaErrorMpsClientTerminated          =     810,

    


    cudaErrorCdpNotSupported              =     811,

    


    cudaErrorCdpVersionMismatch           =     812,

    


    cudaErrorStreamCaptureUnsupported     =    900,

    



    cudaErrorStreamCaptureInvalidated     =    901,

    



    cudaErrorStreamCaptureMerge           =    902,

    


    cudaErrorStreamCaptureUnmatched       =    903,

    



    cudaErrorStreamCaptureUnjoined        =    904,

    




    cudaErrorStreamCaptureIsolation       =    905,

    



    cudaErrorStreamCaptureImplicit        =    906,

    



    cudaErrorCapturedEvent                =    907,
  
    




    cudaErrorStreamCaptureWrongThread     =    908,

    


    cudaErrorTimeout                      =    909,

    



    cudaErrorGraphExecUpdateFailure       =    910,

    







    cudaErrorExternalDevice               =    911,

    



    cudaErrorInvalidClusterSize           =    912,

    


    cudaErrorUnknown                      =    999,

    





    cudaErrorApiFailureBase               =  10000
};




enum __declspec(__device_builtin__) cudaChannelFormatKind
{
    cudaChannelFormatKindSigned                         =   0,      
    cudaChannelFormatKindUnsigned                       =   1,      
    cudaChannelFormatKindFloat                          =   2,      
    cudaChannelFormatKindNone                           =   3,      
    cudaChannelFormatKindNV12                           =   4,      
    cudaChannelFormatKindUnsignedNormalized8X1          =   5,      
    cudaChannelFormatKindUnsignedNormalized8X2          =   6,      
    cudaChannelFormatKindUnsignedNormalized8X4          =   7,      
    cudaChannelFormatKindUnsignedNormalized16X1         =   8,      
    cudaChannelFormatKindUnsignedNormalized16X2         =   9,      
    cudaChannelFormatKindUnsignedNormalized16X4         =   10,     
    cudaChannelFormatKindSignedNormalized8X1            =   11,     
    cudaChannelFormatKindSignedNormalized8X2            =   12,     
    cudaChannelFormatKindSignedNormalized8X4            =   13,     
    cudaChannelFormatKindSignedNormalized16X1           =   14,     
    cudaChannelFormatKindSignedNormalized16X2           =   15,     
    cudaChannelFormatKindSignedNormalized16X4           =   16,     
    cudaChannelFormatKindUnsignedBlockCompressed1       =   17,     
    cudaChannelFormatKindUnsignedBlockCompressed1SRGB   =   18,     
    cudaChannelFormatKindUnsignedBlockCompressed2       =   19,     
    cudaChannelFormatKindUnsignedBlockCompressed2SRGB   =   20,     
    cudaChannelFormatKindUnsignedBlockCompressed3       =   21,     
    cudaChannelFormatKindUnsignedBlockCompressed3SRGB   =   22,     
    cudaChannelFormatKindUnsignedBlockCompressed4       =   23,     
    cudaChannelFormatKindSignedBlockCompressed4         =   24,     
    cudaChannelFormatKindUnsignedBlockCompressed5       =   25,     
    cudaChannelFormatKindSignedBlockCompressed5         =   26,     
    cudaChannelFormatKindUnsignedBlockCompressed6H      =   27,     
    cudaChannelFormatKindSignedBlockCompressed6H        =   28,     
    cudaChannelFormatKindUnsignedBlockCompressed7       =   29,     
    cudaChannelFormatKindUnsignedBlockCompressed7SRGB   =   30      
};




struct __declspec(__device_builtin__) cudaChannelFormatDesc
{
    int                        x; 
    int                        y; 
    int                        z; 
    int                        w; 
    enum cudaChannelFormatKind f; 
};




typedef struct cudaArray *cudaArray_t;




typedef const struct cudaArray *cudaArray_const_t;

struct cudaArray;




typedef struct cudaMipmappedArray *cudaMipmappedArray_t;




typedef const struct cudaMipmappedArray *cudaMipmappedArray_const_t;

struct cudaMipmappedArray;









struct __declspec(__device_builtin__) cudaArraySparseProperties {
    struct {
        unsigned int width;             
        unsigned int height;            
        unsigned int depth;             
    } tileExtent;
    unsigned int miptailFirstLevel;        
    unsigned long long miptailSize;     
    unsigned int flags;                 
    unsigned int reserved[4];
};




struct __declspec(__device_builtin__) cudaArrayMemoryRequirements {
    size_t size;                    
    size_t alignment;               
    unsigned int reserved[4];
};




enum __declspec(__device_builtin__) cudaMemoryType
{
    cudaMemoryTypeUnregistered = 0, 
    cudaMemoryTypeHost         = 1, 
    cudaMemoryTypeDevice       = 2, 
    cudaMemoryTypeManaged      = 3  
};




enum __declspec(__device_builtin__) cudaMemcpyKind
{
    cudaMemcpyHostToHost          =   0,      
    cudaMemcpyHostToDevice        =   1,      
    cudaMemcpyDeviceToHost        =   2,      
    cudaMemcpyDeviceToDevice      =   3,      
    cudaMemcpyDefault             =   4       
};






struct __declspec(__device_builtin__) cudaPitchedPtr
{
    void   *ptr;      
    size_t  pitch;    
    size_t  xsize;    
    size_t  ysize;    
};






struct __declspec(__device_builtin__) cudaExtent
{
    size_t width;     
    size_t height;    
    size_t depth;     
};






struct __declspec(__device_builtin__) cudaPos
{
    size_t x;     
    size_t y;     
    size_t z;     
};




struct __declspec(__device_builtin__) cudaMemcpy3DParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
  
    struct cudaExtent      extent;    
    enum cudaMemcpyKind    kind;      
};




struct __declspec(__device_builtin__) cudaMemcpy3DPeerParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
    int                    srcDevice; 
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
    int                    dstDevice; 
  
    struct cudaExtent      extent;    
};




struct __declspec(__device_builtin__)  cudaMemsetParams {
    void *dst;                              
    size_t pitch;                           
    unsigned int value;                     
    unsigned int elementSize;               
    size_t width;                           
    size_t height;                          
};




enum __declspec(__device_builtin__)  cudaAccessProperty {
    cudaAccessPropertyNormal = 0,       
    cudaAccessPropertyStreaming = 1,    
    cudaAccessPropertyPersisting = 2    
};












struct __declspec(__device_builtin__) cudaAccessPolicyWindow {
    void *base_ptr;                     
    size_t num_bytes;                   
    float hitRatio;                     
    enum cudaAccessProperty hitProp;    
    enum cudaAccessProperty missProp;   
};





#line 1340 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"





typedef void (__stdcall *cudaHostFn_t)(void *userData);




struct __declspec(__device_builtin__) cudaHostNodeParams {
    cudaHostFn_t fn;    
    void* userData; 
};




enum __declspec(__device_builtin__) cudaStreamCaptureStatus {
    cudaStreamCaptureStatusNone        = 0, 
    cudaStreamCaptureStatusActive      = 1, 
    cudaStreamCaptureStatusInvalidated = 2  

};





enum __declspec(__device_builtin__) cudaStreamCaptureMode {
    cudaStreamCaptureModeGlobal      = 0,
    cudaStreamCaptureModeThreadLocal = 1,
    cudaStreamCaptureModeRelaxed     = 2
};

enum __declspec(__device_builtin__) cudaSynchronizationPolicy {
    cudaSyncPolicyAuto = 1,
    cudaSyncPolicySpin = 2,
    cudaSyncPolicyYield = 3,
    cudaSyncPolicyBlockingSync = 4
};




enum __declspec(__device_builtin__) cudaClusterSchedulingPolicy {
    cudaClusterSchedulingPolicyDefault       = 0, 
    cudaClusterSchedulingPolicySpread        = 1, 
    cudaClusterSchedulingPolicyLoadBalancing = 2  
};




enum __declspec(__device_builtin__) cudaStreamUpdateCaptureDependenciesFlags {
    cudaStreamAddCaptureDependencies = 0x0, 
    cudaStreamSetCaptureDependencies = 0x1  
};




enum __declspec(__device_builtin__) cudaUserObjectFlags {
    cudaUserObjectNoDestructorSync = 0x1  
};




enum __declspec(__device_builtin__) cudaUserObjectRetainFlags {
    cudaGraphUserObjectMove = 0x1  
};




struct cudaGraphicsResource;




enum __declspec(__device_builtin__) cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone             = 0,  
    cudaGraphicsRegisterFlagsReadOnly         = 1,   
    cudaGraphicsRegisterFlagsWriteDiscard     = 2,  
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,  
    cudaGraphicsRegisterFlagsTextureGather    = 8   
};




enum __declspec(__device_builtin__) cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone         = 0,  
    cudaGraphicsMapFlagsReadOnly     = 1,  
    cudaGraphicsMapFlagsWriteDiscard = 2   
};




enum __declspec(__device_builtin__) cudaGraphicsCubeFace 
{
    cudaGraphicsCubeFacePositiveX = 0x00, 
    cudaGraphicsCubeFaceNegativeX = 0x01, 
    cudaGraphicsCubeFacePositiveY = 0x02, 
    cudaGraphicsCubeFaceNegativeY = 0x03, 
    cudaGraphicsCubeFacePositiveZ = 0x04, 
    cudaGraphicsCubeFaceNegativeZ = 0x05  
};




enum __declspec(__device_builtin__) cudaResourceType
{
    cudaResourceTypeArray          = 0x00, 
    cudaResourceTypeMipmappedArray = 0x01, 
    cudaResourceTypeLinear         = 0x02, 
    cudaResourceTypePitch2D        = 0x03  
};




enum __declspec(__device_builtin__) cudaResourceViewFormat
{
    cudaResViewFormatNone                      = 0x00, 
    cudaResViewFormatUnsignedChar1             = 0x01, 
    cudaResViewFormatUnsignedChar2             = 0x02, 
    cudaResViewFormatUnsignedChar4             = 0x03, 
    cudaResViewFormatSignedChar1               = 0x04, 
    cudaResViewFormatSignedChar2               = 0x05, 
    cudaResViewFormatSignedChar4               = 0x06, 
    cudaResViewFormatUnsignedShort1            = 0x07, 
    cudaResViewFormatUnsignedShort2            = 0x08, 
    cudaResViewFormatUnsignedShort4            = 0x09, 
    cudaResViewFormatSignedShort1              = 0x0a, 
    cudaResViewFormatSignedShort2              = 0x0b, 
    cudaResViewFormatSignedShort4              = 0x0c, 
    cudaResViewFormatUnsignedInt1              = 0x0d, 
    cudaResViewFormatUnsignedInt2              = 0x0e, 
    cudaResViewFormatUnsignedInt4              = 0x0f, 
    cudaResViewFormatSignedInt1                = 0x10, 
    cudaResViewFormatSignedInt2                = 0x11, 
    cudaResViewFormatSignedInt4                = 0x12, 
    cudaResViewFormatHalf1                     = 0x13, 
    cudaResViewFormatHalf2                     = 0x14, 
    cudaResViewFormatHalf4                     = 0x15, 
    cudaResViewFormatFloat1                    = 0x16, 
    cudaResViewFormatFloat2                    = 0x17, 
    cudaResViewFormatFloat4                    = 0x18, 
    cudaResViewFormatUnsignedBlockCompressed1  = 0x19, 
    cudaResViewFormatUnsignedBlockCompressed2  = 0x1a, 
    cudaResViewFormatUnsignedBlockCompressed3  = 0x1b, 
    cudaResViewFormatUnsignedBlockCompressed4  = 0x1c, 
    cudaResViewFormatSignedBlockCompressed4    = 0x1d, 
    cudaResViewFormatUnsignedBlockCompressed5  = 0x1e, 
    cudaResViewFormatSignedBlockCompressed5    = 0x1f, 
    cudaResViewFormatUnsignedBlockCompressed6H = 0x20, 
    cudaResViewFormatSignedBlockCompressed6H   = 0x21, 
    cudaResViewFormatUnsignedBlockCompressed7  = 0x22  
};




struct __declspec(__device_builtin__) cudaResourceDesc {
    enum cudaResourceType resType;             
    
    union {
        struct {
            cudaArray_t array;                 
        } array;
        struct {
            cudaMipmappedArray_t mipmap;       
        } mipmap;
        struct {
            void *devPtr;                      
            struct cudaChannelFormatDesc desc; 
            size_t sizeInBytes;                
        } linear;
        struct {
            void *devPtr;                      
            struct cudaChannelFormatDesc desc; 
            size_t width;                      
            size_t height;                     
            size_t pitchInBytes;               
        } pitch2D;
    } res;
};




struct __declspec(__device_builtin__) cudaResourceViewDesc
{
    enum cudaResourceViewFormat format;           
    size_t                      width;            
    size_t                      height;           
    size_t                      depth;            
    unsigned int                firstMipmapLevel; 
    unsigned int                lastMipmapLevel;  
    unsigned int                firstLayer;       
    unsigned int                lastLayer;        
};




struct __declspec(__device_builtin__) cudaPointerAttributes
{
    



    enum cudaMemoryType type;

    








    int device;

    



    void *devicePointer;

    






    void *hostPointer;
};




struct __declspec(__device_builtin__) cudaFuncAttributes
{
   




   size_t sharedSizeBytes;

   



   size_t constSizeBytes;

   


   size_t localSizeBytes;

   




   int maxThreadsPerBlock;

   


   int numRegs;

   




   int ptxVersion;

   




   int binaryVersion;

   



   int cacheModeCA;

   




   int maxDynamicSharedSizeBytes;

   






   int preferredShmemCarveout;

   



   int clusterDimMustBeSet;

   








   int requiredClusterWidth;
   int requiredClusterHeight;
   int requiredClusterDepth;

   



   int clusterSchedulingPolicyPreference;

   



















   int nonPortableClusterSizeAllowed;

   


   int reserved[16];
};




enum __declspec(__device_builtin__) cudaFuncAttribute
{
    cudaFuncAttributeMaxDynamicSharedMemorySize = 8, 
    cudaFuncAttributePreferredSharedMemoryCarveout = 9, 
    cudaFuncAttributeClusterDimMustBeSet = 10, 
    cudaFuncAttributeRequiredClusterWidth = 11, 
    cudaFuncAttributeRequiredClusterHeight = 12, 
    cudaFuncAttributeRequiredClusterDepth = 13, 
    cudaFuncAttributeNonPortableClusterSizeAllowed = 14, 
    cudaFuncAttributeClusterSchedulingPolicyPreference = 15, 
    cudaFuncAttributeMax
};




enum __declspec(__device_builtin__) cudaFuncCache
{
    cudaFuncCachePreferNone   = 0,    
    cudaFuncCachePreferShared = 1,    
    cudaFuncCachePreferL1     = 2,    
    cudaFuncCachePreferEqual  = 3     
};





enum __declspec(__device_builtin__) cudaSharedMemConfig
{
    cudaSharedMemBankSizeDefault   = 0,
    cudaSharedMemBankSizeFourByte  = 1,
    cudaSharedMemBankSizeEightByte = 2
};




enum __declspec(__device_builtin__) cudaSharedCarveout {
    cudaSharedmemCarveoutDefault      = -1,  
    cudaSharedmemCarveoutMaxShared    = 100, 
    cudaSharedmemCarveoutMaxL1        = 0    
};




enum __declspec(__device_builtin__) cudaComputeMode
{
    cudaComputeModeDefault          = 0,  
    cudaComputeModeExclusive        = 1,  
    cudaComputeModeProhibited       = 2,  
    cudaComputeModeExclusiveProcess = 3   
};




enum __declspec(__device_builtin__) cudaLimit
{
    cudaLimitStackSize                    = 0x00, 
    cudaLimitPrintfFifoSize               = 0x01, 
    cudaLimitMallocHeapSize               = 0x02, 
    cudaLimitDevRuntimeSyncDepth          = 0x03, 
    cudaLimitDevRuntimePendingLaunchCount = 0x04, 
    cudaLimitMaxL2FetchGranularity        = 0x05, 
    cudaLimitPersistingL2CacheSize        = 0x06  
};




enum __declspec(__device_builtin__) cudaMemoryAdvise
{
    cudaMemAdviseSetReadMostly          = 1, 
    cudaMemAdviseUnsetReadMostly        = 2, 
    cudaMemAdviseSetPreferredLocation   = 3, 
    cudaMemAdviseUnsetPreferredLocation = 4, 
    cudaMemAdviseSetAccessedBy          = 5, 
    cudaMemAdviseUnsetAccessedBy        = 6  
};




enum __declspec(__device_builtin__) cudaMemRangeAttribute
{
    cudaMemRangeAttributeReadMostly           = 1, 
    cudaMemRangeAttributePreferredLocation    = 2, 
    cudaMemRangeAttributeAccessedBy           = 3, 
    cudaMemRangeAttributeLastPrefetchLocation = 4  
};




enum __declspec(__device_builtin__) cudaFlushGPUDirectRDMAWritesOptions {
    cudaFlushGPUDirectRDMAWritesOptionHost   = 1<<0, 
    cudaFlushGPUDirectRDMAWritesOptionMemOps = 1<<1  
};




enum __declspec(__device_builtin__) cudaGPUDirectRDMAWritesOrdering {
    cudaGPUDirectRDMAWritesOrderingNone       = 0,   
    cudaGPUDirectRDMAWritesOrderingOwner      = 100, 
    cudaGPUDirectRDMAWritesOrderingAllDevices = 200  
};




enum __declspec(__device_builtin__) cudaFlushGPUDirectRDMAWritesScope {
    cudaFlushGPUDirectRDMAWritesToOwner      = 100, 
    cudaFlushGPUDirectRDMAWritesToAllDevices = 200  
};




enum __declspec(__device_builtin__) cudaFlushGPUDirectRDMAWritesTarget {
    cudaFlushGPUDirectRDMAWritesTargetCurrentDevice 
};





enum __declspec(__device_builtin__) cudaDeviceAttr
{
    cudaDevAttrMaxThreadsPerBlock             = 1,  
    cudaDevAttrMaxBlockDimX                   = 2,  
    cudaDevAttrMaxBlockDimY                   = 3,  
    cudaDevAttrMaxBlockDimZ                   = 4,  
    cudaDevAttrMaxGridDimX                    = 5,  
    cudaDevAttrMaxGridDimY                    = 6,  
    cudaDevAttrMaxGridDimZ                    = 7,  
    cudaDevAttrMaxSharedMemoryPerBlock        = 8,  
    cudaDevAttrTotalConstantMemory            = 9,  
    cudaDevAttrWarpSize                       = 10, 
    cudaDevAttrMaxPitch                       = 11, 
    cudaDevAttrMaxRegistersPerBlock           = 12, 
    cudaDevAttrClockRate                      = 13, 
    cudaDevAttrTextureAlignment               = 14, 
    cudaDevAttrGpuOverlap                     = 15, 
    cudaDevAttrMultiProcessorCount            = 16, 
    cudaDevAttrKernelExecTimeout              = 17, 
    cudaDevAttrIntegrated                     = 18, 
    cudaDevAttrCanMapHostMemory               = 19, 
    cudaDevAttrComputeMode                    = 20, 
    cudaDevAttrMaxTexture1DWidth              = 21, 
    cudaDevAttrMaxTexture2DWidth              = 22, 
    cudaDevAttrMaxTexture2DHeight             = 23, 
    cudaDevAttrMaxTexture3DWidth              = 24, 
    cudaDevAttrMaxTexture3DHeight             = 25, 
    cudaDevAttrMaxTexture3DDepth              = 26, 
    cudaDevAttrMaxTexture2DLayeredWidth       = 27, 
    cudaDevAttrMaxTexture2DLayeredHeight      = 28, 
    cudaDevAttrMaxTexture2DLayeredLayers      = 29, 
    cudaDevAttrSurfaceAlignment               = 30, 
    cudaDevAttrConcurrentKernels              = 31, 
    cudaDevAttrEccEnabled                     = 32, 
    cudaDevAttrPciBusId                       = 33, 
    cudaDevAttrPciDeviceId                    = 34, 
    cudaDevAttrTccDriver                      = 35, 
    cudaDevAttrMemoryClockRate                = 36, 
    cudaDevAttrGlobalMemoryBusWidth           = 37, 
    cudaDevAttrL2CacheSize                    = 38, 
    cudaDevAttrMaxThreadsPerMultiProcessor    = 39, 
    cudaDevAttrAsyncEngineCount               = 40, 
    cudaDevAttrUnifiedAddressing              = 41,     
    cudaDevAttrMaxTexture1DLayeredWidth       = 42, 
    cudaDevAttrMaxTexture1DLayeredLayers      = 43, 
    cudaDevAttrMaxTexture2DGatherWidth        = 45, 
    cudaDevAttrMaxTexture2DGatherHeight       = 46, 
    cudaDevAttrMaxTexture3DWidthAlt           = 47, 
    cudaDevAttrMaxTexture3DHeightAlt          = 48, 
    cudaDevAttrMaxTexture3DDepthAlt           = 49, 
    cudaDevAttrPciDomainId                    = 50, 
    cudaDevAttrTexturePitchAlignment          = 51, 
    cudaDevAttrMaxTextureCubemapWidth         = 52, 
    cudaDevAttrMaxTextureCubemapLayeredWidth  = 53, 
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54, 
    cudaDevAttrMaxSurface1DWidth              = 55, 
    cudaDevAttrMaxSurface2DWidth              = 56, 
    cudaDevAttrMaxSurface2DHeight             = 57, 
    cudaDevAttrMaxSurface3DWidth              = 58, 
    cudaDevAttrMaxSurface3DHeight             = 59, 
    cudaDevAttrMaxSurface3DDepth              = 60, 
    cudaDevAttrMaxSurface1DLayeredWidth       = 61, 
    cudaDevAttrMaxSurface1DLayeredLayers      = 62, 
    cudaDevAttrMaxSurface2DLayeredWidth       = 63, 
    cudaDevAttrMaxSurface2DLayeredHeight      = 64, 
    cudaDevAttrMaxSurface2DLayeredLayers      = 65, 
    cudaDevAttrMaxSurfaceCubemapWidth         = 66, 
    cudaDevAttrMaxSurfaceCubemapLayeredWidth  = 67, 
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68, 
    cudaDevAttrMaxTexture1DLinearWidth        = 69, 
    cudaDevAttrMaxTexture2DLinearWidth        = 70, 
    cudaDevAttrMaxTexture2DLinearHeight       = 71, 
    cudaDevAttrMaxTexture2DLinearPitch        = 72, 
    cudaDevAttrMaxTexture2DMipmappedWidth     = 73, 
    cudaDevAttrMaxTexture2DMipmappedHeight    = 74, 
    cudaDevAttrComputeCapabilityMajor         = 75,  
    cudaDevAttrComputeCapabilityMinor         = 76, 
    cudaDevAttrMaxTexture1DMipmappedWidth     = 77, 
    cudaDevAttrStreamPrioritiesSupported      = 78, 
    cudaDevAttrGlobalL1CacheSupported         = 79, 
    cudaDevAttrLocalL1CacheSupported          = 80, 
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81, 
    cudaDevAttrMaxRegistersPerMultiprocessor  = 82, 
    cudaDevAttrManagedMemory                  = 83, 
    cudaDevAttrIsMultiGpuBoard                = 84, 
    cudaDevAttrMultiGpuBoardGroupID           = 85, 
    cudaDevAttrHostNativeAtomicSupported      = 86, 
    cudaDevAttrSingleToDoublePrecisionPerfRatio = 87, 
    cudaDevAttrPageableMemoryAccess           = 88, 
    cudaDevAttrConcurrentManagedAccess        = 89, 
    cudaDevAttrComputePreemptionSupported     = 90, 
    cudaDevAttrCanUseHostPointerForRegisteredMem = 91, 
    cudaDevAttrReserved92                     = 92,
    cudaDevAttrReserved93                     = 93,
    cudaDevAttrReserved94                     = 94,
    cudaDevAttrCooperativeLaunch              = 95, 
    cudaDevAttrCooperativeMultiDeviceLaunch   = 96, 
    cudaDevAttrMaxSharedMemoryPerBlockOptin   = 97, 
    cudaDevAttrCanFlushRemoteWrites           = 98, 
    cudaDevAttrHostRegisterSupported          = 99, 
    cudaDevAttrPageableMemoryAccessUsesHostPageTables = 100, 
    cudaDevAttrDirectManagedMemAccessFromHost = 101, 
    cudaDevAttrMaxBlocksPerMultiprocessor     = 106, 
    cudaDevAttrMaxPersistingL2CacheSize       = 108, 
    cudaDevAttrMaxAccessPolicyWindowSize      = 109, 
    cudaDevAttrReservedSharedMemoryPerBlock   = 111, 
    cudaDevAttrSparseCudaArraySupported       = 112, 
    cudaDevAttrHostRegisterReadOnlySupported  = 113,  
    cudaDevAttrTimelineSemaphoreInteropSupported = 114,  
    cudaDevAttrMaxTimelineSemaphoreInteropSupported = 114,  
    cudaDevAttrMemoryPoolsSupported           = 115, 
    cudaDevAttrGPUDirectRDMASupported         = 116, 
    cudaDevAttrGPUDirectRDMAFlushWritesOptions = 117, 
    cudaDevAttrGPUDirectRDMAWritesOrdering    = 118, 
    cudaDevAttrMemoryPoolSupportedHandleTypes = 119, 
    cudaDevAttrClusterLaunch                  = 120, 
    cudaDevAttrDeferredMappingCudaArraySupported = 121, 
    cudaDevAttrReserved122                    = 122,
    cudaDevAttrReserved123                    = 123,
    cudaDevAttrReserved124                    = 124,
    cudaDevAttrIpcEventSupport                = 125,  
    cudaDevAttrMemSyncDomainCount             = 126, 
    cudaDevAttrReserved127                    = 127,
    cudaDevAttrReserved128                    = 128,
    cudaDevAttrReserved129                    = 129,
    cudaDevAttrReserved132                    = 132,
    cudaDevAttrMax
};




enum __declspec(__device_builtin__) cudaMemPoolAttr
{
    







    cudaMemPoolReuseFollowEventDependencies   = 0x1,

    




    cudaMemPoolReuseAllowOpportunistic        = 0x2,

    





    cudaMemPoolReuseAllowInternalDependencies = 0x3,


    







    cudaMemPoolAttrReleaseThreshold           = 0x4,

    



    cudaMemPoolAttrReservedMemCurrent         = 0x5,

    




    cudaMemPoolAttrReservedMemHigh            = 0x6,

    



    cudaMemPoolAttrUsedMemCurrent             = 0x7,

    




    cudaMemPoolAttrUsedMemHigh                = 0x8
};




enum __declspec(__device_builtin__) cudaMemLocationType {
    cudaMemLocationTypeInvalid = 0,
    cudaMemLocationTypeDevice = 1  
};






struct __declspec(__device_builtin__) cudaMemLocation {
    enum cudaMemLocationType type;  
    int id;                         
};




enum __declspec(__device_builtin__) cudaMemAccessFlags {
    cudaMemAccessFlagsProtNone      = 0,  
    cudaMemAccessFlagsProtRead      = 1,  
    cudaMemAccessFlagsProtReadWrite = 3   
};




struct __declspec(__device_builtin__) cudaMemAccessDesc {
    struct cudaMemLocation  location; 
    enum cudaMemAccessFlags flags;    
};




enum __declspec(__device_builtin__) cudaMemAllocationType {
    cudaMemAllocationTypeInvalid = 0x0,
    


    cudaMemAllocationTypePinned  = 0x1,
    cudaMemAllocationTypeMax     = 0x7FFFFFFF 
};




enum __declspec(__device_builtin__) cudaMemAllocationHandleType {
    cudaMemHandleTypeNone                    = 0x0,  
    cudaMemHandleTypePosixFileDescriptor     = 0x1,  
    cudaMemHandleTypeWin32                   = 0x2,  
    cudaMemHandleTypeWin32Kmt                = 0x4   
};




struct __declspec(__device_builtin__) cudaMemPoolProps {
    enum cudaMemAllocationType         allocType;   
    enum cudaMemAllocationHandleType   handleTypes; 
    struct cudaMemLocation             location;    
    





    void                              *win32SecurityAttributes;
    unsigned char                      reserved[64]; 
};




struct __declspec(__device_builtin__) cudaMemPoolPtrExportData {
    unsigned char reserved[64];
};




struct __declspec(__device_builtin__) cudaMemAllocNodeParams {
    



    struct cudaMemPoolProps         poolProps;       
    const struct cudaMemAccessDesc *accessDescs;     
    size_t                          accessDescCount; 
    size_t                          bytesize;        
    void                           *dptr;            
};




enum __declspec(__device_builtin__) cudaGraphMemAttributeType {
    



    cudaGraphMemAttrUsedMemCurrent      = 0x0,

    




    cudaGraphMemAttrUsedMemHigh         = 0x1,

    




    cudaGraphMemAttrReservedMemCurrent  = 0x2,

    




    cudaGraphMemAttrReservedMemHigh     = 0x3
};





enum __declspec(__device_builtin__) cudaDeviceP2PAttr {
    cudaDevP2PAttrPerformanceRank              = 1, 
    cudaDevP2PAttrAccessSupported              = 2, 
    cudaDevP2PAttrNativeAtomicSupported        = 3, 
    cudaDevP2PAttrCudaArrayAccessSupported     = 4  
};






struct __declspec(__device_builtin__) CUuuid_st {     
    char bytes[16];
};
typedef __declspec(__device_builtin__) struct CUuuid_st CUuuid;
#line 2189 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
typedef __declspec(__device_builtin__) struct CUuuid_st cudaUUID_t;




struct __declspec(__device_builtin__) cudaDeviceProp
{
    char         name[256];                  
    cudaUUID_t   uuid;                       
    char         luid[8];                    
    unsigned int luidDeviceNodeMask;         
    size_t       totalGlobalMem;             
    size_t       sharedMemPerBlock;          
    int          regsPerBlock;               
    int          warpSize;                   
    size_t       memPitch;                   
    int          maxThreadsPerBlock;         
    int          maxThreadsDim[3];           
    int          maxGridSize[3];             
    int          clockRate;                  
    size_t       totalConstMem;              
    int          major;                      
    int          minor;                      
    size_t       textureAlignment;           
    size_t       texturePitchAlignment;      
    int          deviceOverlap;              
    int          multiProcessorCount;        
    int          kernelExecTimeoutEnabled;   
    int          integrated;                 
    int          canMapHostMemory;           
    int          computeMode;                
    int          maxTexture1D;               
    int          maxTexture1DMipmap;         
    int          maxTexture1DLinear;         
    int          maxTexture2D[2];            
    int          maxTexture2DMipmap[2];      
    int          maxTexture2DLinear[3];      
    int          maxTexture2DGather[2];      
    int          maxTexture3D[3];            
    int          maxTexture3DAlt[3];         
    int          maxTextureCubemap;          
    int          maxTexture1DLayered[2];     
    int          maxTexture2DLayered[3];     
    int          maxTextureCubemapLayered[2];
    int          maxSurface1D;               
    int          maxSurface2D[2];            
    int          maxSurface3D[3];            
    int          maxSurface1DLayered[2];     
    int          maxSurface2DLayered[3];     
    int          maxSurfaceCubemap;          
    int          maxSurfaceCubemapLayered[2];
    size_t       surfaceAlignment;           
    int          concurrentKernels;          
    int          ECCEnabled;                 
    int          pciBusID;                   
    int          pciDeviceID;                
    int          pciDomainID;                
    int          tccDriver;                  
    int          asyncEngineCount;           
    int          unifiedAddressing;          
    int          memoryClockRate;            
    int          memoryBusWidth;             
    int          l2CacheSize;                
    int          persistingL2CacheMaxSize;   
    int          maxThreadsPerMultiProcessor;
    int          streamPrioritiesSupported;  
    int          globalL1CacheSupported;     
    int          localL1CacheSupported;      
    size_t       sharedMemPerMultiprocessor; 
    int          regsPerMultiprocessor;      
    int          managedMemory;              
    int          isMultiGpuBoard;            
    int          multiGpuBoardGroupID;       
    int          hostNativeAtomicSupported;  
    int          singleToDoublePrecisionPerfRatio; 
    int          pageableMemoryAccess;       
    int          concurrentManagedAccess;    
    int          computePreemptionSupported; 
    int          canUseHostPointerForRegisteredMem; 
    int          cooperativeLaunch;          
    int          cooperativeMultiDeviceLaunch; 
    size_t       sharedMemPerBlockOptin;     
    int          pageableMemoryAccessUsesHostPageTables; 
    int          directManagedMemAccessFromHost; 
    int          maxBlocksPerMultiProcessor; 
    int          accessPolicyMaxWindowSize;  
    size_t       reservedSharedMemPerBlock;  
    int          hostRegisterSupported;      
    int          sparseCudaArraySupported;   
    int          hostRegisterReadOnlySupported; 
    int          timelineSemaphoreInteropSupported; 
    int          memoryPoolsSupported;       
    int          gpuDirectRDMASupported;     
    unsigned int gpuDirectRDMAFlushWritesOptions; 
    int          gpuDirectRDMAWritesOrdering;
    unsigned int memoryPoolSupportedHandleTypes; 
    int          deferredMappingCudaArraySupported; 
    int          ipcEventSupported;          
    int          clusterLaunch;              
    int          unifiedFunctionPointers;    
    int          reserved2[2];
    int          reserved[61];               
};









typedef __declspec(__device_builtin__) struct __declspec(__device_builtin__) cudaIpcEventHandle_st
{
    char reserved[64];
}cudaIpcEventHandle_t;




typedef __declspec(__device_builtin__) struct __declspec(__device_builtin__) cudaIpcMemHandle_st 
{
    char reserved[64];
}cudaIpcMemHandle_t;




enum __declspec(__device_builtin__) cudaExternalMemoryHandleType {
    


    cudaExternalMemoryHandleTypeOpaqueFd         = 1,
    


    cudaExternalMemoryHandleTypeOpaqueWin32      = 2,
    


    cudaExternalMemoryHandleTypeOpaqueWin32Kmt   = 3,
    


    cudaExternalMemoryHandleTypeD3D12Heap        = 4,
    


    cudaExternalMemoryHandleTypeD3D12Resource    = 5,
    


    cudaExternalMemoryHandleTypeD3D11Resource    = 6,
    


    cudaExternalMemoryHandleTypeD3D11ResourceKmt = 7,
    


    cudaExternalMemoryHandleTypeNvSciBuf         = 8
};









































struct __declspec(__device_builtin__) cudaExternalMemoryHandleDesc {
    


    enum  cudaExternalMemoryHandleType type;
    union {
        




        int fd;
        














        struct {
            


            void *handle;
            



            const void *name;
        } win32;
        



        const void *nvSciBufObject;
    } handle;
    


    unsigned long long size;
    


    unsigned int flags;
};




struct __declspec(__device_builtin__) cudaExternalMemoryBufferDesc {
    


    unsigned long long offset;
    


    unsigned long long size;
    


    unsigned int flags;
};
 



struct __declspec(__device_builtin__) cudaExternalMemoryMipmappedArrayDesc {
    



    unsigned long long offset;
    


    struct cudaChannelFormatDesc formatDesc;
    


    struct cudaExtent extent;
    



    unsigned int flags;
    


    unsigned int numLevels;
};
 



enum __declspec(__device_builtin__) cudaExternalSemaphoreHandleType {
    


    cudaExternalSemaphoreHandleTypeOpaqueFd       = 1,
    


    cudaExternalSemaphoreHandleTypeOpaqueWin32    = 2,
    


    cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt = 3,
    


    cudaExternalSemaphoreHandleTypeD3D12Fence     = 4,
    


    cudaExternalSemaphoreHandleTypeD3D11Fence     = 5,
    


     cudaExternalSemaphoreHandleTypeNvSciSync     = 6,
    


    cudaExternalSemaphoreHandleTypeKeyedMutex     = 7,
    


    cudaExternalSemaphoreHandleTypeKeyedMutexKmt  = 8,
    


    cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd  = 9,
    


    cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32  = 10
};




struct __declspec(__device_builtin__) cudaExternalSemaphoreHandleDesc {
    


    enum cudaExternalSemaphoreHandleType type;
    union {
        





        int fd;
        














        struct {
            


            void *handle;
            



            const void *name;
        } win32;
        


        const void* nvSciSyncObj;
    } handle;
    


    unsigned int flags;
};




struct __declspec(__device_builtin__) cudaExternalSemaphoreSignalParams_v1 {
    struct {
        


        struct {
            


            unsigned long long value;
        } fence;
        union {
            



            void *fence;
            unsigned long long reserved;
        } nvSciSync;
        


        struct {
            


            unsigned long long key;
        } keyedMutex;
    } params;
    









    unsigned int flags;
};




struct __declspec(__device_builtin__) cudaExternalSemaphoreWaitParams_v1 {
    struct {
        


        struct {
            


            unsigned long long value;
        } fence;
        union {
            



            void *fence;
            unsigned long long reserved;
        } nvSciSync;
        


        struct {
            


            unsigned long long key;
            


            unsigned int timeoutMs;
        } keyedMutex;
    } params;
    









    unsigned int flags;
};




struct __declspec(__device_builtin__) cudaExternalSemaphoreSignalParams{
    struct {
        


        struct {
            


            unsigned long long value;
        } fence;
        union {
            



            void *fence;
            unsigned long long reserved;
        } nvSciSync;
        


        struct {
            


            unsigned long long key;
        } keyedMutex;
        unsigned int reserved[12];
    } params;
    









    unsigned int flags;
    unsigned int reserved[16];
};




struct __declspec(__device_builtin__) cudaExternalSemaphoreWaitParams {
    struct {
        


        struct {
            


            unsigned long long value;
        } fence;
        union {
            



            void *fence;
            unsigned long long reserved;
        } nvSciSync;
        


        struct {
            


            unsigned long long key;
            


            unsigned int timeoutMs;
        } keyedMutex;
        unsigned int reserved[10];
    } params;
    









    unsigned int flags;
    unsigned int reserved[16];
};










typedef __declspec(__device_builtin__) enum cudaError cudaError_t;




typedef __declspec(__device_builtin__) struct CUstream_st *cudaStream_t;




typedef __declspec(__device_builtin__) struct CUevent_st *cudaEvent_t;




typedef __declspec(__device_builtin__) struct cudaGraphicsResource *cudaGraphicsResource_t;




typedef __declspec(__device_builtin__) struct CUexternalMemory_st *cudaExternalMemory_t;




typedef __declspec(__device_builtin__) struct CUexternalSemaphore_st *cudaExternalSemaphore_t;




typedef __declspec(__device_builtin__) struct CUgraph_st *cudaGraph_t;




typedef __declspec(__device_builtin__) struct CUgraphNode_st *cudaGraphNode_t;




typedef __declspec(__device_builtin__) struct CUuserObject_st *cudaUserObject_t;




typedef __declspec(__device_builtin__) struct CUfunc_st *cudaFunction_t;




typedef __declspec(__device_builtin__) struct CUkern_st *cudaKernel_t;




typedef __declspec(__device_builtin__) struct CUmemPoolHandle_st *cudaMemPool_t;




enum __declspec(__device_builtin__) cudaCGScope {
    cudaCGScopeInvalid   = 0, 
    cudaCGScopeGrid      = 1, 
    cudaCGScopeMultiGrid = 2  
};




struct __declspec(__device_builtin__) cudaLaunchParams
{
    void *func;          
    dim3 gridDim;        
    dim3 blockDim;       
    void **args;         
    size_t sharedMem;    
    cudaStream_t stream; 
};




struct __declspec(__device_builtin__) cudaKernelNodeParams {
    void* func;                     
    dim3 gridDim;                   
    dim3 blockDim;                  
    unsigned int sharedMemBytes;    
    void **kernelParams;            
    void **extra;                   
};




struct __declspec(__device_builtin__) cudaExternalSemaphoreSignalNodeParams {
    cudaExternalSemaphore_t* extSemArray;                        
    const struct cudaExternalSemaphoreSignalParams* paramsArray; 
    unsigned int numExtSems;                                     
};




struct __declspec(__device_builtin__) cudaExternalSemaphoreWaitNodeParams {
    cudaExternalSemaphore_t* extSemArray;                      
    const struct cudaExternalSemaphoreWaitParams* paramsArray; 
    unsigned int numExtSems;                                   
};




enum __declspec(__device_builtin__) cudaGraphNodeType {
    cudaGraphNodeTypeKernel      = 0x00, 
    cudaGraphNodeTypeMemcpy      = 0x01, 
    cudaGraphNodeTypeMemset      = 0x02, 
    cudaGraphNodeTypeHost        = 0x03, 
    cudaGraphNodeTypeGraph       = 0x04, 
    cudaGraphNodeTypeEmpty       = 0x05, 
    cudaGraphNodeTypeWaitEvent   = 0x06, 
    cudaGraphNodeTypeEventRecord = 0x07, 
    cudaGraphNodeTypeExtSemaphoreSignal = 0x08, 
    cudaGraphNodeTypeExtSemaphoreWait = 0x09, 
    cudaGraphNodeTypeMemAlloc    = 0x0a, 
    cudaGraphNodeTypeMemFree     = 0x0b, 
    cudaGraphNodeTypeCount
};




typedef struct CUgraphExec_st* cudaGraphExec_t;




enum __declspec(__device_builtin__) cudaGraphExecUpdateResult {
    cudaGraphExecUpdateSuccess                = 0x0, 
    cudaGraphExecUpdateError                  = 0x1, 
    cudaGraphExecUpdateErrorTopologyChanged   = 0x2, 
    cudaGraphExecUpdateErrorNodeTypeChanged   = 0x3, 
    cudaGraphExecUpdateErrorFunctionChanged   = 0x4, 
    cudaGraphExecUpdateErrorParametersChanged = 0x5, 
    cudaGraphExecUpdateErrorNotSupported      = 0x6, 
    cudaGraphExecUpdateErrorUnsupportedFunctionChange = 0x7, 
    cudaGraphExecUpdateErrorAttributesChanged = 0x8 
};




typedef __declspec(__device_builtin__) enum cudaGraphInstantiateResult {
    cudaGraphInstantiateSuccess = 0,                       
    cudaGraphInstantiateError = 1,                         
    cudaGraphInstantiateInvalidStructure = 2,              
    cudaGraphInstantiateNodeOperationNotSupported = 3,     
    cudaGraphInstantiateMultipleDevicesNotSupported = 4    
} cudaGraphInstantiateResult;




typedef __declspec(__device_builtin__) struct cudaGraphInstantiateParams_st
{
    unsigned long long flags;              
    cudaStream_t uploadStream;             
    cudaGraphNode_t errNode_out;           
    cudaGraphInstantiateResult result_out; 
} cudaGraphInstantiateParams;




typedef __declspec(__device_builtin__) struct cudaGraphExecUpdateResultInfo_st {
    


    enum cudaGraphExecUpdateResult result;

    




    cudaGraphNode_t errorNode;

    


    cudaGraphNode_t errorFromNode;
} cudaGraphExecUpdateResultInfo;




 
enum __declspec(__device_builtin__) cudaGetDriverEntryPointFlags {
    cudaEnableDefault                = 0x0, 
    cudaEnableLegacyStream           = 0x1, 
    cudaEnablePerThreadDefaultStream = 0x2  
};




enum __declspec(__device_builtin__) cudaDriverEntryPointQueryResult {
    cudaDriverEntryPointSuccess             = 0,  
    cudaDriverEntryPointSymbolNotFound      = 1,  
    cudaDriverEntryPointVersionNotSufficent = 2   
};




enum __declspec(__device_builtin__) cudaGraphDebugDotFlags {
    cudaGraphDebugDotFlagsVerbose                  = 1<<0,  
    cudaGraphDebugDotFlagsKernelNodeParams         = 1<<2,  
    cudaGraphDebugDotFlagsMemcpyNodeParams         = 1<<3,  
    cudaGraphDebugDotFlagsMemsetNodeParams         = 1<<4,  
    cudaGraphDebugDotFlagsHostNodeParams           = 1<<5,  
    cudaGraphDebugDotFlagsEventNodeParams          = 1<<6,  
    cudaGraphDebugDotFlagsExtSemasSignalNodeParams = 1<<7,  
    cudaGraphDebugDotFlagsExtSemasWaitNodeParams   = 1<<8,  
    cudaGraphDebugDotFlagsKernelNodeAttributes     = 1<<9,  
    cudaGraphDebugDotFlagsHandles                  = 1<<10  
};




enum __declspec(__device_builtin__) cudaGraphInstantiateFlags {
    cudaGraphInstantiateFlagAutoFreeOnLaunch = 1 
  , cudaGraphInstantiateFlagUpload           = 2 
  , cudaGraphInstantiateFlagDeviceLaunch     = 4 
  , cudaGraphInstantiateFlagUseNodePriority  = 8 

};

typedef __declspec(__device_builtin__) enum cudaLaunchMemSyncDomain {
    cudaLaunchMemSyncDomainDefault = 0,
    cudaLaunchMemSyncDomainRemote  = 1
} cudaLaunchMemSyncDomain;

typedef __declspec(__device_builtin__) struct cudaLaunchMemSyncDomainMap_st {
    unsigned char default_;
    unsigned char remote;
} cudaLaunchMemSyncDomainMap;




typedef __declspec(__device_builtin__) enum cudaLaunchAttributeID {
    cudaLaunchAttributeIgnore                = 0 
  , cudaLaunchAttributeAccessPolicyWindow    = 1 
  , cudaLaunchAttributeCooperative           = 2 
  , cudaLaunchAttributeSynchronizationPolicy = 3 
  , cudaLaunchAttributeClusterDimension                  = 4 
  , cudaLaunchAttributeClusterSchedulingPolicyPreference = 5 
  , cudaLaunchAttributeProgrammaticStreamSerialization   = 6 










  , cudaLaunchAttributeProgrammaticEvent                 = 7 



















  , cudaLaunchAttributePriority              = 8 
  , cudaLaunchAttributeMemSyncDomainMap                  = 9
  , cudaLaunchAttributeMemSyncDomain                    = 10
} cudaLaunchAttributeID;




typedef __declspec(__device_builtin__) union cudaLaunchAttributeValue {
    char pad[64]; 
    struct cudaAccessPolicyWindow accessPolicyWindow; 
    int cooperative; 
    enum cudaSynchronizationPolicy syncPolicy; 
    struct {
        unsigned int x;
        unsigned int y;
        unsigned int z;
    } clusterDim; 
    enum cudaClusterSchedulingPolicy clusterSchedulingPolicyPreference; 
    int programmaticStreamSerializationAllowed;
    struct {
        cudaEvent_t event;
        int flags;
        int triggerAtBlockStart;
    } programmaticEvent;
    int priority; 
    cudaLaunchMemSyncDomainMap memSyncDomainMap;
    cudaLaunchMemSyncDomain memSyncDomain;
} cudaLaunchAttributeValue;




typedef __declspec(__device_builtin__) struct cudaLaunchAttribute_st {
    cudaLaunchAttributeID id;
    char pad[8 - sizeof(cudaLaunchAttributeID)];
    cudaLaunchAttributeValue val;
} cudaLaunchAttribute;




typedef __declspec(__device_builtin__) struct cudaLaunchConfig_st {
    dim3 gridDim;               
    dim3 blockDim;              
    size_t dynamicSmemBytes;    
    cudaStream_t stream;        
    cudaLaunchAttribute *attrs; 
    unsigned int numAttrs;      
} cudaLaunchConfig_t;






















 




#line 3159 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"



#line 3163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"


























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"
























enum __declspec(__device_builtin__) cudaSurfaceBoundaryMode
{
    cudaBoundaryModeZero  = 0,    
    cudaBoundaryModeClamp = 1,    
    cudaBoundaryModeTrap  = 2     
};




enum __declspec(__device_builtin__)  cudaSurfaceFormatMode
{
    cudaFormatModeForced = 0,     
    cudaFormatModeAuto = 1        
};




typedef __declspec(__device_builtin__) unsigned long long cudaSurfaceObject_t;


 

#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"


























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
























enum __declspec(__device_builtin__) cudaTextureAddressMode
{
    cudaAddressModeWrap   = 0,    
    cudaAddressModeClamp  = 1,    
    cudaAddressModeMirror = 2,    
    cudaAddressModeBorder = 3     
};




enum __declspec(__device_builtin__) cudaTextureFilterMode
{
    cudaFilterModePoint  = 0,     
    cudaFilterModeLinear = 1      
};




enum __declspec(__device_builtin__) cudaTextureReadMode
{
    cudaReadModeElementType     = 0,  
    cudaReadModeNormalizedFloat = 1   
};




struct __declspec(__device_builtin__) cudaTextureDesc
{
    


    enum cudaTextureAddressMode addressMode[3];
    


    enum cudaTextureFilterMode  filterMode;
    


    enum cudaTextureReadMode    readMode;
    


    int                         sRGB;
    


    float                       borderColor[4];
    


    int                         normalizedCoords;
    


    unsigned int                maxAnisotropy;
    


    enum cudaTextureFilterMode  mipmapFilterMode;
    


    float                       mipmapLevelBias;
    


    float                       minMipmapLevelClamp;
    


    float                       maxMipmapLevelClamp;
    


    int                         disableTrilinearOptimization;
    


    int                         seamlessCubemap;
};




typedef __declspec(__device_builtin__) unsigned long long cudaTextureObject_t;


 

#line 178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 92 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\library_types.h"






















































typedef enum cudaDataType_t
{
    CUDA_R_16F  =  2, 
    CUDA_C_16F  =  6, 
    CUDA_R_16BF = 14, 
    CUDA_C_16BF = 15, 
    CUDA_R_32F  =  0, 
    CUDA_C_32F  =  4, 
    CUDA_R_64F  =  1, 
    CUDA_C_64F  =  5, 
    CUDA_R_4I   = 16, 
    CUDA_C_4I   = 17, 
    CUDA_R_4U   = 18, 
    CUDA_C_4U   = 19, 
    CUDA_R_8I   =  3, 
    CUDA_C_8I   =  7, 
    CUDA_R_8U   =  8, 
    CUDA_C_8U   =  9, 
    CUDA_R_16I  = 20, 
    CUDA_C_16I  = 21, 
    CUDA_R_16U  = 22, 
    CUDA_C_16U  = 23, 
    CUDA_R_32I  = 10, 
    CUDA_C_32I  = 11, 
    CUDA_R_32U  = 12, 
    CUDA_C_32U  = 13, 
    CUDA_R_64I  = 24, 
    CUDA_C_64I  = 25, 
    CUDA_R_64U  = 26, 
    CUDA_C_64U  = 27, 
    CUDA_R_8F_E4M3 = 28, 
    CUDA_R_8F_E5M2 = 29, 
} cudaDataType;


typedef enum libraryPropertyType_t
{
    MAJOR_VERSION,
    MINOR_VERSION,
    PATCH_LEVEL
} libraryPropertyType;







#line 104 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\library_types.h"
#line 93 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\channel_descriptor.h"




























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"






















































































#line 146 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"







































































































































































































#line 259 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"




#line 264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"
#line 149 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
#line 150 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"











































































































#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
















































































































































































#line 178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 151 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"





















































#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"







#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_malloc.h"








#pragma once



#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {





































#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_malloc.h"

     
 __declspec(allocator) __declspec(restrict)
void* __cdecl _calloc_base(
      size_t _Count,
      size_t _Size
    );

     
  __declspec(allocator) __declspec(restrict) 
void* __cdecl calloc(
       size_t _Count,
       size_t _Size
    );

 
 int __cdecl _callnewh(
      size_t _Size
    );

     
 __declspec(allocator) 
void* __cdecl _expand(
                void*  _Block,
       size_t _Size
    );


void __cdecl _free_base(
        void* _Block
    );

 
void __cdecl free(
        void* _Block
    );

     
 __declspec(allocator) __declspec(restrict)
void* __cdecl _malloc_base(
      size_t _Size
    );

     
 __declspec(allocator)  __declspec(restrict) 
void* __cdecl malloc(
       size_t _Size
    );

 

size_t __cdecl _msize_base(
      void* _Block
    ) noexcept;

 
 
size_t __cdecl _msize(
      void* _Block
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _realloc_base(
         void*  _Block,
                                 size_t _Size
    );

       
 __declspec(allocator) __declspec(restrict) 
void* __cdecl realloc(
        void*  _Block,
              size_t _Size
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc_base(
        void*  _Block,
                                size_t _Count,
                                size_t _Size
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size
    );


void __cdecl _aligned_free(
        void* _Block
    );

     
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_malloc(
       size_t _Size,
                         size_t _Alignment
    );

     
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_malloc(
       size_t _Size,
                         size_t _Alignment,
                         size_t _Offset
    );

 

size_t __cdecl _aligned_msize(
      void*  _Block,
               size_t _Alignment,
               size_t _Offset
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_realloc(
        void*  _Block,
              size_t _Size,
                                size_t _Alignment,
                                size_t _Offset
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size,
                                size_t _Alignment,
                                size_t _Offset
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_realloc(
        void*  _Block,
              size_t _Size,
                                size_t _Alignment
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size,
                                size_t _Alignment
    );


















#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_malloc.h"



} __pragma(pack(pop))

#pragma warning(pop) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_search.h"










#pragma once




#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {


    typedef int (__cdecl* _CoreCrtSecureSearchSortCompareFunction)(void*, void const*, void const*);
    typedef int (__cdecl* _CoreCrtNonSecureSearchSortCompareFunction)(void const*, void const*);




     
     void* __cdecl bsearch_s(
                                                        void const* _Key,
          void const* _Base,
                                                        rsize_t     _NumOfElements,
                                                        rsize_t     _SizeOfElements,
                            _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                    void*       _Context
        );

     void __cdecl qsort_s(
          void*   _Base,
                                                             rsize_t _NumOfElements,
                                                             rsize_t _SizeOfElements,
                             _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                         void*   _Context
        );

#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_search.h"



 
 void* __cdecl bsearch(
                                                    void const* _Key,
      void const* _Base,
                                                    size_t      _NumOfElements,
                                                    size_t      _SizeOfElements,
                     _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );

 void __cdecl qsort(
      void*  _Base,
                                                         size_t _NumOfElements,
                                                         size_t _SizeOfElements,
                     _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );

 
 void* __cdecl _lfind_s(
                                                       void const*   _Key,
      void const*   _Base,
                                                    unsigned int* _NumOfElements,
                                                       size_t        _SizeOfElements,
                             _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                       void*         _Context
    );

 
 void* __cdecl _lfind(
                                                       void const*   _Key,
      void const*   _Base,
                                                    unsigned int* _NumOfElements,
                                                       unsigned int  _SizeOfElements,
                          _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );

 
 void* __cdecl _lsearch_s(
                                                             void const*   _Key,
      void*         _Base,
                                                          unsigned int* _NumOfElements,
                                                             size_t        _SizeOfElements,
                                   _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                             void*         _Context
    );

 
 void* __cdecl _lsearch(
                                                             void const*   _Key,
      void*         _Base,
                                                          unsigned int* _NumOfElements,
                                                             unsigned int  _SizeOfElements,
                                _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );




















































































#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_search.h"





      
     void* __cdecl lfind(
                                                           void const*   _Key,
          void const*   _Base,
                                                        unsigned int* _NumOfElements,
                                                           unsigned int  _SizeOfElements,
                              _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
        );

      
     void* __cdecl lsearch(
                                                                void const*   _Key,
          void*         _Base,
                                                             unsigned int* _NumOfElements,
                                                                unsigned int  _SizeOfElements,
                                   _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
        );

#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_search.h"



} __pragma(pack(pop))

#pragma warning(pop) 
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"








#pragma once



#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {


































     
    
     errno_t __cdecl _itow_s(
                                  int      _Value,
          wchar_t* _Buffer,
                                  size_t   _BufferCount,
                                  int      _Radix
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _itow_s(  int _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _itow_s(_Value, _Buffer, _Size, _Radix); } }
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"

      wchar_t* __cdecl _itow( int _Value,   wchar_t *_Buffer,  int _Radix);
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"

     
    
     errno_t __cdecl _ltow_s(
                                  long     _Value,
          wchar_t* _Buffer,
                                  size_t   _BufferCount,
                                  int      _Radix
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltow_s(  long _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _ltow_s(_Value, _Buffer, _Size, _Radix); } }
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"

      wchar_t* __cdecl _ltow( long _Value,   wchar_t *_Buffer,  int _Radix);
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"

    
     errno_t __cdecl _ultow_s(
                                  unsigned long _Value,
          wchar_t*      _Buffer,
                                  size_t        _BufferCount,
                                  int           _Radix
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultow_s(  unsigned long _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _ultow_s(_Value, _Buffer, _Size, _Radix); } }
#line 112 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"

      wchar_t* __cdecl _ultow( unsigned long _Value,   wchar_t *_Buffer,  int _Radix);
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"

     
     double __cdecl wcstod(
                            wchar_t const* _String,
            wchar_t**      _EndPtr
        );

     
     double __cdecl _wcstod_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                          _locale_t      _Locale
        );

     
     long __cdecl wcstol(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
     long __cdecl _wcstol_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
     long long __cdecl wcstoll(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
     long long __cdecl _wcstoll_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
     unsigned long __cdecl wcstoul(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
     unsigned long __cdecl _wcstoul_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
     unsigned long long __cdecl wcstoull(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
     unsigned long long __cdecl _wcstoull_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
     long double __cdecl wcstold(
                            wchar_t const* _String,
            wchar_t**      _EndPtr
        );

     
     long double __cdecl _wcstold_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                          _locale_t      _Locale
        );

     
     float __cdecl wcstof(
                            wchar_t const* _String,
            wchar_t**      _EndPtr
        );

     
     float __cdecl _wcstof_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                          _locale_t      _Locale
        );

     
     double __cdecl _wtof(
          wchar_t const* _String
        );

     
     double __cdecl _wtof_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

     
     int __cdecl _wtoi(
          wchar_t const* _String
        );

     
     int __cdecl _wtoi_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

     
     long __cdecl _wtol(
          wchar_t const* _String
        );

     
     long __cdecl _wtol_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

     
     long long __cdecl _wtoll(
          wchar_t const* _String
        );

     
     long long __cdecl _wtoll_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

    
     errno_t __cdecl _i64tow_s(
                                  __int64  _Value,
          wchar_t* _Buffer,
                                  size_t   _BufferCount,
                                  int      _Radix
        );

    
     wchar_t* __cdecl _i64tow(
                            __int64  _Value,
            wchar_t* _Buffer,
                            int      _Radix
        );

    
     errno_t __cdecl _ui64tow_s(
                                  unsigned __int64 _Value,
          wchar_t*         _Buffer,
                                  size_t           _BufferCount,
                                  int              _Radix
        );

    
     wchar_t* __cdecl _ui64tow(
                            unsigned __int64 _Value,
            wchar_t*         _Buffer,
                            int              _Radix
        );

     
     __int64 __cdecl _wtoi64(
          wchar_t const* _String
        );

     
     __int64 __cdecl _wtoi64_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

     
     __int64 __cdecl _wcstoi64(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
     __int64 __cdecl _wcstoi64_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
     unsigned __int64 __cdecl _wcstoui64(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
     unsigned __int64 __cdecl _wcstoui64_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

    
    

     
     
     __declspec(allocator) wchar_t* __cdecl _wfullpath(
          wchar_t*       _Buffer,
                                    wchar_t const* _Path,
                                      size_t         _BufferCount
        );

    

    
     errno_t __cdecl _wmakepath_s(
          wchar_t*       _Buffer,
                                  size_t         _BufferCount,
                            wchar_t const* _Drive,
                            wchar_t const* _Dir,
                            wchar_t const* _Filename,
                            wchar_t const* _Ext
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmakepath_s(wchar_t (&_Buffer)[_Size],   wchar_t const* _Drive,   wchar_t const* _Dir,   wchar_t const* _Filename,   wchar_t const* _Ext) throw() { return _wmakepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"

  void __cdecl _wmakepath(  wchar_t *_Buffer,  wchar_t const* _Drive,  wchar_t const* _Dir,  wchar_t const* _Filename,  wchar_t const* _Ext);
#line 374 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"

     void __cdecl _wperror(
          wchar_t const* _ErrorMessage
        );

    
     void __cdecl _wsplitpath(
                            wchar_t const* _FullPath,
            wchar_t*       _Drive,
            wchar_t*       _Dir,
            wchar_t*       _Filename,
            wchar_t*       _Ext
        );

     errno_t __cdecl _wsplitpath_s(
                                      wchar_t const* _FullPath,
             wchar_t*       _Drive,
                                        size_t         _DriveCount,
               wchar_t*       _Dir,
                                        size_t         _DirCount,
          wchar_t*       _Filename,
                                        size_t         _FilenameCount,
               wchar_t*       _Ext,
                                        size_t         _ExtCount
        );

    extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _wsplitpath_s(   wchar_t const* _Path,   wchar_t (&_Drive)[_DriveSize],   wchar_t (&_Dir)[_DirSize],   wchar_t (&_Name)[_NameSize],   wchar_t (&_Ext)[_ExtSize] ) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"

        
        

        
         errno_t __cdecl _wdupenv_s(
                wchar_t**      _Buffer,
                                                                                size_t*        _BufferCount,
                                                                                   wchar_t const* _VarName
            );

        

          
         wchar_t* __cdecl _wgetenv(
              wchar_t const* _VarName
            );

         
        
         errno_t __cdecl _wgetenv_s(
                                         size_t*        _RequiredCount,
              wchar_t*       _Buffer,
                                          size_t         _BufferCount,
                                        wchar_t const* _VarName
            );

        extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wgetenv_s(  size_t* _RequiredCount, wchar_t (&_Buffer)[_Size],   wchar_t const* _VarName) throw() { return _wgetenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 438 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"

         
         int __cdecl _wputenv(
              wchar_t const* _EnvString
            );

        
         errno_t __cdecl _wputenv_s(
              wchar_t const* _Name,
              wchar_t const* _Value
            );

         errno_t __cdecl _wsearchenv_s(
                                    wchar_t const* _Filename,
                                    wchar_t const* _VarName,
              wchar_t*       _Buffer,
                                      size_t         _BufferCount
            );

        extern "C++" { template <size_t _Size> inline errno_t __cdecl _wsearchenv_s(  wchar_t const* _Filename,   wchar_t const* _VarName, wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _VarName, _ResultPath, _Size); } }
#line 463 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"

          void __cdecl _wsearchenv( wchar_t const* _Filename,  wchar_t const* _VarName,   wchar_t *_ResultPath);
#line 470 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"

         int __cdecl _wsystem(
              wchar_t const* _Command
            );

#line 476 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"



} __pragma(pack(pop))

#pragma warning(pop) 
#line 16 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"


#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {




    
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"









 void __cdecl _swab(
        char* _Buf1,
        char* _Buf2,
                                                                  int   _SizeInBytes
    );













     __declspec(noreturn) void __cdecl exit(  int _Code);
     __declspec(noreturn) void __cdecl _exit(  int _Code);
     __declspec(noreturn) void __cdecl _Exit(  int _Code);
     __declspec(noreturn) void __cdecl quick_exit(  int _Code);
     __declspec(noreturn) void __cdecl abort(void);
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"





 unsigned int __cdecl _set_abort_behavior(
      unsigned int _Flags,
      unsigned int _Mask
    );




    

    typedef int (__cdecl* _onexit_t)(void);
    


#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"


    
    
#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

























































    int       __cdecl atexit(void (__cdecl*)(void));
    _onexit_t __cdecl _onexit(  _onexit_t _Func);
#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

int __cdecl at_quick_exit(void (__cdecl*)(void));









    
    typedef void (__cdecl* _purecall_handler)(void);

    
    typedef void (__cdecl* _invalid_parameter_handler)(
        wchar_t const*,
        wchar_t const*,
        wchar_t const*,
        unsigned int,
        uintptr_t
        );

    
     _purecall_handler __cdecl _set_purecall_handler(
          _purecall_handler _Handler
        );

     _purecall_handler __cdecl _get_purecall_handler(void);

    
     _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(
          _invalid_parameter_handler _Handler
        );

     _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);

     _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(
          _invalid_parameter_handler _Handler
        );

     _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(void);
#line 190 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"












#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"









  int __cdecl _set_error_mode(  int _Mode);




     int* __cdecl _errno(void);
    

     errno_t __cdecl _set_errno(  int _Value);
     errno_t __cdecl _get_errno(  int* _Value);

     unsigned long* __cdecl __doserrno(void);
    

     errno_t __cdecl _set_doserrno(  unsigned long _Value);
     errno_t __cdecl _get_doserrno(  unsigned long * _Value);

    
      char** __cdecl __sys_errlist(void);
    

      int * __cdecl __sys_nerr(void);
    

     void __cdecl perror(  char const* _ErrMsg);
#line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"




  char**    __cdecl __p__pgmptr (void);
  wchar_t** __cdecl __p__wpgmptr(void);
  int*      __cdecl __p__fmode  (void);








    
    
    
#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

 
 errno_t __cdecl _get_pgmptr (  char**    _Value);

 
 errno_t __cdecl _get_wpgmptr(  wchar_t** _Value);

 errno_t __cdecl _set_fmode  (               int       _Mode );

 errno_t __cdecl _get_fmode  (              int*      _PMode);








typedef struct _div_t
{
    int quot;
    int rem;
} div_t;

typedef struct _ldiv_t
{
    long quot;
    long rem;
} ldiv_t;

typedef struct _lldiv_t
{
    long long quot;
    long long rem;
} lldiv_t;

  int       __cdecl abs   (  int       _Number);
  long      __cdecl labs  (  long      _Number);
  long long __cdecl llabs (  long long _Number);
  __int64   __cdecl _abs64(  __int64   _Number);

  unsigned short   __cdecl _byteswap_ushort(  unsigned short   _Number);
  unsigned long    __cdecl _byteswap_ulong (  unsigned long    _Number);
  unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64 _Number);

   div_t   __cdecl div  (  int       _Numerator,   int       _Denominator);
   ldiv_t  __cdecl ldiv (  long      _Numerator,   long      _Denominator);
   lldiv_t __cdecl lldiv(  long long _Numerator,   long long _Denominator);



#pragma warning(push)
#pragma warning(disable: 6540)

unsigned int __cdecl _rotl(
      unsigned int _Value,
      int          _Shift
    );

 
unsigned long __cdecl _lrotl(
      unsigned long _Value,
      int           _Shift
    );

unsigned __int64 __cdecl _rotl64(
      unsigned __int64 _Value,
      int              _Shift
    );

unsigned int __cdecl _rotr(
      unsigned int _Value,
      int          _Shift
    );

 
unsigned long __cdecl _lrotr(
      unsigned long _Value,
      int           _Shift
    );

unsigned __int64 __cdecl _rotr64(
      unsigned __int64 _Value,
      int              _Shift
    );

#pragma warning(pop)






 void __cdecl srand(  unsigned int _Seed);

   int __cdecl rand(void);



#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"




extern "C++"
{
    inline long abs(long const _X) throw()
    {
        return labs(_X);
    }

    inline long long abs(long long const _X) throw()
    {
        return llabs(_X);
    }

    inline ldiv_t div(long const _A1, long const _A2) throw()
    {
        return ldiv(_A1, _A2);
    }

    inline lldiv_t div(long long const _A1, long long const _A2) throw()
    {
        return lldiv(_A1, _A2);
    }
}
#line 384 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"










    #pragma pack(push, 4)
    typedef struct
    {
        unsigned char ld[10];
    } _LDOUBLE;
    #pragma pack(pop)

    











#line 414 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

typedef struct
{
    double x;
} _CRT_DOUBLE;

typedef struct
{
    float f;
} _CRT_FLOAT;





typedef struct
{
    long double x;
} _LONGDOUBLE;



#pragma pack(push, 4)
typedef struct
{
    unsigned char ld12[12];
} _LDBL12;
#pragma pack(pop)








                      double    __cdecl atof   (  char const* _String);
    int       __cdecl atoi   (  char const* _String);
                      long      __cdecl atol   (  char const* _String);
                      long long __cdecl atoll  (  char const* _String);
                      __int64   __cdecl _atoi64(  char const* _String);

   double    __cdecl _atof_l  (  char const* _String,   _locale_t _Locale);
   int       __cdecl _atoi_l  (  char const* _String,   _locale_t _Locale);
   long      __cdecl _atol_l  (  char const* _String,   _locale_t _Locale);
   long long __cdecl _atoll_l (  char const* _String,   _locale_t _Locale);
   __int64   __cdecl _atoi64_l(  char const* _String,   _locale_t _Locale);

   int __cdecl _atoflt (  _CRT_FLOAT*  _Result,   char const* _String);
   int __cdecl _atodbl (  _CRT_DOUBLE* _Result,   char*       _String);
   int __cdecl _atoldbl(  _LDOUBLE*    _Result,   char*       _String);

 
 int __cdecl _atoflt_l(
         _CRT_FLOAT* _Result,
        char const* _String,
      _locale_t   _Locale
    );

 
 int __cdecl _atodbl_l(
         _CRT_DOUBLE* _Result,
        char*        _String,
      _locale_t    _Locale
    );


 
 int __cdecl _atoldbl_l(
         _LDOUBLE* _Result,
        char*     _String,
      _locale_t _Locale
    );

 
 float __cdecl strtof(
                        char const* _String,
        char**      _EndPtr
    );

 
 float __cdecl _strtof_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
 double __cdecl strtod(
                        char const* _String,
        char**      _EndPtr
    );

 
 double __cdecl _strtod_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
 long double __cdecl strtold(
                        char const* _String,
        char**      _EndPtr
    );

 
 long double __cdecl _strtold_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
 long __cdecl strtol(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 long __cdecl _strtol_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 long long __cdecl strtoll(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 long long __cdecl _strtoll_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 unsigned long __cdecl strtoul(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 unsigned long __cdecl _strtoul_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 unsigned long long __cdecl strtoull(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 unsigned long long __cdecl _strtoull_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 __int64 __cdecl _strtoi64(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 __int64 __cdecl _strtoi64_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 unsigned __int64 __cdecl _strtoui64(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 unsigned __int64 __cdecl _strtoui64_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );








 

 errno_t __cdecl _itoa_s(
                              int    _Value,
      char*  _Buffer,
                              size_t _BufferCount,
                              int    _Radix
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _itoa_s(  int _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _itoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 640 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

  char* __cdecl _itoa( int _Value,   char *_Buffer,  int _Radix);
#line 647 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

 

 errno_t __cdecl _ltoa_s(
                              long   _Value,
      char*  _Buffer,
                              size_t _BufferCount,
                              int    _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltoa_s(  long _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _ltoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 663 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

  char* __cdecl _ltoa( long _Value,   char *_Buffer,  int _Radix);
#line 670 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

 

 errno_t __cdecl _ultoa_s(
                              unsigned long _Value,
      char*         _Buffer,
                              size_t        _BufferCount,
                              int           _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultoa_s(  unsigned long _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _ultoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 686 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

  char* __cdecl _ultoa( unsigned long _Value,   char *_Buffer,  int _Radix);
#line 693 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

 

 errno_t __cdecl _i64toa_s(
                              __int64 _Value,
      char*   _Buffer,
                              size_t  _BufferCount,
                              int     _Radix
    );

 

 char* __cdecl _i64toa(
                        __int64 _Value,
        char*   _Buffer,
                        int     _Radix
    );

 

 errno_t __cdecl _ui64toa_s(
                              unsigned __int64 _Value,
      char*            _Buffer,
                              size_t           _BufferCount,
                              int              _Radix
    );


 char* __cdecl _ui64toa(
                        unsigned __int64 _Value,
        char*            _Buffer,
                        int              _Radix
    );













 

 errno_t __cdecl _ecvt_s(
      char* _Buffer,
       size_t                       _BufferCount,
       double                       _Value,
       int                          _DigitCount,
      int*                         _PtDec,
      int*                         _PtSign
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ecvt_s(char (&_Buffer)[_Size],   double _Value,   int _DigitCount,   int* _PtDec,   int* _PtSign) throw() { return _ecvt_s(_Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign); } }
#line 758 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

  
 char* __cdecl _ecvt(
       double _Value,
       int    _DigitCount,
      int*   _PtDec,
      int*   _PtSign
    );

 

 errno_t __cdecl _fcvt_s(
      char*  _Buffer,
                              size_t _BufferCount,
                              double _Value,
                              int    _FractionalDigitCount,
                             int*   _PtDec,
                             int*   _PtSign
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _fcvt_s(char (&_Buffer)[_Size],   double _Value,   int _FractionalDigitCount,   int* _PtDec,   int* _PtSign) throw() { return _fcvt_s(_Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign); } }
#line 787 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

 
  
 char* __cdecl _fcvt(
       double _Value,
       int    _FractionalDigitCount,
      int*   _PtDec,
      int*   _PtSign
    );

 
 errno_t __cdecl _gcvt_s(
      char*  _Buffer,
                              size_t _BufferCount,
                              double _Value,
                              int    _DigitCount
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _gcvt_s(char (&_Buffer)[_Size],   double _Value,   int _DigitCount) throw() { return _gcvt_s(_Buffer, _Size, _Value, _DigitCount); } }
#line 812 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"


 char* __cdecl _gcvt(
                        double _Value,
                        int    _DigitCount,
        char*  _Buffer
    );











    

#line 833 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"
        
    #line 835 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

    


        
    #line 841 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

     
     int __cdecl ___mb_cur_max_func(void);

     
     int __cdecl ___mb_cur_max_l_func(_locale_t _Locale);
#line 848 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"



 
 int __cdecl mblen(
        char const* _Ch,
                                             size_t      _MaxCount
    );

 
 int __cdecl _mblen_l(
        char const* _Ch,
                                             size_t      _MaxCount,
                                         _locale_t   _Locale
    );

 
 
 size_t __cdecl _mbstrlen(
      char const* _String
    );

 
 
 size_t __cdecl _mbstrlen_l(
        char const* _String,
      _locale_t   _Locale
    );

 
 
 size_t __cdecl _mbstrnlen(
      char const* _String,
        size_t      _MaxCount
    );

 
 
 size_t __cdecl _mbstrnlen_l(
        char const* _String,
          size_t      _MaxCount,
      _locale_t   _Locale
    );

 
 int __cdecl mbtowc(
                      wchar_t*    _DstCh,
      char const* _SrcCh,
                                      size_t      _SrcSizeInBytes
    );

 
 int __cdecl _mbtowc_l(
                      wchar_t*    _DstCh,
      char const* _SrcCh,
                                      size_t      _SrcSizeInBytes,
                                  _locale_t   _Locale
    );


 errno_t __cdecl mbstowcs_s(
                                                      size_t*     _PtNumOfCharConverted,
      wchar_t*    _DstBuf,
                                                           size_t      _SizeInWords,
                                     char const* _SrcBuf,
                                                           size_t      _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl mbstowcs_s(  size_t* _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],   char const* _Source,   size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 923 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

  size_t __cdecl mbstowcs( wchar_t *_Dest,  char const* _Source,  size_t _MaxCount);
#line 930 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"


 errno_t __cdecl _mbstowcs_s_l(
                                                      size_t*     _PtNumOfCharConverted,
      wchar_t*    _DstBuf,
                                                           size_t      _SizeInWords,
                                     char const* _SrcBuf,
                                                           size_t      _MaxCount,
                                                       _locale_t   _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _mbstowcs_s_l(  size_t* _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],   char const* _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 949 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

  size_t __cdecl _mbstowcs_l(  wchar_t *_Dest,   char const* _Source,   size_t _MaxCount,   _locale_t _Locale);
#line 958 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"





 int __cdecl wctomb(
      char*   _MbCh,
                                wchar_t _WCh
    );


 int __cdecl _wctomb_l(
        char*     _MbCh,
                          wchar_t   _WCh,
                      _locale_t _Locale
    );



    
     errno_t __cdecl wctomb_s(
                                                         int*    _SizeConverted,
          char*   _MbCh,
                                                              rsize_t _SizeInBytes,
                                                              wchar_t _WCh
        );

#line 986 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"


 errno_t __cdecl _wctomb_s_l(
                             int*     _SizeConverted,
      char*     _MbCh,
                                  size_t    _SizeInBytes,
                                  wchar_t   _WCh,
                              _locale_t _Locale);


 errno_t __cdecl wcstombs_s(
                                                               size_t*        _PtNumOfCharConverted,
      char*          _Dst,
                                                                    size_t         _DstSizeInBytes,
                                                                  wchar_t const* _Src,
                                                                    size_t         _MaxCountInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcstombs_s(  size_t* _PtNumOfCharConverted,   char (&_Dest)[_Size],   wchar_t const* _Source,   size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 1011 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

  size_t __cdecl wcstombs( char *_Dest,  wchar_t const* _Source,  size_t _MaxCount);
#line 1018 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"


 errno_t __cdecl _wcstombs_s_l(
                                                               size_t*        _PtNumOfCharConverted,
      char*          _Dst,
                                                                    size_t         _DstSizeInBytes,
                                                                  wchar_t const* _Src,
                                                                    size_t         _MaxCountInBytes,
                                                                _locale_t      _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcstombs_s_l(  size_t* _PtNumOfCharConverted,   char (&_Dest)[_Size],   wchar_t const* _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 1037 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

  size_t __cdecl _wcstombs_l(  char *_Dest,   wchar_t const* _Source,   size_t _MaxCount,   _locale_t _Locale);
#line 1046 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"




















 
 
 __declspec(allocator) char* __cdecl _fullpath(
      char*       _Buffer,
                                char const* _Path,
                                  size_t      _BufferCount
    );




 errno_t __cdecl _makepath_s(
      char*       _Buffer,
                              size_t      _BufferCount,
                        char const* _Drive,
                        char const* _Dir,
                        char const* _Filename,
                        char const* _Ext
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _makepath_s(char (&_Buffer)[_Size],   char const* _Drive,   char const* _Dir,   char const* _Filename,   char const* _Ext) throw() { return _makepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 1094 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

  void __cdecl _makepath(  char *_Buffer,  char const* _Drive,  char const* _Dir,  char const* _Filename,  char const* _Ext);
#line 1103 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"


 void __cdecl _splitpath(
                        char const* _FullPath,
        char*       _Drive,
        char*       _Dir,
        char*       _Filename,
        char*       _Ext
    );


 errno_t __cdecl _splitpath_s(
                                  char const* _FullPath,
         char*       _Drive,
                                    size_t      _DriveCount,
           char*       _Dir,
                                    size_t      _DirCount,
      char*       _Filename,
                                    size_t      _FilenameCount,
           char*       _Ext,
                                    size_t      _ExtCount
    );

extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _splitpath_s(   char const* _Dest,   char (&_Drive)[_DriveSize],   char (&_Dir)[_DirSize],   char (&_Name)[_NameSize],   char (&_Ext)[_ExtSize] ) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }




 
 errno_t __cdecl getenv_s(
                                 size_t*     _RequiredCount,
      char*       _Buffer,
                                  rsize_t     _BufferCount,
                                char const* _VarName
    );

#line 1140 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"




 int*       __cdecl __p___argc (void);
 char***    __cdecl __p___argv (void);
 wchar_t*** __cdecl __p___wargv(void);






    
    
    
#line 1157 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

 char***    __cdecl __p__environ (void);
 wchar_t*** __cdecl __p__wenviron(void);


    
#line 1164 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"







    
    
#line 1174 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"









      
     char* __cdecl getenv(
          char const* _VarName
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl getenv_s(  size_t* _RequiredCount, char (&_Buffer)[_Size],   char const* _VarName) throw() { return getenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 1194 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

    


#line 1199 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

    
     errno_t __cdecl _dupenv_s(
            char**      _Buffer,
                                                                            size_t*     _BufferCount,
                                                                               char const* _VarName
        );

    

#line 1210 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

     int __cdecl system(
          char const* _Command
        );

    
    
    #pragma warning(push)
    #pragma warning(disable: 6540)

     
     int __cdecl _putenv(
          char const* _EnvString
        );

    
     errno_t __cdecl _putenv_s(
          char const* _Name,
          char const* _Value
        );

    #pragma warning(pop)

     errno_t __cdecl _searchenv_s(
                                char const* _Filename,
                                char const* _VarName,
          char*       _Buffer,
                                  size_t      _BufferCount
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _searchenv_s(  char const* _Filename,   char const* _VarName, char (&_Buffer)[_Size]) throw() { return _searchenv_s(_Filename, _VarName, _Buffer, _Size); } }
#line 1246 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

      void __cdecl _searchenv( char const* _Filename,  char const* _VarName,   char *_Buffer);
#line 1253 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"

    
    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetErrorMode" " " "instead. See online help for details."))
     void __cdecl _seterrormode(
          int _Mode
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Beep" " " "instead. See online help for details."))
     void __cdecl _beep(
          unsigned _Frequency,
          unsigned _Duration
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Sleep" " " "instead. See online help for details."))
     void __cdecl _sleep(
          unsigned long _Duration
        );

#line 1272 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"









    




    
    

    #pragma warning(push)
    #pragma warning(disable: 4141) 

       
     char* __cdecl ecvt(
           double _Value,
           int    _DigitCount,
          int*   _PtDec,
          int*   _PtSign
        );

       
     char* __cdecl fcvt(
           double _Value,
           int    _FractionalDigitCount,
          int*   _PtDec,
          int*   _PtSign
        );

     
     char* __cdecl gcvt(
                            double _Value,
                            int    _DigitCount,
            char*  _DstBuf
        );

     
     char* __cdecl itoa(
                            int   _Value,
            char* _Buffer,
                            int   _Radix
        );

     
     char* __cdecl ltoa(
                            long  _Value,
            char* _Buffer,
                            int   _Radix
        );


    
     void __cdecl swab(
          char* _Buf1,
          char* _Buf2,
                                     int   _SizeInBytes
        );

     
     char* __cdecl ultoa(
                            unsigned long _Value,
            char*         _Buffer,
                            int           _Radix
        );

    

      
     int __cdecl putenv(
          char const* _EnvString
        );

    #pragma warning(pop)

    _onexit_t __cdecl onexit(  _onexit_t _Func);

#line 1356 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"



} __pragma(pack(pop))

#pragma warning(pop) 
#line 1363 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stdlib.h"
#line 55 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"
#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"









#line 66 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"















































































#line 146 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"

#line 148 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"



#line 152 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"





#line 158 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"



#line 162 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"

#line 164 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"




#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#line 169 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"







































































































































































































#line 259 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"




#line 264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"
#line 170 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"







#line 178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"

extern "C"
{





extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaDeviceSynchronizeDeprecationAvoidance(void);
















































extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2DeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2DeviceGetLimit(size_t *pValue, enum cudaLimit limit);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2DeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2DeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2GetLastError(void);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2PeekAtLastError(void);
extern __declspec(__device__) __declspec(__cudart_builtin__) const char* __stdcall __cudaCDP2GetErrorString(cudaError_t error);
extern __declspec(__device__) __declspec(__cudart_builtin__) const char* __stdcall __cudaCDP2GetErrorName(cudaError_t error);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2GetDeviceCount(int *count);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2GetDevice(int *device);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2StreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2StreamDestroy(cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2StreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2StreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned int flags);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2EventCreateWithFlags(cudaEvent_t *event, unsigned int flags);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2EventRecord(cudaEvent_t event, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2EventRecord_ptsz(cudaEvent_t event, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2EventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned int flags);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2EventRecordWithFlags_ptsz(cudaEvent_t event, cudaStream_t stream, unsigned int flags);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2EventDestroy(cudaEvent_t event);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2FuncGetAttributes(struct cudaFuncAttributes *attr, const void *func);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2Free(void *devPtr);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2Malloc(void **devPtr, size_t size);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2MemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2MemcpyAsync_ptsz(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2Memcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2Memcpy2DAsync_ptsz(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2Memcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2Memcpy3DAsync_ptsz(const struct cudaMemcpy3DParms *p, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2MemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2MemsetAsync_ptsz(void *devPtr, int value, size_t count, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2Memset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2Memset2DAsync_ptsz(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2Memset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2Memset3DAsync_ptsz(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2RuntimeGetVersion(int *runtimeVersion);
extern __declspec(__device__) __declspec(__cudart_builtin__) void * __stdcall __cudaCDP2GetParameterBuffer(size_t alignment, size_t size);
extern __declspec(__device__) __declspec(__cudart_builtin__) void * __stdcall __cudaCDP2GetParameterBufferV2(void *func, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2LaunchDevice_ptsz(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2LaunchDeviceV2_ptsz(void *parameterBuffer, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2LaunchDevice(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2LaunchDeviceV2(void *parameterBuffer, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2OccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSmemSize);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall __cudaCDP2OccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSmemSize, unsigned int flags);


extern  __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream);








#line 291 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"









static inline __declspec(__device__) __declspec(__cudart_builtin__) cudaGraphExec_t __stdcall cudaGetCurrentGraphExec(void)
{
    unsigned long long current_graph_exec;
    asm ("mov.u64 %0, %%current_graph_exec;" : "=l"(current_graph_exec));
    return (cudaGraphExec_t)current_graph_exec;
}

















static inline __declspec(__device__) __declspec(__cudart_builtin__) void __stdcall cudaTriggerProgrammaticLaunchCompletion(void)
{
    asm volatile("griddepcontrol.launch_dependents;":::);
}












static inline __declspec(__device__) __declspec(__cudart_builtin__) void __stdcall cudaGridDependencySynchronize(void)
{
    asm volatile("griddepcontrol.wait;":::"memory");
}



extern __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long __stdcall cudaCGGetIntrinsicHandle(enum cudaCGScope scope);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaCGSynchronize(unsigned long long handle, unsigned int flags);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaCGSynchronizeGrid(unsigned long long handle, unsigned int flags);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaCGGetSize(unsigned int *numThreads, unsigned int *numGrids, unsigned long long handle);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaCGGetRank(unsigned int *threadRank, unsigned int *gridRank, unsigned long long handle);





























































































































































































































static __inline __declspec(__device__) __declspec(__cudart_builtin__) void * __stdcall cudaGetParameterBuffer(size_t alignment, size_t size)
{
    return __cudaCDP2GetParameterBuffer(alignment, size);
}


#line 579 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"





























static __inline __declspec(__device__) __declspec(__cudart_builtin__) void * __stdcall cudaGetParameterBufferV2(void *func, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize)
{
    return __cudaCDP2GetParameterBufferV2(func, gridDimension, blockDimension, sharedMemSize);
}


#line 615 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"



static __inline __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaLaunchDevice_ptsz(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize, cudaStream_t stream)
{
    return __cudaCDP2LaunchDevice_ptsz(func, parameterBuffer, gridDimension, blockDimension, sharedMemSize, stream);
}

static __inline __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaLaunchDeviceV2_ptsz(void *parameterBuffer, cudaStream_t stream)
{
    return __cudaCDP2LaunchDeviceV2_ptsz(parameterBuffer, stream);
}



#line 631 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"

























#line 657 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"

    static __inline __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaLaunchDevice(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize, cudaStream_t stream)
    {
        return __cudaCDP2LaunchDevice(func, parameterBuffer, gridDimension, blockDimension, sharedMemSize, stream);
    }

    static __inline __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaLaunchDeviceV2(void *parameterBuffer, cudaStream_t stream)
    {
        return __cudaCDP2LaunchDeviceV2(parameterBuffer, stream);
    }



#line 671 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"
#line 672 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"
















































}

template <typename T> static __inline __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t cudaMalloc(T **devPtr, size_t size);
template <typename T> static __inline __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, T *entry);
template <typename T> static __inline __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, T func, int blockSize, size_t dynamicSmemSize);
template <typename T> static __inline __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned int flags);


#line 729 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"
#line 730 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"





#line 736 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"
#line 153 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"





#line 159 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
    
    
#line 162 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"




    




























































#line 228 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"













#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"

#line 244 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"










#line 255 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"







#line 263 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"





#line 269 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"



extern "C" {
#line 274 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"






































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceReset(void);





















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceSynchronize(void);





















































































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetLimit(enum cudaLimit limit, size_t value);



































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit);






















 extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetTexture1DLinearMaxWidth(size_t *maxWidthInElements, const struct cudaChannelFormatDesc *fmtDesc, int device);
#line 481 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig);




































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetStreamPriorityRange(int *leastPriority, int *greatestPriority);











































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetCacheConfig(enum cudaFuncCache cacheConfig);






























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig);











































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetSharedMemConfig(enum cudaSharedMemConfig config);


























extern __declspec(__host__) cudaError_t __stdcall cudaDeviceGetByPCIBusId(int *device, const char *pciBusId);





























extern __declspec(__host__) cudaError_t __stdcall cudaDeviceGetPCIBusId(char *pciBusId, int len, int device);

















































extern __declspec(__host__) cudaError_t __stdcall cudaIpcGetEventHandle(cudaIpcEventHandle_t *handle, cudaEvent_t event);










































extern __declspec(__host__) cudaError_t __stdcall cudaIpcOpenEventHandle(cudaEvent_t *event, cudaIpcEventHandle_t handle);











































extern __declspec(__host__) cudaError_t __stdcall cudaIpcGetMemHandle(cudaIpcMemHandle_t *handle, void *devPtr);

































































extern __declspec(__host__) cudaError_t __stdcall cudaIpcOpenMemHandle(void **devPtr, cudaIpcMemHandle_t handle, unsigned int flags);





































extern __declspec(__host__) cudaError_t __stdcall cudaIpcCloseMemHandle(void *devPtr);































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceFlushGPUDirectRDMAWrites(enum cudaFlushGPUDirectRDMAWritesTarget target, enum cudaFlushGPUDirectRDMAWritesScope scope);
#line 1001 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"

 







































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaThreadExit(void);

























extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaThreadSynchronize(void);
















































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaThreadSetLimit(enum cudaLimit limit, size_t value);
































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaThreadGetLimit(size_t *pValue, enum cudaLimit limit);



































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaThreadGetCacheConfig(enum cudaFuncCache *pCacheConfig);














































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaThreadSetCacheConfig(enum cudaFuncCache cacheConfig);

 






























































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetLastError(void);


















































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaPeekAtLastError(void);















extern __declspec(__host__) __declspec(__cudart_builtin__) const char* __stdcall cudaGetErrorName(cudaError_t error);















extern __declspec(__host__) __declspec(__cudart_builtin__) const char* __stdcall cudaGetErrorString(cudaError_t error);
 



























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDeviceCount(int *count);
















































































































































































































































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDeviceProperties_v2(struct cudaDeviceProp *prop, int device);









































































































































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device);

















extern __declspec(__host__) cudaError_t __stdcall cudaDeviceGetDefaultMemPool(cudaMemPool_t *memPool, int device);























extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetMemPool(int device, cudaMemPool_t memPool);



















extern __declspec(__host__) cudaError_t __stdcall cudaDeviceGetMemPool(cudaMemPool_t *memPool, int device);





























































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceGetNvSciSyncAttributes(void *nvSciSyncAttrList, int device, int flags);







































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetP2PAttribute(int *value, enum cudaDeviceP2PAttr attr, int srcDevice, int dstDevice);





















extern __declspec(__host__) cudaError_t __stdcall cudaChooseDevice(int *device, const struct cudaDeviceProp *prop);




























extern __declspec(__host__) cudaError_t __stdcall cudaInitDevice(int device, unsigned int deviceFlags, unsigned int flags);













































extern __declspec(__host__) cudaError_t __stdcall cudaSetDevice(int device);





















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDevice(int *device);






























extern __declspec(__host__) cudaError_t __stdcall cudaSetValidDevices(int *device_arr, int len);

































































extern __declspec(__host__) cudaError_t __stdcall cudaSetDeviceFlags( unsigned int flags );












































extern __declspec(__host__) cudaError_t __stdcall cudaGetDeviceFlags( unsigned int *flags );
 






































extern __declspec(__host__) cudaError_t __stdcall cudaStreamCreate(cudaStream_t *pStream);































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags);













































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamCreateWithPriority(cudaStream_t *pStream, unsigned int flags, int priority);


























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamGetPriority(cudaStream_t hStream, int *priority);
























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamGetFlags(cudaStream_t hStream, unsigned int *flags);




































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamGetId(cudaStream_t hStream, unsigned long long *streamId);














extern __declspec(__host__) cudaError_t __stdcall cudaCtxResetPersistingL2Cache(void);



















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src);

 


















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamGetAttribute(
        cudaStream_t hStream, cudaLaunchAttributeID attr,
        cudaLaunchAttributeValue *value_out);

 



















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamSetAttribute(
        cudaStream_t hStream, cudaLaunchAttributeID attr,
        const cudaLaunchAttributeValue *value);

 





























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream);






























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags = 0);







typedef void (__stdcall *cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void *userData);


































































extern __declspec(__host__) cudaError_t __stdcall cudaStreamAddCallback(cudaStream_t stream,
        cudaStreamCallback_t callback, void *userData, unsigned int flags);






















extern __declspec(__host__) cudaError_t __stdcall cudaStreamSynchronize(cudaStream_t stream);
























extern __declspec(__host__) cudaError_t __stdcall cudaStreamQuery(cudaStream_t stream);



















































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamAttachMemAsync(cudaStream_t stream, void *devPtr, size_t length = 0, unsigned int flags = 0x04);


#line 2906 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"



































extern __declspec(__host__) cudaError_t __stdcall cudaStreamBeginCapture(cudaStream_t stream, enum cudaStreamCaptureMode mode);


















































extern __declspec(__host__) cudaError_t __stdcall cudaThreadExchangeStreamCaptureMode(enum cudaStreamCaptureMode *mode);



























extern __declspec(__host__) cudaError_t __stdcall cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t *pGraph);





































extern __declspec(__host__) cudaError_t __stdcall cudaStreamIsCapturing(cudaStream_t stream, enum cudaStreamCaptureStatus *pCaptureStatus);















































extern __declspec(__host__) cudaError_t __stdcall cudaStreamGetCaptureInfo_v2(cudaStream_t stream, enum cudaStreamCaptureStatus *captureStatus_out, unsigned long long *id_out = 0, cudaGraph_t *graph_out = 0, const cudaGraphNode_t **dependencies_out = 0, size_t *numDependencies_out = 0);































extern __declspec(__host__) cudaError_t __stdcall cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t *dependencies, size_t numDependencies, unsigned int flags = 0);
 



































extern __declspec(__host__) cudaError_t __stdcall cudaEventCreate(cudaEvent_t *event);




































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags);







































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0);














































 extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream = 0, unsigned int flags = 0);
#line 3301 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"






























extern __declspec(__host__) cudaError_t __stdcall cudaEventQuery(cudaEvent_t event);





























extern __declspec(__host__) cudaError_t __stdcall cudaEventSynchronize(cudaEvent_t event);




























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event);











































extern __declspec(__host__) cudaError_t __stdcall cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end);

 


















































































































































































extern __declspec(__host__) cudaError_t __stdcall cudaImportExternalMemory(cudaExternalMemory_t *extMem_out, const struct cudaExternalMemoryHandleDesc *memHandleDesc);






















































extern __declspec(__host__) cudaError_t __stdcall cudaExternalMemoryGetMappedBuffer(void **devPtr, cudaExternalMemory_t extMem, const struct cudaExternalMemoryBufferDesc *bufferDesc);



























































extern __declspec(__host__) cudaError_t __stdcall cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t *mipmap, cudaExternalMemory_t extMem, const struct cudaExternalMemoryMipmappedArrayDesc *mipmapDesc);























extern __declspec(__host__) cudaError_t __stdcall cudaDestroyExternalMemory(cudaExternalMemory_t extMem);

























































































































































extern __declspec(__host__) cudaError_t __stdcall cudaImportExternalSemaphore(cudaExternalSemaphore_t *extSem_out, const struct cudaExternalSemaphoreHandleDesc *semHandleDesc);


















































































extern __declspec(__host__) cudaError_t __stdcall cudaSignalExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t *extSemArray, const struct cudaExternalSemaphoreSignalParams *paramsArray, unsigned int numExtSems, cudaStream_t stream = 0);











































































extern __declspec(__host__) cudaError_t __stdcall cudaWaitExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t *extSemArray, const struct cudaExternalSemaphoreWaitParams *paramsArray, unsigned int numExtSems, cudaStream_t stream = 0);






















extern __declspec(__host__) cudaError_t __stdcall cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem);

 
































































extern __declspec(__host__) cudaError_t __stdcall cudaLaunchKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream);





























































extern __declspec(__host__) cudaError_t __stdcall cudaLaunchKernelExC(const cudaLaunchConfig_t *config, const void *func, void **args);
























































extern __declspec(__host__) cudaError_t __stdcall cudaLaunchCooperativeKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream);




































































































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaLaunchCooperativeKernelMultiDevice(struct cudaLaunchParams *launchParamsList, unsigned int numDevices, unsigned int flags  = 0);












































extern __declspec(__host__) cudaError_t __stdcall cudaFuncSetCacheConfig(const void *func, enum cudaFuncCache cacheConfig);






















































extern __declspec(__host__) cudaError_t __stdcall cudaFuncSetSharedMemConfig(const void *func, enum cudaSharedMemConfig config);
































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func);




































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaFuncSetAttribute(const void *func, enum cudaFuncAttribute attr, int value);























extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaSetDoubleForDevice(double *d);























extern __declspec(deprecated)  __declspec(__host__) cudaError_t __stdcall cudaSetDoubleForHost(double *d);

































































extern __declspec(__host__) cudaError_t __stdcall cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void *userData);

 






















































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize);




























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaOccupancyAvailableDynamicSMemPerBlock(size_t *dynamicSmemSize, const void *func, int numBlocks, int blockSize);












































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize, unsigned int flags);


































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaOccupancyMaxPotentialClusterSize(int *clusterSize, const void *func, const cudaLaunchConfig_t *launchConfig);






































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaOccupancyMaxActiveClusters(int *numClusters, const void *func, const cudaLaunchConfig_t *launchConfig);
 






















































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMallocManaged(void **devPtr, size_t size, unsigned int flags = 0x01);


#line 4990 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"





























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMalloc(void **devPtr, size_t size);
































extern __declspec(__host__) cudaError_t __stdcall cudaMallocHost(void **ptr, size_t size);










































extern __declspec(__host__) cudaError_t __stdcall cudaMallocPitch(void **devPtr, size_t *pitch, size_t width, size_t height);



















































extern __declspec(__host__) cudaError_t __stdcall cudaMallocArray(cudaArray_t *array, const struct cudaChannelFormatDesc *desc, size_t width, size_t height = 0, unsigned int flags = 0);





































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaFree(void *devPtr);






















extern __declspec(__host__) cudaError_t __stdcall cudaFreeHost(void *ptr);






















extern __declspec(__host__) cudaError_t __stdcall cudaFreeArray(cudaArray_t array);






















extern __declspec(__host__) cudaError_t __stdcall cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray);

































































extern __declspec(__host__) cudaError_t __stdcall cudaHostAlloc(void **pHost, size_t size, unsigned int flags);
































































































extern __declspec(__host__) cudaError_t __stdcall cudaHostRegister(void *ptr, size_t size, unsigned int flags);






















extern __declspec(__host__) cudaError_t __stdcall cudaHostUnregister(void *ptr);












































extern __declspec(__host__) cudaError_t __stdcall cudaHostGetDevicePointer(void **pDevice, void *pHost, unsigned int flags);





















extern __declspec(__host__) cudaError_t __stdcall cudaHostGetFlags(unsigned int *pFlags, void *pHost);






































extern __declspec(__host__) cudaError_t __stdcall cudaMalloc3D(struct cudaPitchedPtr* pitchedDevPtr, struct cudaExtent extent);
















































































































































extern __declspec(__host__) cudaError_t __stdcall cudaMalloc3DArray(cudaArray_t *array, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int flags = 0);
















































































































































extern __declspec(__host__) cudaError_t __stdcall cudaMallocMipmappedArray(cudaMipmappedArray_t *mipmappedArray, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int numLevels, unsigned int flags = 0);
































extern __declspec(__host__) cudaError_t __stdcall cudaGetMipmappedArrayLevel(cudaArray_t *levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level);








































































































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy3D(const struct cudaMemcpy3DParms *p);































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy3DPeer(const struct cudaMemcpy3DPeerParms *p);





















































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream = 0);


























extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy3DPeerAsync(const struct cudaMemcpy3DPeerParms *p, cudaStream_t stream = 0);

































extern __declspec(__host__) cudaError_t __stdcall cudaMemGetInfo(size_t *free, size_t *total);

























extern __declspec(__host__) cudaError_t __stdcall cudaArrayGetInfo(struct cudaChannelFormatDesc *desc, struct cudaExtent *extent, unsigned int *flags, cudaArray_t array);




























extern __declspec(__host__) cudaError_t __stdcall cudaArrayGetPlane(cudaArray_t *pPlaneArray, cudaArray_t hArray, unsigned int planeIdx);






















extern __declspec(__host__) cudaError_t __stdcall cudaArrayGetMemoryRequirements(struct cudaArrayMemoryRequirements  *memoryRequirements, cudaArray_t array, int device);























extern __declspec(__host__) cudaError_t __stdcall cudaMipmappedArrayGetMemoryRequirements(struct cudaArrayMemoryRequirements *memoryRequirements, cudaMipmappedArray_t mipmap, int device);



























 extern __declspec(__host__) cudaError_t __stdcall cudaArrayGetSparseProperties(struct cudaArraySparseProperties *sparseProperties, cudaArray_t array);
#line 6317 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"




























 extern __declspec(__host__) cudaError_t __stdcall cudaMipmappedArrayGetSparseProperties(struct cudaArraySparseProperties *sparseProperties, cudaMipmappedArray_t mipmap);
#line 6347 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"











































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind);


































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyPeer(void *dst, int dstDevice, const void *src, int srcDevice, size_t count);
















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);

















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);

















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DFromArray(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind);














































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);










































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyToSymbol(const void *symbol, const void *src, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyHostToDevice);










































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromSymbol(void *dst, const void *symbol, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost);
























































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);


































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyPeerAsync(void *dst, int dstDevice, const void *src, int srcDevice, size_t count, cudaStream_t stream = 0);






























































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);

























































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
























































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DFromArrayAsync(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);


















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyToSymbolAsync(const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);


















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromSymbolAsync(void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);




























extern __declspec(__host__) cudaError_t __stdcall cudaMemset(void *devPtr, int value, size_t count);

































extern __declspec(__host__) cudaError_t __stdcall cudaMemset2D(void *devPtr, size_t pitch, int value, size_t width, size_t height);













































extern __declspec(__host__) cudaError_t __stdcall cudaMemset3D(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent);



































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream = 0);








































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0);




















































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream = 0);



























extern __declspec(__host__) cudaError_t __stdcall cudaGetSymbolAddress(void **devPtr, const void *symbol);


























extern __declspec(__host__) cudaError_t __stdcall cudaGetSymbolSize(size_t *size, const void *symbol);





































































extern __declspec(__host__) cudaError_t __stdcall cudaMemPrefetchAsync(const void *devPtr, size_t count, int dstDevice, cudaStream_t stream = 0);



















































































































extern __declspec(__host__) cudaError_t __stdcall cudaMemAdvise(const void *devPtr, size_t count, enum cudaMemoryAdvise advice, int device);


























































extern __declspec(__host__) cudaError_t __stdcall cudaMemRangeGetAttribute(void *data, size_t dataSize, enum cudaMemRangeAttribute attribute, const void *devPtr, size_t count);






































extern __declspec(__host__) cudaError_t __stdcall cudaMemRangeGetAttributes(void **data, size_t *dataSizes, enum cudaMemRangeAttribute *attributes, size_t numAttributes, const void *devPtr, size_t count);

 

























































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind);









































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromArray(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind);










































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);


















































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);

















































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromArrayAsync(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);

 


































































extern __declspec(__host__) cudaError_t __stdcall cudaMallocAsync(void **devPtr, size_t size, cudaStream_t hStream);

























extern __declspec(__host__) cudaError_t __stdcall cudaFreeAsync(void *devPtr, cudaStream_t hStream);
























extern __declspec(__host__) cudaError_t __stdcall cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep);











































extern __declspec(__host__) cudaError_t __stdcall cudaMemPoolSetAttribute(cudaMemPool_t memPool, enum cudaMemPoolAttr attr, void *value );















































extern __declspec(__host__) cudaError_t __stdcall cudaMemPoolGetAttribute(cudaMemPool_t memPool, enum cudaMemPoolAttr attr, void *value );














extern __declspec(__host__) cudaError_t __stdcall cudaMemPoolSetAccess(cudaMemPool_t memPool, const struct cudaMemAccessDesc *descList, size_t count);












extern __declspec(__host__) cudaError_t __stdcall cudaMemPoolGetAccess(enum cudaMemAccessFlags *flags, cudaMemPool_t memPool, struct cudaMemLocation *location);



















extern __declspec(__host__) cudaError_t __stdcall cudaMemPoolCreate(cudaMemPool_t *memPool, const struct cudaMemPoolProps *poolProps);





















extern __declspec(__host__) cudaError_t __stdcall cudaMemPoolDestroy(cudaMemPool_t memPool);



































extern __declspec(__host__) cudaError_t __stdcall cudaMallocFromPoolAsync(void **ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream);
























extern __declspec(__host__) cudaError_t __stdcall cudaMemPoolExportToShareableHandle(
    void                            *shareableHandle,
    cudaMemPool_t                    memPool,
    enum cudaMemAllocationHandleType handleType,
    unsigned int                     flags);






















extern __declspec(__host__) cudaError_t __stdcall cudaMemPoolImportFromShareableHandle(
    cudaMemPool_t                   *memPool,
    void                            *shareableHandle,
    enum cudaMemAllocationHandleType handleType,
    unsigned int                     flags);


















extern __declspec(__host__) cudaError_t __stdcall cudaMemPoolExportPointer(struct cudaMemPoolPtrExportData *exportData, void *ptr);




























extern __declspec(__host__) cudaError_t __stdcall cudaMemPoolImportPointer(void **ptr, cudaMemPool_t memPool, struct cudaMemPoolPtrExportData *exportData);

 






















































































































































extern __declspec(__host__) cudaError_t __stdcall cudaPointerGetAttributes(struct cudaPointerAttributes *attributes, const void *ptr);

 






































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceCanAccessPeer(int *canAccessPeer, int device, int peerDevice);









































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags);





















extern __declspec(__host__) cudaError_t __stdcall cudaDeviceDisablePeerAccess(int peerDevice);

 





























































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource);


































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags);






































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsMapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);


































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsResourceGetMappedPointer(void **devPtr, size_t *size, cudaGraphicsResource_t resource);





































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsSubResourceGetMappedArray(cudaArray_t *array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel);




























extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t *mipmappedArray, cudaGraphicsResource_t resource);

 
































extern __declspec(__host__) cudaError_t __stdcall cudaGetChannelDesc(struct cudaChannelFormatDesc *desc, cudaArray_const_t array);





























extern __declspec(__host__) struct cudaChannelFormatDesc __stdcall cudaCreateChannelDesc(int x, int y, int z, int w, enum cudaChannelFormatKind f);































































































































































































































extern __declspec(__host__) cudaError_t __stdcall cudaCreateTextureObject(cudaTextureObject_t *pTexObject, const struct cudaResourceDesc *pResDesc, const struct cudaTextureDesc *pTexDesc, const struct cudaResourceViewDesc *pResViewDesc);



















extern __declspec(__host__) cudaError_t __stdcall cudaDestroyTextureObject(cudaTextureObject_t texObject);



















extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaTextureObject_t texObject);



















extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureObjectTextureDesc(struct cudaTextureDesc *pTexDesc, cudaTextureObject_t texObject);




















extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureObjectResourceViewDesc(struct cudaResourceViewDesc *pResViewDesc, cudaTextureObject_t texObject);

 










































extern __declspec(__host__) cudaError_t __stdcall cudaCreateSurfaceObject(cudaSurfaceObject_t *pSurfObject, const struct cudaResourceDesc *pResDesc);



















extern __declspec(__host__) cudaError_t __stdcall cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject);


















extern __declspec(__host__) cudaError_t __stdcall cudaGetSurfaceObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaSurfaceObject_t surfObject);

 































extern __declspec(__host__) cudaError_t __stdcall cudaDriverGetVersion(int *driverVersion);




























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaRuntimeGetVersion(int *runtimeVersion);

 












































extern __declspec(__host__) cudaError_t __stdcall cudaGraphCreate(cudaGraph_t *pGraph, unsigned int flags);
































































































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddKernelNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaKernelNodeParams *pNodeParams);
































extern __declspec(__host__) cudaError_t __stdcall cudaGraphKernelNodeGetParams(cudaGraphNode_t node, struct cudaKernelNodeParams *pNodeParams);
























extern __declspec(__host__) cudaError_t __stdcall cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const struct cudaKernelNodeParams *pNodeParams);



















extern __declspec(__host__) cudaError_t __stdcall cudaGraphKernelNodeCopyAttributes(
        cudaGraphNode_t hSrc,
        cudaGraphNode_t hDst);




















extern __declspec(__host__) cudaError_t __stdcall cudaGraphKernelNodeGetAttribute(
    cudaGraphNode_t hNode,
    cudaLaunchAttributeID attr,
    cudaLaunchAttributeValue *value_out);




















extern __declspec(__host__) cudaError_t __stdcall cudaGraphKernelNodeSetAttribute(
    cudaGraphNode_t hNode,
    cudaLaunchAttributeID attr,
    const cudaLaunchAttributeValue *value);














































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddMemcpyNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaMemcpy3DParms *pCopyParams);


























































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddMemcpyNodeToSymbol(
    cudaGraphNode_t *pGraphNode,
    cudaGraph_t graph,
    const cudaGraphNode_t *pDependencies,
    size_t numDependencies,
    const void* symbol,
    const void* src,
    size_t count,
    size_t offset,
    enum cudaMemcpyKind kind);
#line 9761 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"


























































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddMemcpyNodeFromSymbol(
    cudaGraphNode_t* pGraphNode,
    cudaGraph_t graph,
    const cudaGraphNode_t* pDependencies,
    size_t numDependencies,
    void* dst,
    const void* symbol,
    size_t count,
    size_t offset,
    enum cudaMemcpyKind kind);
#line 9830 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"

























































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddMemcpyNode1D(
    cudaGraphNode_t *pGraphNode,
    cudaGraph_t graph,
    const cudaGraphNode_t *pDependencies,
    size_t numDependencies,
    void* dst,
    const void* src,
    size_t count,
    enum cudaMemcpyKind kind);
#line 9897 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"






















extern __declspec(__host__) cudaError_t __stdcall cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, struct cudaMemcpy3DParms *pNodeParams);

























extern __declspec(__host__) cudaError_t __stdcall cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const struct cudaMemcpy3DParms *pNodeParams);






































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphMemcpyNodeSetParamsToSymbol(
    cudaGraphNode_t node,
    const void* symbol,
    const void* src,
    size_t count,
    size_t offset,
    enum cudaMemcpyKind kind);
#line 9992 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"






































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphMemcpyNodeSetParamsFromSymbol(
    cudaGraphNode_t node,
    void* dst,
    const void* symbol,
    size_t count,
    size_t offset,
    enum cudaMemcpyKind kind);
#line 10038 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"






































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphMemcpyNodeSetParams1D(
    cudaGraphNode_t node,
    void* dst,
    const void* src,
    size_t count,
    enum cudaMemcpyKind kind);
#line 10083 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"








































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddMemsetNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaMemsetParams *pMemsetParams);






















extern __declspec(__host__) cudaError_t __stdcall cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, struct cudaMemsetParams *pNodeParams);






















extern __declspec(__host__) cudaError_t __stdcall cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const struct cudaMemsetParams *pNodeParams);








































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddHostNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaHostNodeParams *pNodeParams);






















extern __declspec(__host__) cudaError_t __stdcall cudaGraphHostNodeGetParams(cudaGraphNode_t node, struct cudaHostNodeParams *pNodeParams);






















extern __declspec(__host__) cudaError_t __stdcall cudaGraphHostNodeSetParams(cudaGraphNode_t node, const struct cudaHostNodeParams *pNodeParams);







































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddChildGraphNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, cudaGraph_t childGraph);


























extern __declspec(__host__) cudaError_t __stdcall cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t *pGraph);




































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddEmptyNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies);










































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddEventRecordNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, cudaEvent_t event);
#line 10405 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"

























 extern __declspec(__host__) cudaError_t __stdcall cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t *event_out);
#line 10432 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"

























 extern __declspec(__host__) cudaError_t __stdcall cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event);
#line 10459 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"












































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddEventWaitNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, cudaEvent_t event);
#line 10505 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"

























 extern __declspec(__host__) cudaError_t __stdcall cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t *event_out);
#line 10532 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"

























 extern __declspec(__host__) cudaError_t __stdcall cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event);
#line 10559 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"















































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaExternalSemaphoreSignalNodeParams *nodeParams);
#line 10608 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"































extern __declspec(__host__) cudaError_t __stdcall cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, struct cudaExternalSemaphoreSignalNodeParams *params_out);
#line 10641 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"

























extern __declspec(__host__) cudaError_t __stdcall cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const struct cudaExternalSemaphoreSignalNodeParams *nodeParams);
#line 10668 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"















































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaExternalSemaphoreWaitNodeParams *nodeParams);
#line 10717 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"































extern __declspec(__host__) cudaError_t __stdcall cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, struct cudaExternalSemaphoreWaitNodeParams *params_out);
#line 10750 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"

























extern __declspec(__host__) cudaError_t __stdcall cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const struct cudaExternalSemaphoreWaitNodeParams *nodeParams);
#line 10777 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"











































































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddMemAllocNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, struct cudaMemAllocNodeParams *nodeParams);
#line 10854 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"

























extern __declspec(__host__) cudaError_t __stdcall cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, struct cudaMemAllocNodeParams *params_out);
#line 10881 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"


























































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddMemFreeNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, void *dptr);
#line 10941 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"






















extern __declspec(__host__) cudaError_t __stdcall cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void *dptr_out);
#line 10965 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"


























extern __declspec(__host__) cudaError_t __stdcall cudaDeviceGraphMemTrim(int device);
#line 10993 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"



































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceGetGraphMemAttribute(int device, enum cudaGraphMemAttributeType attr, void* value);
#line 11030 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetGraphMemAttribute(int device, enum cudaGraphMemAttributeType attr, void* value);
#line 11064 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"


























extern __declspec(__host__) cudaError_t __stdcall cudaGraphClone(cudaGraph_t *pGraphClone, cudaGraph_t originalGraph);



























extern __declspec(__host__) cudaError_t __stdcall cudaGraphNodeFindInClone(cudaGraphNode_t *pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph);






























extern __declspec(__host__) cudaError_t __stdcall cudaGraphNodeGetType(cudaGraphNode_t node, enum cudaGraphNodeType *pType);






























extern __declspec(__host__) cudaError_t __stdcall cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t *nodes, size_t *numNodes);






























extern __declspec(__host__) cudaError_t __stdcall cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t *pRootNodes, size_t *pNumRootNodes);

































extern __declspec(__host__) cudaError_t __stdcall cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t *from, cudaGraphNode_t *to, size_t *numEdges);






























extern __declspec(__host__) cudaError_t __stdcall cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t *pDependencies, size_t *pNumDependencies);































extern __declspec(__host__) cudaError_t __stdcall cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t *pDependentNodes, size_t *pNumDependentNodes);






























extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t *from, const cudaGraphNode_t *to, size_t numDependencies);






























extern __declspec(__host__) cudaError_t __stdcall cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t *from, const cudaGraphNode_t *to, size_t numDependencies);





























extern __declspec(__host__) cudaError_t __stdcall cudaGraphDestroyNode(cudaGraphNode_t node);





























































extern __declspec(__host__) cudaError_t __stdcall cudaGraphInstantiate(cudaGraphExec_t *pGraphExec, cudaGraph_t graph, unsigned long long flags = 0);






































































extern __declspec(__host__) cudaError_t __stdcall cudaGraphInstantiateWithFlags(cudaGraphExec_t *pGraphExec, cudaGraph_t graph, unsigned long long flags = 0);
#line 11535 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"







































































































extern __declspec(__host__) cudaError_t __stdcall cudaGraphInstantiateWithParams(cudaGraphExec_t *pGraphExec, cudaGraph_t graph, cudaGraphInstantiateParams *instantiateParams);
























extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecGetFlags(cudaGraphExec_t graphExec, unsigned long long *flags);


















































extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaKernelNodeParams *pNodeParams);

















































extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaMemcpy3DParms *pNodeParams);






















































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecMemcpyNodeSetParamsToSymbol(
    cudaGraphExec_t hGraphExec,
    cudaGraphNode_t node,
    const void* symbol,
    const void* src,
    size_t count,
    size_t offset,
    enum cudaMemcpyKind kind);
#line 11828 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"






















































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecMemcpyNodeSetParamsFromSymbol(
    cudaGraphExec_t hGraphExec,
    cudaGraphNode_t node,
    void* dst,
    const void* symbol,
    size_t count,
    size_t offset,
    enum cudaMemcpyKind kind);
#line 11891 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"




















































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecMemcpyNodeSetParams1D(
    cudaGraphExec_t hGraphExec,
    cudaGraphNode_t node,
    void* dst,
    const void* src,
    size_t count,
    enum cudaMemcpyKind kind);
#line 11951 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"














































extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaMemsetParams *pNodeParams);






































extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaHostNodeParams *pNodeParams);













































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph);
#line 12084 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"










































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event);
#line 12128 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"










































 extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event);
#line 12172 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"













































extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const struct cudaExternalSemaphoreSignalNodeParams *nodeParams);
#line 12219 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"













































extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const struct cudaExternalSemaphoreWaitNodeParams *nodeParams);
#line 12266 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"






































extern __declspec(__host__) cudaError_t __stdcall cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int isEnabled);
#line 12306 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
































extern __declspec(__host__) cudaError_t __stdcall cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int *isEnabled);
#line 12340 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"



















































































extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo *resultInfo);
























 extern __declspec(__host__) cudaError_t __stdcall cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream);
#line 12450 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"





























extern __declspec(__host__) cudaError_t __stdcall cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream);






















extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecDestroy(cudaGraphExec_t graphExec);




















extern __declspec(__host__) cudaError_t __stdcall cudaGraphDestroy(cudaGraph_t graph);


















extern __declspec(__host__) cudaError_t __stdcall cudaGraphDebugDotPrint(cudaGraph_t graph, const char *path, unsigned int flags);



































extern __declspec(__host__) cudaError_t __stdcall cudaUserObjectCreate(cudaUserObject_t *object_out, void *ptr, cudaHostFn_t destroy, unsigned int initialRefcount, unsigned int flags);























extern __declspec(__host__) cudaError_t __stdcall cudaUserObjectRetain(cudaUserObject_t object, unsigned int count = 1);



























extern __declspec(__host__) cudaError_t __stdcall cudaUserObjectRelease(cudaUserObject_t object, unsigned int count = 1);



























extern __declspec(__host__) cudaError_t __stdcall cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count = 1, unsigned int flags = 0);
























extern __declspec(__host__) cudaError_t __stdcall cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count = 1);

 











































































extern __declspec(__host__) cudaError_t __stdcall cudaGetDriverEntryPoint(const char *symbol, void **funcPtr, unsigned long long flags, enum cudaDriverEntryPointQueryResult *driverStatus = 0);


#line 12765 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"

 


extern __declspec(__host__) cudaError_t __stdcall cudaGetExportTable(const void **ppExportTable, const cudaUUID_t *pExportTableId);






































































































































































 











extern __declspec(__host__) cudaError_t cudaGetFuncBySymbol(cudaFunction_t* functionPtr, const void* symbolPtr);















extern __declspec(__host__) cudaError_t __stdcall cudaGetKernel(cudaKernel_t *kernelPtr, const void *entryFuncAddr);

 







































































































































#line 13103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"



















#line 13123 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"


}

#line 13128 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"


#line 13131 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"







#line 13139 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"

#line 13141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\channel_descriptor.h"























































template<class T> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc(void)
{
  return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf1(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf2(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf4(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char>(void)
{
  int e = (int)sizeof(char) * 8;



#line 157 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\channel_descriptor.h"
  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
#line 159 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\channel_descriptor.h"
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<signed char>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned char>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char1>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uchar1>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char2>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uchar2>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char4>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uchar4>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned short>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short1>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ushort1>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short2>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ushort2>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short4>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ushort4>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned int>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int1>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uint1>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int2>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uint2>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int4>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uint4>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}



template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned long>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long1>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ulong1>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long2>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ulong2>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long4>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ulong4>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

#line 388 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\channel_descriptor.h"

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float1>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float2>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float4>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescNV12(void)
{
    int e = (int)sizeof(char) * 8;

    return cudaCreateChannelDesc(e, e, e, 0, cudaChannelFormatKindNV12);
}

template<cudaChannelFormatKind> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc(void)
{
    return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindSignedNormalized8X1>(void)
{
    return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindSignedNormalized8X1);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindSignedNormalized8X2>(void)
{
    return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindSignedNormalized8X2);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindSignedNormalized8X4>(void)
{
    return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindSignedNormalized8X4);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedNormalized8X1>(void)
{
    return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindUnsignedNormalized8X1);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedNormalized8X2>(void)
{
    return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindUnsignedNormalized8X2);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedNormalized8X4>(void)
{
    return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedNormalized8X4);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindSignedNormalized16X1>(void)
{
    return cudaCreateChannelDesc(16, 0, 0, 0, cudaChannelFormatKindSignedNormalized16X1);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindSignedNormalized16X2>(void)
{
    return cudaCreateChannelDesc(16, 16, 0, 0, cudaChannelFormatKindSignedNormalized16X2);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindSignedNormalized16X4>(void)
{
    return cudaCreateChannelDesc(16, 16, 16, 16, cudaChannelFormatKindSignedNormalized16X4);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedNormalized16X1>(void)
{
    return cudaCreateChannelDesc(16, 0, 0, 0, cudaChannelFormatKindUnsignedNormalized16X1);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedNormalized16X2>(void)
{
    return cudaCreateChannelDesc(16, 16, 0, 0, cudaChannelFormatKindUnsignedNormalized16X2);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedNormalized16X4>(void)
{
    return cudaCreateChannelDesc(16, 16, 16, 16, cudaChannelFormatKindUnsignedNormalized16X4);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindNV12>(void)
{
    return cudaCreateChannelDesc(8, 8, 8, 0, cudaChannelFormatKindNV12);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedBlockCompressed1>(void)
{
    return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed1);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedBlockCompressed1SRGB>(void)
{
    return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed1SRGB);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedBlockCompressed2>(void)
{
    return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed2);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedBlockCompressed2SRGB>(void)
{
    return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed2SRGB);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedBlockCompressed3>(void)
{
    return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed3);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedBlockCompressed3SRGB>(void)
{
    return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed3SRGB);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedBlockCompressed4>(void)
{
    return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindUnsignedBlockCompressed4);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindSignedBlockCompressed4>(void)
{
    return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindSignedBlockCompressed4);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedBlockCompressed5>(void)
{
    return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindUnsignedBlockCompressed5);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindSignedBlockCompressed5>(void)
{
    return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindSignedBlockCompressed5);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedBlockCompressed6H>(void)
{
    return cudaCreateChannelDesc(16, 16, 16, 0, cudaChannelFormatKindUnsignedBlockCompressed6H);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindSignedBlockCompressed6H>(void)
{
    return cudaCreateChannelDesc(16, 16, 16, 0, cudaChannelFormatKindSignedBlockCompressed6H);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedBlockCompressed7>(void)
{
    return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed7);
}


template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<cudaChannelFormatKindUnsignedBlockCompressed7SRGB>(void)
{
    return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed7SRGB);
}

#line 584 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\channel_descriptor.h"


 

#line 589 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\channel_descriptor.h"
#line 96 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 13141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
#line 97 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_functions.h"




















































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"











































































































#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
















































































































































































#line 178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 54 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"







































































































































































































#line 259 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"




#line 264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"
#line 55 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_functions.h"























static __inline __declspec(__host__) struct cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
{
  struct cudaPitchedPtr s;

  s.ptr   = d;
  s.pitch = p;
  s.xsize = xsz;
  s.ysize = ysz;

  return s;
}
















static __inline __declspec(__host__) struct cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
{
  struct cudaPos p;

  p.x = x;
  p.y = y;
  p.z = z;

  return p;
}
















static __inline __declspec(__host__) struct cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
{
  struct cudaExtent e;

  e.width  = w;
  e.height = h;
  e.depth  = d;

  return e;
}

 

#line 146 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_functions.h"
#line 98 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"

#line 100 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"







































































































































































































#line 259 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"




#line 264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/host_defines.h"
#line 101 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"





#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_functions.h"


























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 13141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_functions.h"



#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_functions.h"

#line 66 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_functions.h"







static __inline __declspec(__host__) __declspec(__device__) char1 make_char1(signed char x);

static __inline __declspec(__host__) __declspec(__device__) uchar1 make_uchar1(unsigned char x);

static __inline __declspec(__host__) __declspec(__device__) char2 make_char2(signed char x, signed char y);

static __inline __declspec(__host__) __declspec(__device__) uchar2 make_uchar2(unsigned char x, unsigned char y);

static __inline __declspec(__host__) __declspec(__device__) char3 make_char3(signed char x, signed char y, signed char z);

static __inline __declspec(__host__) __declspec(__device__) uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z);

static __inline __declspec(__host__) __declspec(__device__) char4 make_char4(signed char x, signed char y, signed char z, signed char w);

static __inline __declspec(__host__) __declspec(__device__) uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w);

static __inline __declspec(__host__) __declspec(__device__) short1 make_short1(short x);

static __inline __declspec(__host__) __declspec(__device__) ushort1 make_ushort1(unsigned short x);

static __inline __declspec(__host__) __declspec(__device__) short2 make_short2(short x, short y);

static __inline __declspec(__host__) __declspec(__device__) ushort2 make_ushort2(unsigned short x, unsigned short y);

static __inline __declspec(__host__) __declspec(__device__) short3 make_short3(short x,short y, short z);

static __inline __declspec(__host__) __declspec(__device__) ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z);

static __inline __declspec(__host__) __declspec(__device__) short4 make_short4(short x, short y, short z, short w);

static __inline __declspec(__host__) __declspec(__device__) ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w);

static __inline __declspec(__host__) __declspec(__device__) int1 make_int1(int x);

static __inline __declspec(__host__) __declspec(__device__) uint1 make_uint1(unsigned int x);

static __inline __declspec(__host__) __declspec(__device__) int2 make_int2(int x, int y);

static __inline __declspec(__host__) __declspec(__device__) uint2 make_uint2(unsigned int x, unsigned int y);

static __inline __declspec(__host__) __declspec(__device__) int3 make_int3(int x, int y, int z);

static __inline __declspec(__host__) __declspec(__device__) uint3 make_uint3(unsigned int x, unsigned int y, unsigned int z);

static __inline __declspec(__host__) __declspec(__device__) int4 make_int4(int x, int y, int z, int w);

static __inline __declspec(__host__) __declspec(__device__) uint4 make_uint4(unsigned int x, unsigned int y, unsigned int z, unsigned int w);

static __inline __declspec(__host__) __declspec(__device__) long1 make_long1(long int x);

static __inline __declspec(__host__) __declspec(__device__) ulong1 make_ulong1(unsigned long int x);

static __inline __declspec(__host__) __declspec(__device__) long2 make_long2(long int x, long int y);

static __inline __declspec(__host__) __declspec(__device__) ulong2 make_ulong2(unsigned long int x, unsigned long int y);

static __inline __declspec(__host__) __declspec(__device__) long3 make_long3(long int x, long int y, long int z);

static __inline __declspec(__host__) __declspec(__device__) ulong3 make_ulong3(unsigned long int x, unsigned long int y, unsigned long int z);

static __inline __declspec(__host__) __declspec(__device__) long4 make_long4(long int x, long int y, long int z, long int w);

static __inline __declspec(__host__) __declspec(__device__) ulong4 make_ulong4(unsigned long int x, unsigned long int y, unsigned long int z, unsigned long int w);

static __inline __declspec(__host__) __declspec(__device__) float1 make_float1(float x);

static __inline __declspec(__host__) __declspec(__device__) float2 make_float2(float x, float y);

static __inline __declspec(__host__) __declspec(__device__) float3 make_float3(float x, float y, float z);

static __inline __declspec(__host__) __declspec(__device__) float4 make_float4(float x, float y, float z, float w);

static __inline __declspec(__host__) __declspec(__device__) longlong1 make_longlong1(long long int x);

static __inline __declspec(__host__) __declspec(__device__) ulonglong1 make_ulonglong1(unsigned long long int x);

static __inline __declspec(__host__) __declspec(__device__) longlong2 make_longlong2(long long int x, long long int y);

static __inline __declspec(__host__) __declspec(__device__) ulonglong2 make_ulonglong2(unsigned long long int x, unsigned long long int y);

static __inline __declspec(__host__) __declspec(__device__) longlong3 make_longlong3(long long int x, long long int y, long long int z);

static __inline __declspec(__host__) __declspec(__device__) ulonglong3 make_ulonglong3(unsigned long long int x, unsigned long long int y, unsigned long long int z);

static __inline __declspec(__host__) __declspec(__device__) longlong4 make_longlong4(long long int x, long long int y, long long int z, long long int w);

static __inline __declspec(__host__) __declspec(__device__) ulonglong4 make_ulonglong4(unsigned long long int x, unsigned long long int y, unsigned long long int z, unsigned long long int w);

static __inline __declspec(__host__) __declspec(__device__) double1 make_double1(double x);

static __inline __declspec(__host__) __declspec(__device__) double2 make_double2(double x, double y);

static __inline __declspec(__host__) __declspec(__device__) double3 make_double3(double x, double y, double z);

static __inline __declspec(__host__) __declspec(__device__) double4 make_double4(double x, double y, double z, double w);




#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_functions.hpp"


























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 13141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_functions.hpp"



#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_functions.hpp"

#line 66 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_functions.hpp"







static __inline __declspec(__host__) __declspec(__device__) char1 make_char1(signed char x)
{
  char1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar1 make_uchar1(unsigned char x)
{
  uchar1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) char2 make_char2(signed char x, signed char y)
{
  char2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar2 make_uchar2(unsigned char x, unsigned char y)
{
  uchar2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) char3 make_char3(signed char x, signed char y, signed char z)
{
  char3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z)
{
  uchar3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) char4 make_char4(signed char x, signed char y, signed char z, signed char w)
{
  char4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w)
{
  uchar4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short1 make_short1(short x)
{
  short1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort1 make_ushort1(unsigned short x)
{
  ushort1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short2 make_short2(short x, short y)
{
  short2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort2 make_ushort2(unsigned short x, unsigned short y)
{
  ushort2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short3 make_short3(short x,short y, short z)
{ 
  short3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z)
{
  ushort3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short4 make_short4(short x, short y, short z, short w)
{
  short4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w)
{
  ushort4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int1 make_int1(int x)
{
  int1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint1 make_uint1(unsigned int x)
{
  uint1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int2 make_int2(int x, int y)
{
  int2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint2 make_uint2(unsigned int x, unsigned int y)
{
  uint2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int3 make_int3(int x, int y, int z)
{
  int3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint3 make_uint3(unsigned int x, unsigned int y, unsigned int z)
{
  uint3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int4 make_int4(int x, int y, int z, int w)
{
  int4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint4 make_uint4(unsigned int x, unsigned int y, unsigned int z, unsigned int w)
{
  uint4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long1 make_long1(long int x)
{
  long1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong1 make_ulong1(unsigned long int x)
{
  ulong1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long2 make_long2(long int x, long int y)
{
  long2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong2 make_ulong2(unsigned long int x, unsigned long int y)
{
  ulong2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long3 make_long3(long int x, long int y, long int z)
{
  long3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong3 make_ulong3(unsigned long int x, unsigned long int y, unsigned long int z)
{
  ulong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long4 make_long4(long int x, long int y, long int z, long int w)
{
  long4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong4 make_ulong4(unsigned long int x, unsigned long int y, unsigned long int z, unsigned long int w)
{
  ulong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float1 make_float1(float x)
{
  float1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float2 make_float2(float x, float y)
{
  float2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float3 make_float3(float x, float y, float z)
{
  float3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float4 make_float4(float x, float y, float z, float w)
{
  float4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong1 make_longlong1(long long int x)
{
  longlong1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong1 make_ulonglong1(unsigned long long int x)
{
  ulonglong1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong2 make_longlong2(long long int x, long long int y)
{
  longlong2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong2 make_ulonglong2(unsigned long long int x, unsigned long long int y)
{
  ulonglong2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong3 make_longlong3(long long int x, long long int y, long long int z)
{
  longlong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong3 make_ulonglong3(unsigned long long int x, unsigned long long int y, unsigned long long int z)
{
  ulonglong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong4 make_longlong4(long long int x, long long int y, long long int z, long long int w)
{
  longlong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong4 make_ulonglong4(unsigned long long int x, unsigned long long int y, unsigned long long int z, unsigned long long int w)
{
  ulonglong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double1 make_double1(double x)
{
  double1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double2 make_double2(double x, double y)
{
  double2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double3 make_double3(double x, double y, double z)
{
  double3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double4 make_double4(double x, double y, double z, double w)
{
  double4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}



#line 316 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_functions.hpp"

#line 173 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_functions.h"
#line 174 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_functions.h"

#line 176 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_functions.h"
#line 107 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"









#line 117 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/common_functions.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/common_functions.h"












#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"











































































































#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
















































































































































































#line 178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 72 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/common_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"







































































































































































































#line 259 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"




#line 264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"
#line 73 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/common_functions.h"












#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"







#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_memory.h"










#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_memcpy_s.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\errno.h"







#pragma once





#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {




     int* __cdecl _errno(void);
    

     errno_t __cdecl _set_errno(  int _Value);
     errno_t __cdecl _get_errno(  int* _Value);

     unsigned long* __cdecl __doserrno(void);
    

     errno_t __cdecl _set_doserrno(  unsigned long _Value);
     errno_t __cdecl _get_doserrno(  unsigned long * _Value);
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\errno.h"










































    
    
    
    
    
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\errno.h"






    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\errno.h"



} __pragma(pack(pop))

#pragma warning(pop) 
#line 138 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\errno.h"
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_memcpy_s.h"
#line 1 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"







#pragma once



#pragma warning(push)
#pragma warning(disable:   4514 4820 )



__pragma(pack(push, 8)) extern "C" {



[[nodiscard]]  
 void const* __cdecl memchr(
      void const* _Buf,
                                 int         _Val,
                                 size_t      _MaxCount
    );

[[nodiscard]]  
int __cdecl memcmp(
      void const* _Buf1,
      void const* _Buf2,
                         size_t      _Size
    );


 

#line 43 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
void* __cdecl memcpy(
      void* _Dst,
            void const* _Src,
                               size_t      _Size
    );


 void* __cdecl memmove(
      void*       _Dst,
            void const* _Src,
                                   size_t      _Size
    );

 

#line 63 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
void* __cdecl memset(
      void*  _Dst,
                               int    _Val,
                               size_t _Size
    );

[[nodiscard]]  
 char const* __cdecl strchr(
      char const* _Str,
        int         _Val
    );

[[nodiscard]]  
 char const* __cdecl strrchr(
      char const* _Str,
        int         _Ch
    );

[[nodiscard]]    
 char const* __cdecl strstr(
      char const* _Str,
      char const* _SubStr
    );

[[nodiscard]]  

 wchar_t const* __cdecl wcschr(
      wchar_t const* _Str,
        wchar_t        _Ch
    );

[[nodiscard]]  
 wchar_t const* __cdecl wcsrchr(
      wchar_t const* _Str,
        wchar_t        _Ch
    );

[[nodiscard]]    

 wchar_t const* __cdecl wcsstr(
      wchar_t const* _Str,
      wchar_t const* _SubStr
    );



} __pragma(pack(pop))

#line 112 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"

#pragma warning(pop) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_memcpy_s.h"

#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {


    
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_memcpy_s.h"














     
    
    static __inline errno_t __cdecl memcpy_s(
          void*       const _Destination,
                                                              rsize_t     const _DestinationSize,
                                 void const* const _Source,
                                                              rsize_t     const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        if (_Source == 0 || _DestinationSize < _SourceSize)
        {
            memset(_Destination, 0, _DestinationSize);

            { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
            { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

            
            return 22;
        }
        memcpy(_Destination, _Source, _SourceSize);
        return 0;
    }

    
    static __inline errno_t __cdecl memmove_s(
          void*       const _Destination,
                                                              rsize_t     const _DestinationSize,
                                 void const* const _Source,
                                                              rsize_t     const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

        memmove(_Destination, _Source, _SourceSize);
        return 0;
    }

#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_memcpy_s.h"




#pragma warning(pop) 
} __pragma(pack(pop))
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_memory.h"


#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )




__pragma(pack(push, 8)) extern "C" {



 
 int __cdecl _memicmp(
      void const* _Buf1,
      void const* _Buf2,
                             size_t      _Size
    );

 
 int __cdecl _memicmp_l(
      void const* _Buf1,
      void const* _Buf2,
                             size_t      _Size,
                         _locale_t   _Locale
    );





    












#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_memory.h"

    












#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_memory.h"

#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_memory.h"





    
     void* __cdecl memccpy(
          void*       _Dst,
            void const* _Src,
                                   int         _Val,
                                   size_t      _Size
        );

      
     int __cdecl memicmp(
          void const* _Buf1,
          void const* _Buf2,
                                 size_t      _Size
        );

#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_memory.h"





    extern "C++"  
    inline void* __cdecl memchr(
          void*  _Pv,
                              int    _C,
                              size_t _N
        )
    {
        void const* const _Pvc = _Pv;
        return const_cast<void*>(memchr(_Pvc, _C, _N));
    }

#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_memory.h"



} __pragma(pack(pop))

#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_memory.h"

#pragma warning(pop) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"








#pragma once




#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )




__pragma(pack(push, 8)) extern "C" {










    
     errno_t __cdecl wcscat_s(
          wchar_t* _Destination,
          rsize_t _SizeInWords,
          wchar_t const* _Source
        );

    
     errno_t __cdecl wcscpy_s(
          wchar_t* _Destination,
          rsize_t _SizeInWords,
          wchar_t const* _Source
        );

    
     errno_t __cdecl wcsncat_s(
          wchar_t*       _Destination,
                                     rsize_t        _SizeInWords,
               wchar_t const* _Source,
                                     rsize_t        _MaxCount
        );

    
     errno_t __cdecl wcsncpy_s(
          wchar_t*       _Destination,
                                  rsize_t        _SizeInWords,
            wchar_t const* _Source,
                                  rsize_t        _MaxCount
        );

     
     wchar_t* __cdecl wcstok_s(
                          wchar_t*       _String,
                                 wchar_t const* _Delimiter,
            wchar_t**      _Context
        );

#line 69 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"











#line 81 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

 
 __declspec(allocator) wchar_t* __cdecl _wcsdup(
      wchar_t const* _String
    );



#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"



extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscat_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source) throw() { return wcscat_s(_Destination, _Size, _Source); } }
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"


      wchar_t* __cdecl wcscat( wchar_t *_Destination,  wchar_t const* _Source);
#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
#line 106 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

 
 int __cdecl wcscmp(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscpy_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source) throw() { return wcscpy_s(_Destination, _Size, _Source); } }
#line 118 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl wcscpy( wchar_t *_Destination,  wchar_t const* _Source);
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

 
 size_t __cdecl wcscspn(
      wchar_t const* _String,
      wchar_t const* _Control
    );

 
 size_t __cdecl wcslen(
      wchar_t const* _String
    );

 

#line 141 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

#line 145 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
 size_t __cdecl wcsnlen(
      wchar_t const* _Source,
                            size_t         _MaxCount
    );



     
    
#line 157 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
    
#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
    static __inline size_t __cdecl wcsnlen_s(
          wchar_t const* _Source,
                                size_t         _MaxCount
        )
    {
        return (_Source == 0) ? 0 : wcsnlen(_Source, _MaxCount);
    }

#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncat_s(  wchar_t (&_Destination)[_Size],   wchar_t const* _Source,   size_t _Count) throw() { return wcsncat_s(_Destination, _Size, _Source, _Count); } }
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl wcsncat(  wchar_t *_Destination,   wchar_t const* _Source,   size_t _Count);
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

 
 int __cdecl wcsncmp(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncpy_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source,   size_t _Count) throw() { return wcsncpy_s(_Destination, _Size, _Source, _Count); } }
#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl wcsncpy(    wchar_t *_Destination,   wchar_t const* _Source,   size_t _Count);
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

 
 wchar_t const* __cdecl wcspbrk(
      wchar_t const* _String,
      wchar_t const* _Control
    );

 
 size_t __cdecl wcsspn(
      wchar_t const* _String,
      wchar_t const* _Control
    );

  
 wchar_t* __cdecl wcstok(
                          wchar_t*       _String,
                                 wchar_t const* _Delimiter,
        wchar_t**      _Context
    );



    

#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
        



    #line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

      
    static __inline wchar_t* __cdecl _wcstok(
          wchar_t*       const _String,
                 wchar_t const* const _Delimiter
        )
    {
        return wcstok(_String, _Delimiter, 0);
    }

    

#line 250 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

    
        extern "C++"   __declspec(deprecated("wcstok has been changed to conform with the ISO C standard, " "adding an extra context parameter. To use the legacy Microsoft " "wcstok, define _CRT_NON_CONFORMING_WCSTOK."))
        inline wchar_t* __cdecl wcstok(
              wchar_t*       _String,
                     wchar_t const* _Delimiter
            ) throw()
        {
            return wcstok(_String, _Delimiter, 0);
        }
    #line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

#line 263 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"



 
  
 wchar_t* __cdecl _wcserror(
      int _ErrorNumber
    );


 errno_t __cdecl _wcserror_s(
      wchar_t* _Buffer,
                                  size_t   _SizeInWords,
                                  int      _ErrorNumber
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcserror_s(wchar_t (&_Buffer)[_Size],   int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }
#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

 
 
  
 wchar_t* __cdecl __wcserror(
      wchar_t const* _String
    );

  errno_t __cdecl __wcserror_s(
      wchar_t*       _Buffer,
                                  size_t         _SizeInWords,
                                wchar_t const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl __wcserror_s(wchar_t (&_Buffer)[_Size],   wchar_t const* _ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }
#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

   int __cdecl _wcsicmp(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

   int __cdecl _wcsicmp_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

   int __cdecl _wcsnicmp(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

   int __cdecl _wcsnicmp_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );

  errno_t __cdecl _wcsnset_s(
      wchar_t* _Destination,
                                 size_t   _SizeInWords,
                                 wchar_t  _Value,
                                 size_t   _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s(  wchar_t (&_Destination)[_Size],   wchar_t _Value,   size_t _MaxCount) throw() { return _wcsnset_s(_Destination, _Size, _Value, _MaxCount); } }
#line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl _wcsnset(  wchar_t *_String,   wchar_t _Value,   size_t _MaxCount);
#line 349 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

 wchar_t* __cdecl _wcsrev(
      wchar_t* _String
    );

  errno_t __cdecl _wcsset_s(
      wchar_t* _Destination,
                                 size_t   _SizeInWords,
                                 wchar_t  _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s(  wchar_t (&_String)[_Size],   wchar_t _Value) throw() { return _wcsset_s(_String, _Size, _Value); } }
#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl _wcsset(  wchar_t *_String,   wchar_t _Value);
#line 372 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

  errno_t __cdecl _wcslwr_s(
      wchar_t* _String,
                                 size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s(  wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }
#line 382 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl _wcslwr( wchar_t *_String);
#line 387 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"


 errno_t __cdecl _wcslwr_s_l(
      wchar_t*  _String,
                                 size_t    _SizeInWords,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }
#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl _wcslwr_l(  wchar_t *_String,   _locale_t _Locale);
#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"


 errno_t __cdecl _wcsupr_s(
      wchar_t* _String,
                          size_t   _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s(  wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }
#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl _wcsupr( wchar_t *_String);
#line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"


 errno_t __cdecl _wcsupr_s_l(
      wchar_t*  _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }
#line 436 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl _wcsupr_l(  wchar_t *_String,   _locale_t _Locale);
#line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

 

 size_t __cdecl wcsxfrm(
        wchar_t*       _Destination,
                                         wchar_t const* _Source,
                size_t         _MaxCount
    );

 

 size_t __cdecl _wcsxfrm_l(
        wchar_t*       _Destination,
                                         wchar_t const* _Source,
                size_t         _MaxCount,
                                       _locale_t      _Locale
    );

 
 int __cdecl wcscoll(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

 
 int __cdecl _wcscoll_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

 
 int __cdecl _wcsicoll(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

 
 int __cdecl _wcsicoll_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

 
 int __cdecl _wcsncoll(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

 
 int __cdecl _wcsncoll_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );

 
 int __cdecl _wcsnicoll(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

 
 int __cdecl _wcsnicoll_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );









extern "C++" {

     
    
    inline wchar_t* __cdecl wcschr(  wchar_t* _String, wchar_t _C)
    {
        return const_cast<wchar_t*>(wcschr(static_cast<wchar_t const*>(_String), _C));
    }

     
    inline wchar_t* __cdecl wcspbrk(  wchar_t* _String,   wchar_t const* _Control)
    {
        return const_cast<wchar_t*>(wcspbrk(static_cast<wchar_t const*>(_String), _Control));
    }

     
    inline wchar_t* __cdecl wcsrchr(  wchar_t* _String,   wchar_t _C)
    {
        return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));
    }

       
    
    inline wchar_t* __cdecl wcsstr(  wchar_t* _String,   wchar_t const*_SubStr)
    {
        return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));
    }

}
#line 555 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"









    


#line 568 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

      
     wchar_t* __cdecl wcsdup(
          wchar_t const* _String
        );

    

#line 577 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

    
    

      
     int __cdecl wcsicmp(
          wchar_t const* _String1,
          wchar_t const* _String2
        );

      
     int __cdecl wcsnicmp(
          wchar_t const* _String1,
          wchar_t const* _String2,
                                size_t         _MaxCount
        );

    
     
     wchar_t* __cdecl wcsnset(
          wchar_t* _String,
                                  wchar_t  _Value,
                                  size_t   _MaxCount
        );

    
     
     wchar_t* __cdecl wcsrev(
          wchar_t* _String
        );

    
     
     wchar_t* __cdecl wcsset(
          wchar_t* _String,
               wchar_t  _Value
        );

    
     
     wchar_t* __cdecl wcslwr(
          wchar_t* _String
        );

    
     
     wchar_t* __cdecl wcsupr(
          wchar_t* _String
        );

      
     int __cdecl wcsicoll(
          wchar_t const* _String1,
          wchar_t const* _String2
        );

#line 634 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"



} __pragma(pack(pop))

#line 640 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"

#pragma warning(pop) 
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"




#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {







    
     errno_t __cdecl strcpy_s(
          char*       _Destination,
                                  rsize_t     _SizeInBytes,
                                char const* _Source
        );

    
     errno_t __cdecl strcat_s(
          char*       _Destination,
                                     rsize_t     _SizeInBytes,
                                   char const* _Source
        );

    
     errno_t __cdecl strerror_s(
          char*  _Buffer,
                                  size_t _SizeInBytes,
                                  int    _ErrorNumber);

    
     errno_t __cdecl strncat_s(
          char*       _Destination,
                                     rsize_t     _SizeInBytes,
               char const* _Source,
                                     rsize_t     _MaxCount
        );

    
     errno_t __cdecl strncpy_s(
          char*       _Destination,
                                  rsize_t     _SizeInBytes,
            char const* _Source,
                                  rsize_t     _MaxCount
        );

     
     char*  __cdecl strtok_s(
                          char*       _String,
                                 char const* _Delimiter,
            char**      _Context
        );

#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"

 void* __cdecl _memccpy(
      void*       _Dst,
                                   void const* _Src,
                                   int         _Val,
                                   size_t      _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcat_s(char (&_Destination)[_Size],   char const* _Source) throw() { return strcat_s(_Destination, _Size, _Source); } }
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"



      char* __cdecl strcat( char *_Destination,  char const* _Source);
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"

#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"

 
int __cdecl strcmp(
      char const* _Str1,
      char const* _Str2
    );

 
 int __cdecl _strcmpi(
      char const* _String1,
      char const* _String2
    );

 
 int __cdecl strcoll(
      char const* _String1,
      char const* _String2
    );

 
 int __cdecl _strcoll_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcpy_s(  char (&_Destination)[_Size],   char const* _Source) throw() { return strcpy_s(_Destination, _Size, _Source); } }
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"

  char* __cdecl strcpy( char *_Destination,  char const* _Source);
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"

 
 size_t __cdecl strcspn(
      char const* _Str,
      char const* _Control
    );




#line 146 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"

 
 __declspec(allocator) char* __cdecl _strdup(
      char const* _Source
    );



#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"

 
 
  
 char*  __cdecl _strerror(
      char const* _ErrorMessage
    );


 errno_t __cdecl _strerror_s(
      char*       _Buffer,
                              size_t      _SizeInBytes,
                        char const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strerror_s(char (&_Buffer)[_Size],   char const* _ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"

 
  
 char* __cdecl strerror(
      int _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strerror_s(char (&_Buffer)[_Size],   int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"

 
 int __cdecl _stricmp(
      char const* _String1,
      char const* _String2
    );

 
 int __cdecl _stricoll(
      char const* _String1,
      char const* _String2
    );

 
 int __cdecl _stricoll_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

 
 int __cdecl _stricmp_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

 
size_t __cdecl strlen(
      char const* _Str
    );


 errno_t __cdecl _strlwr_s(
      char*  _String,
                          size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s(  char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"

  char* __cdecl _strlwr( char *_String);
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"


 errno_t __cdecl _strlwr_s_l(
      char*     _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s_l(  char (&_String)[_Size],   _locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"

  char* __cdecl _strlwr_l(  char *_String,   _locale_t _Locale);
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncat_s(  char (&_Destination)[_Size],   char const* _Source,   size_t _Count) throw() { return strncat_s(_Destination, _Size, _Source, _Count); } }
#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"

  char* __cdecl strncat(  char *_Destination,   char const* _Source,   size_t _Count);
#line 269 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"

 
 int __cdecl strncmp(
      char const* _Str1,
      char const* _Str2,
                            size_t      _MaxCount
    );

 
 int __cdecl _strnicmp(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
 int __cdecl _strnicmp_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 
 int __cdecl _strnicoll(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
 int __cdecl _strnicoll_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 
 int __cdecl _strncoll(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
 int __cdecl _strncoll_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 size_t __cdecl __strncnt(
      char const* _String,
                         size_t      _Count
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncpy_s(char (&_Destination)[_Size],   char const* _Source,   size_t _Count) throw() { return strncpy_s(_Destination, _Size, _Source, _Count); } }
#line 333 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"

  char* __cdecl strncpy(    char *_Destination,   char const* _Source,   size_t _Count);
#line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"

 

#line 347 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"

#line 351 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"
 size_t __cdecl strnlen(
      char const* _String,
                            size_t      _MaxCount
    );



     
    
#line 363 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"
    
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"
    static __inline size_t __cdecl strnlen_s(
          char const* _String,
                                size_t      _MaxCount
        )
    {
        return _String == 0 ? 0 : strnlen(_String, _MaxCount);
    }

#line 376 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"


 errno_t __cdecl _strnset_s(
      char*  _String,
                                 size_t _SizeInBytes,
                                 int    _Value,
                                 size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s(  char (&_Destination)[_Size],   int _Value,   size_t _Count) throw() { return _strnset_s(_Destination, _Size, _Value, _Count); } }
#line 391 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"

  char* __cdecl _strnset(  char *_Destination,   int _Value,   size_t _Count);
#line 399 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"

 
 char const* __cdecl strpbrk(
      char const* _Str,
      char const* _Control
    );

 char* __cdecl _strrev(
      char* _Str
    );


 errno_t __cdecl _strset_s(
      char*  _Destination,
                                     size_t _DestinationSize,
                                     int    _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s(  char (&_Destination)[_Size],   int _Value) throw() { return _strset_s(_Destination, _Size, _Value); } }
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"

  char* __cdecl _strset( char *_Destination,  int _Value);
#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"

 
 size_t __cdecl strspn(
      char const* _Str,
      char const* _Control
    );

  
 char* __cdecl strtok(
      char*       _String,
             char const* _Delimiter
    );


 errno_t __cdecl _strupr_s(
      char*  _String,
                          size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s(  char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }
#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"

  char* __cdecl _strupr( char *_String);
#line 456 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"


 errno_t __cdecl _strupr_s_l(
      char*     _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s_l(  char (&_String)[_Size],   _locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }
#line 469 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"

  char* __cdecl _strupr_l(  char *_String,   _locale_t _Locale);
#line 476 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"

 

 size_t __cdecl strxfrm(
        char*       _Destination,
                                         char const* _Source,
                 size_t      _MaxCount
    );

 

 size_t __cdecl _strxfrm_l(
        char*       _Destination,
                                         char const* _Source,
                 size_t      _MaxCount,
                                       _locale_t   _Locale
    );




extern "C++"
{
     
    inline char* __cdecl strchr(  char* const _String,   int const _Ch)
    {
        return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));
    }

     
    inline char* __cdecl strpbrk(  char* const _String,   char const* const _Control)
    {
        return const_cast<char*>(strpbrk(static_cast<char const*>(_String), _Control));
    }

     
    inline char* __cdecl strrchr(  char* const _String,   int const _Ch)
    {
        return const_cast<char*>(strrchr(static_cast<char const*>(_String), _Ch));
    }

       
    inline char* __cdecl strstr(  char* const _String,   char const* const _SubString)
    {
        return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));
    }
}
#line 524 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"





    
    
      
     char* __cdecl strdup(
          char const* _String
        );
    

    
      
     int __cdecl strcmpi(
          char const* _String1,
          char const* _String2
        );

      
     int __cdecl stricmp(
          char const* _String1,
          char const* _String2
        );

    
     char* __cdecl strlwr(
          char* _String
        );

      
     int __cdecl strnicmp(
          char const* _String1,
          char const* _String2,
                                size_t      _MaxCount
        );

    
     char* __cdecl strnset(
          char*  _String,
                                  int    _Value,
                                  size_t _MaxCount
        );

    
     char* __cdecl strrev(
          char* _String
        );

    
    char* __cdecl strset(
          char* _String,
               int   _Value);

    
     char* __cdecl strupr(
          char* _String
        );

#line 585 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"



} __pragma(pack(pop))

#pragma warning(pop) 
#line 592 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"
#line 593 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\string.h"
#line 86 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/common_functions.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\time.h"







#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wtime.h"








#pragma once



#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {








struct tm
{
    int tm_sec;   
    int tm_min;   
    int tm_hour;  
    int tm_mday;  
    int tm_mon;   
    int tm_year;  
    int tm_wday;  
    int tm_yday;  
    int tm_isdst; 
};







  
 
 
 wchar_t* __cdecl _wasctime(
      struct tm const* _Tm
    );

 

 errno_t __cdecl _wasctime_s(
        wchar_t*         _Buffer,
                                          size_t           _SizeInWords,
                                                       struct tm const* _Tm
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wasctime_s(  wchar_t (&_Buffer)[_Size],   struct tm const* _Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wtime.h"

 

 size_t __cdecl wcsftime(
       wchar_t*         _Buffer,
                               size_t           _SizeInWords,
                             wchar_t const*   _Format,
                               struct tm const* _Tm
    );

 

 size_t __cdecl _wcsftime_l(
       wchar_t*         _Buffer,
                               size_t           _SizeInWords,
                             wchar_t const*   _Format,
                               struct tm const* _Tm,
                           _locale_t        _Locale
    );

 
  
 wchar_t* __cdecl _wctime32(
      __time32_t const* _Time
    );


 errno_t __cdecl _wctime32_s(
        wchar_t*          _Buffer,
                                      size_t            _SizeInWords,
                                                       __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime32_s(  wchar_t (&_Buffer)[_Size],   __time32_t const* _Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wtime.h"

 
 
  
 wchar_t* __cdecl _wctime64(
      __time64_t const* _Time
    );


 errno_t __cdecl _wctime64_s(
        wchar_t*          _Buffer,
                                      size_t            _SizeInWords,
                                                       __time64_t const* _Time);

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime64_s(  wchar_t (&_Buffer)[_Size],   __time64_t const* _Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wtime.h"


 errno_t __cdecl _wstrdate_s(
       wchar_t* _Buffer,
                                                                                size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrdate_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }
#line 134 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wtime.h"

   wchar_t* __cdecl _wstrdate( wchar_t *_Buffer);
#line 139 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wtime.h"


 errno_t __cdecl _wstrtime_s(
       wchar_t* _Buffer,
                                                                                size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrtime_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wtime.h"

   wchar_t* __cdecl _wstrtime( wchar_t *_Buffer);
#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wtime.h"









    




















         
        static __inline wchar_t * __cdecl _wctime(
              time_t const* const _Time)
        {
            return _wctime64(_Time);
        }

        
        static __inline errno_t __cdecl _wctime_s(
                  wchar_t*      const _Buffer,
                                                             size_t        const _SizeInWords,
                                                             time_t const* const _Time
            )
        {
            return _wctime64_s(_Buffer, _SizeInWords, _Time);
        }

    #line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wtime.h"
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_wtime.h"

} __pragma(pack(pop))

#pragma warning(pop) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\time.h"

#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {



#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\time.h"






typedef long clock_t;

struct _timespec32
{
    __time32_t tv_sec;
    long       tv_nsec;
};

struct _timespec64
{
    __time64_t tv_sec;
    long       tv_nsec;
};


    struct timespec
    {
        time_t tv_sec;  
        long   tv_nsec; 
    };
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\time.h"
















  
 int* __cdecl __daylight(void);




  
 long* __cdecl __dstbias(void);




  
 long* __cdecl __timezone(void);




    
 char** __cdecl __tzname(void);



  
 errno_t __cdecl _get_daylight(
      int* _Daylight
    );

 
 errno_t __cdecl _get_dstbias(
      long* _DaylightSavingsBias
    );

  
 errno_t __cdecl _get_timezone(
      long* _TimeZone
    );

 
 errno_t __cdecl _get_tzname(
                             size_t* _ReturnValue,
      char*   _Buffer,
                              size_t  _SizeInBytes,
                              int     _Index
    );








 
 
  
 char* __cdecl asctime(
      struct tm const* _Tm
    );


     
    
     errno_t __cdecl asctime_s(
            char*            _Buffer,
                                            size_t           _SizeInBytes,
                                                         struct tm const* _Tm
        );
#line 136 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\time.h"

extern "C++" { template <size_t _Size> inline errno_t __cdecl asctime_s(  char (&_Buffer)[_Size],   struct tm const* _Time) throw() { return asctime_s(_Buffer, _Size, _Time); } }
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\time.h"

 
 clock_t __cdecl clock(void);

 
 
  
 char* __cdecl _ctime32(
      __time32_t const* _Time
    );


 errno_t __cdecl _ctime32_s(
        char*             _Buffer,
                                        size_t            _SizeInBytes,
                                                     __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime32_s(  char (&_Buffer)[_Size],   __time32_t const* _Time) throw() { return _ctime32_s(_Buffer, _Size, _Time); } }
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\time.h"

 
 
  
 char* __cdecl _ctime64(
      __time64_t const* _Time
    );


 errno_t __cdecl _ctime64_s(
        char*             _Buffer,
                                          size_t            _SizeInBytes,
                                                       __time64_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime64_s(  char (&_Buffer)[_Size],   __time64_t const* _Time) throw() { return _ctime64_s(_Buffer, _Size, _Time); } }
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\time.h"

 
 double __cdecl _difftime32(
      __time32_t _Time1,
      __time32_t _Time2
    );

 
 double __cdecl _difftime64(
      __time64_t _Time1,
      __time64_t _Time2
    );

 
  
 struct tm* __cdecl _gmtime32(
      __time32_t const* _Time
    );


 errno_t __cdecl _gmtime32_s(
      struct tm*        _Tm,
       __time32_t const* _Time
    );

 
  
 struct tm* __cdecl _gmtime64(
      __time64_t const* _Time
    );


 errno_t __cdecl _gmtime64_s(
      struct tm*        _Tm,
       __time64_t const* _Time
    );

 
  
 struct tm* __cdecl _localtime32(
      __time32_t const* _Time
    );


 errno_t __cdecl _localtime32_s(
      struct tm*        _Tm,
       __time32_t const* _Time
    );

 
  
 struct tm* __cdecl _localtime64(
      __time64_t const* _Time
    );


 errno_t __cdecl _localtime64_s(
      struct tm*        _Tm,
       __time64_t const* _Time
    );

 
 __time32_t __cdecl _mkgmtime32(
      struct tm* _Tm
    );

 
 __time64_t __cdecl _mkgmtime64(
      struct tm* _Tm
    );


 __time32_t __cdecl _mktime32(
      struct tm* _Tm
    );


 __time64_t __cdecl _mktime64(
      struct tm* _Tm
    );

 

 size_t __cdecl strftime(
       char*            _Buffer,
                               size_t           _SizeInBytes,
        char const*      _Format,
                               struct tm const* _Tm
    );

 

 size_t __cdecl _strftime_l(
           char*            _Buffer,
                               size_t           _MaxSize,
        char const*      _Format,
                               struct tm const* _Tm,
                           _locale_t        _Locale
    );


 errno_t __cdecl _strdate_s(
       char*  _Buffer,
                                                                              size_t _SizeInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strdate_s(  char (&_Buffer)[_Size]) throw() { return _strdate_s(_Buffer, _Size); } }
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\time.h"

   char* __cdecl _strdate( char *_Buffer);
#line 300 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\time.h"


 errno_t __cdecl _strtime_s(
       char*  _Buffer,
                                                                              size_t _SizeInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strtime_s(  char (&_Buffer)[_Size]) throw() { return _strtime_s(_Buffer, _Size); } }
#line 311 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\time.h"

  char* __cdecl _strtime( char *_Buffer);
#line 316 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\time.h"

 __time32_t __cdecl _time32(
      __time32_t* _Time
    );

 __time64_t __cdecl _time64(
      __time64_t* _Time
    );

 
 
 int __cdecl _timespec32_get(
      struct _timespec32* _Ts,
       int                 _Base
    );

 
 
 int __cdecl _timespec64_get(
      struct _timespec64* _Ts,
       int                 _Base
    );










     void __cdecl _tzset(void);

    
    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "GetLocalTime" " " "instead. See online help for details."))
     unsigned __cdecl _getsystime(
          struct tm* _Tm
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetLocalTime" " " "instead. See online help for details."))
     unsigned __cdecl _setsystime(
          struct tm* _Tm,
          unsigned   _Milliseconds
        );

#line 363 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\time.h"










    






























































































































          
        static __inline char* __cdecl ctime(
              time_t const* const _Time
            )
        {
            return _ctime64(_Time);
        }

         
        static __inline double __cdecl difftime(
              time_t const _Time1,
              time_t const _Time2
            )
        {
            return _difftime64(_Time1, _Time2);
        }

          
        static __inline struct tm* __cdecl gmtime(
              time_t const* const _Time)
        {
            return _gmtime64(_Time);
        }

        
        static __inline struct tm* __cdecl localtime(
              time_t const* const _Time
            )
        {
            return _localtime64(_Time);
        }

         
        static __inline time_t __cdecl _mkgmtime(
              struct tm* const _Tm
            )
        {
            return _mkgmtime64(_Tm);
        }

        
        static __inline time_t __cdecl mktime(
              struct tm* const _Tm
            )
        {
            return _mktime64(_Tm);
        }

        static __inline time_t __cdecl time(
              time_t* const _Time
            )
        {
            return _time64(_Time);
        }

         
        static __inline int __cdecl timespec_get(
              struct timespec* const _Ts,
               int              const _Base
            )
        {
            return _timespec64_get((struct _timespec64*)_Ts, _Base);
        }

        
            
            static __inline errno_t __cdecl ctime_s(
                    char*         const _Buffer,
                                                    size_t        const _SizeInBytes,
                                                                 time_t const* const _Time
                )
            {
                return _ctime64_s(_Buffer, _SizeInBytes, _Time);
            }

        

























#line 602 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\time.h"
            
            static __inline errno_t __cdecl gmtime_s(
                      struct tm*    const _Tm,
                       time_t const* const _Time
                )
            {
                return _gmtime64_s(_Tm, _Time);
            }

            
                static __inline errno_t __cdecl localtime_s(
                      struct tm*    const _Tm,
                       time_t const* const _Time
                )
            {
                return _localtime64_s(_Tm, _Time);
            }
        #line 620 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\time.h"
        #line 621 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\time.h"

    #line 623 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\time.h"

#line 625 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\time.h"










    

    
          void __cdecl tzset(void);
    #line 640 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\time.h"

#line 642 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\time.h"



} __pragma(pack(pop))

#pragma warning(pop) 
#line 649 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\time.h"
#line 87 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/common_functions.h"

extern "C"
{
#line 91 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/common_functions.h"
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) clock_t __cdecl clock(void)


#line 95 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/common_functions.h"
;
extern         __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) void*   __cdecl memset(void*, int, size_t) ;
extern         __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) void*   __cdecl memcpy(void*, const void*, size_t) ;

}
#line 101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/common_functions.h"




























































































































































































#line 290 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/common_functions.h"

#line 292 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/common_functions.h"









#line 302 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/common_functions.h"

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"








#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"












































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"











































































































#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
















































































































































































#line 178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 113 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"







































































































































































































#line 259 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"




#line 264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"
#line 114 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"







extern "C"
{









































































#line 197 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


#line 200 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

#line 202 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
#line 203 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"





#line 209 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


#line 212 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"







extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) int            __cdecl abs(int a) ;







extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) long int       __cdecl labs(long int a) ;







extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) long long int          llabs(long long int a) ;


#line 239 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
#line 240 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"




#line 245 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"








































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl fabs(double x) ;










































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  fabsf(float x) ;


#line 332 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"






extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    min(const int a, const int b);






extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) unsigned int           umin(const unsigned int a, const unsigned int b);






extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) long long int          llmin(const long long int a, const long long int b);






extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) unsigned long long int ullmin(const unsigned long long int a, const unsigned long long int b);



#line 364 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

















#line 382 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl fminf(float x, float y);
#line 384 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

















#line 402 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl fmin(double x, double y);
#line 404 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


#line 407 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"






extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    max(const int a, const int b);







extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) unsigned int           umax(const unsigned int a, const unsigned int b);






extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) long long int          llmax(const long long int a, const long long int b);






extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) unsigned long long int ullmax(const unsigned long long int a, const unsigned long long int b);



#line 440 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

















#line 458 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl fmaxf(float x, float y);
#line 460 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

















#line 478 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl fmax(double, double);
#line 480 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"








































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl sin(double x) ;
































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl cos(double x) ;


#line 557 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) void                   sincos(double x, double *sptr, double *cptr) ;















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) void                   sincosf(float x, float *sptr, float *cptr) ;



#line 593 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"








































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl tan(double x) ;




































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl sqrt(double x) ;


#line 706 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"




































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 rsqrt(double x);





































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  rsqrtf(float x);



#line 849 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"




















































#line 902 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl log2(double x);
#line 904 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"






























































#line 967 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl exp2(double x);
#line 969 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"






























































#line 1032 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl exp2f(float x);
#line 1034 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


#line 1037 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"



























































         
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 exp10(double x) ;






























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  exp10f(float x) ;



#line 1165 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

























































































#line 1255 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl expm1(double x);
#line 1257 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

























































































#line 1347 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl expm1f(float x);
#line 1349 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"





















































#line 1403 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl log2f(float x);
#line 1405 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl log10(double x) ;





































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl log(double x) ;
































































































#line 1623 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl log1p(double x);
#line 1625 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
































































































#line 1722 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl log1pf(float x);
#line 1724 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"




























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl floor(double x) ;














































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl exp(double x) ;








































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl cosh(double x) ;

















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl sinh(double x) ;

















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl tanh(double x) ;























































#line 2061 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl acosh(double x);
#line 2063 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"























































#line 2119 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl acoshf(float x);
#line 2121 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


















































#line 2172 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl asinh(double x);
#line 2174 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


















































#line 2225 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl asinhf(float x);
#line 2227 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"



















































#line 2279 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl atanh(double x);
#line 2281 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"



















































#line 2333 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl atanhf(float x);
#line 2335 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"













































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl ldexp(double x, int exp) ;













































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  ldexpf(float x, int exp) ;




















































#line 2480 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl logb(double x);
#line 2482 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"




















































#line 2535 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl logbf(float x);
#line 2537 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"





































#line 2575 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  int    __cdecl ilogb(double x);
#line 2577 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"





































#line 2615 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  int    __cdecl ilogbf(float x);
#line 2617 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"









































































#line 2691 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl scalbn(double x, int n);
#line 2693 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"









































































#line 2767 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl scalbnf(float x, int n);
#line 2769 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"









































































#line 2843 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl scalbln(double x, long int n);
#line 2845 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"









































































#line 2919 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl scalblnf(float x, long int n);
#line 2921 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"









































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl frexp(double x, int *nptr) ;









































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  frexpf(float x, int *nptr) ;




















































#line 3122 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl round(double x);
#line 3124 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"




















































#line 3177 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl roundf(float x);
#line 3179 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"















#line 3195 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  long int __cdecl lround(double x);
#line 3197 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"















#line 3213 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  long int __cdecl lroundf(float x);
#line 3215 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"















#line 3231 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  long long int __cdecl llround(double x);
#line 3233 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"















#line 3249 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  long long int __cdecl llroundf(float x);
#line 3251 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"










































































#line 3326 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


















































#line 3377 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl rintf(float x);
#line 3379 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"














#line 3394 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  long int __cdecl lrint(double x);
#line 3396 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"














#line 3411 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  long int __cdecl lrintf(float x);
#line 3413 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"














#line 3428 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  long long int __cdecl llrint(double x);
#line 3430 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"














#line 3445 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  long long int __cdecl llrintf(float x);
#line 3447 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


















































#line 3498 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl nearbyint(double x);
#line 3500 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


















































#line 3551 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl nearbyintf(float x);
#line 3553 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl ceil(double x) ;


















































#line 3663 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl trunc(double x);
#line 3665 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


















































#line 3716 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl truncf(float x);
#line 3718 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"























#line 3742 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl fdim(double x, double y);
#line 3744 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"























#line 3768 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl fdimf(float x, float y);
#line 3770 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"








































































































































































































































































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl atan2(double y, double x) ;






































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl atan(double x) ;






















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl acos(double x) ;


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl asin(double x) ;































































#line 4276 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double __cdecl hypot(double x, double y);
#line 4278 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


#line 4281 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"



#line 4285 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

















































extern __declspec(__device__) __declspec(__device_builtin__) double                rhypot(double x, double y) ;



#line 4339 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"





























































static __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl hypotf(float x, float y);


#line 4404 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"



#line 4408 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

















































extern __declspec(__device__) __declspec(__device_builtin__) float                 rhypotf(float x, float y) ;











































extern __declspec(__device__) __declspec(__device_builtin__)  double __cdecl norm3d(double a, double b, double c) ;


















































extern __declspec(__device__) __declspec(__device_builtin__) double                rnorm3d(double a, double b, double c) ;
















































extern __declspec(__device__) __declspec(__device_builtin__)  double __cdecl norm4d(double a, double b, double c, double d) ;























































extern __declspec(__device__) __declspec(__device_builtin__) double rnorm4d(double a, double b, double c, double d) ;
























































extern "C++"  __declspec(__device__) __declspec(__device_builtin__)  double norm(int dim, double const * p) ;































































extern __declspec(__device__) __declspec(__device_builtin__) double rnorm(int dim, double const * p) ;
































































extern __declspec(__device__) __declspec(__device_builtin__) float rnormf(int dim, float const * p) ;
























































extern "C++"  __declspec(__device__) __declspec(__device_builtin__)  float normf(int dim, float const * p) ;












































extern __declspec(__device__) __declspec(__device_builtin__) float norm3df(float a, float b, float c) ;


















































extern __declspec(__device__) __declspec(__device_builtin__) float rnorm3df(float a, float b, float c) ;
















































extern __declspec(__device__) __declspec(__device_builtin__) float norm4df(float a, float b, float c, float d) ;























































extern __declspec(__device__) __declspec(__device_builtin__) float rnorm4df(float a, float b, float c, float d) ;



#line 5106 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"



















































































#line 5190 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl cbrt(double x);
#line 5192 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"



















































































#line 5276 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl cbrtf(float x);
#line 5278 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


#line 5281 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 rcbrt(double x);

















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  rcbrtf(float x);



























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 sinpi(double x);



























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  sinpif(float x);



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 cospi(double x);



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  cospif(float x);





























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) void                   sincospi(double x, double *sptr, double *cptr);





























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) void                   sincospif(float x, float *sptr, float *cptr);



#line 5668 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"








































































































































































































































































































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl pow(double x, double y) ;























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl modf(double x, double *iptr) ;


























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl fmod(double x, double y) ;
































































































#line 6209 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl remainder(double x, double y);
#line 6211 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
































































































#line 6308 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl remainderf(float x, float y);
#line 6310 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"





































































#line 6380 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl remquo(double x, double y, int *quo);
#line 6382 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"





































































#line 6452 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl remquof(float x, float y, int *quo);
#line 6454 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"





































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl j0(double x) ;


#line 6495 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"






































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  j0f(float x) ;



#line 6538 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl j1(double x) ;


#line 6606 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  j1f(float x) ;



#line 6676 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"






































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl jn(int n, double x) ;


#line 6718 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"







































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  jnf(int n, float x) ;



#line 6762 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl y0(double x) ;


#line 6822 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  y0f(float x) ;



#line 6884 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl y1(double x) ;


#line 6944 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  y1f(float x) ;



#line 7006 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl yn(int n, double x) ;


#line 7068 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"



























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  ynf(int n, float x) ;


























extern __declspec(__device__) __declspec(__device_builtin__)  double __cdecl cyl_bessel_i0(double x) ;

























extern __declspec(__device__) __declspec(__device_builtin__) float                  cyl_bessel_i0f(float x) ;


























extern __declspec(__device__) __declspec(__device_builtin__)  double __cdecl cyl_bessel_i1(double x) ;

























extern __declspec(__device__) __declspec(__device_builtin__) float                  cyl_bessel_i1f(float x) ;



#line 7238 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"















































































#line 7318 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl erf(double x);
#line 7320 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"















































































#line 7400 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl erff(float x);
#line 7402 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


#line 7405 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 erfinv(double x);
































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  erfinvf(float x);



#line 7540 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"



































#line 7576 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl erfc(double x);
#line 7578 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"



































#line 7614 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl erfcf(float x);
#line 7616 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


















































































































#line 7731 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl lgamma(double x);
#line 7733 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


#line 7736 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 erfcinv(double x);






















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  erfcinvf(float x);



































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 normcdfinv(double x);



































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  normcdfinvf(float x);










































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 normcdf(double x);










































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  normcdff(float x);































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 erfcx(double x);































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  erfcxf(float x);



#line 8201 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"



















































































































#line 8317 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl lgammaf(float x);
#line 8319 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"































































































#line 8415 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl tgamma(double x);
#line 8417 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"































































































#line 8513 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl tgammaf(float x);
#line 8515 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"










#line 8526 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl copysign(double x, double y);
#line 8528 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"










#line 8539 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl copysignf(float x, float y);
#line 8541 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
















#line 8558 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl nextafter(double x, double y);
#line 8560 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
















#line 8577 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl nextafterf(float x, float y);
#line 8579 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"













#line 8593 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl nan(const char *tagp);
#line 8595 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"













#line 8609 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl nanf(const char *tagp);
#line 8611 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


#line 8614 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isinff(float) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isnanf(float) ;








#line 8625 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __finite(double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __finitef(float) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __signbit(double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isnan(double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isinf(double) ;
#line 8631 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __signbitf(float) ;



#line 8637 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"



























































































































































#line 8793 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  double __cdecl fma(double x, double y, double z);
#line 8795 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"



























































































































































#line 8951 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__)  float  __cdecl fmaf(float x, float y, float z);
#line 8953 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


#line 8956 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"




extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __signbitl(long double) ;




#line 8966 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __finitel(long double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isinfl(long double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isnanl(long double) ;
#line 8970 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl acosf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl asinf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl atanf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl atan2f(float, float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl cosf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl sinf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl tanf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl coshf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl sinhf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl tanhf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl expf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl logf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl log10f(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl modff(float, float*) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl powf(float, float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl sqrtf(float) ;         
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl ceilf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl floorf(float) ;
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl fmodf(float, float) ;















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 10543 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

}


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\math.h"










#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_math.h"







#pragma once





#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {


    
    
    struct _exception
    {
        int    type;   
        char*  name;   
        double arg1;   
        double arg2;   
        double retval; 
    };

    
    
    
        

        struct _complex
        {
            double x, y; 
        };

        


#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_math.h"
    #line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_math.h"
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_math.h"










#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_math.h"
    typedef float  float_t;
    typedef double double_t;
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_math.h"















    
        extern double const _HUGE;
    

#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_math.h"
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_math.h"


    
#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_math.h"











#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_math.h"












































































void __cdecl _fperrraise(  int _Except);

   short __cdecl _dclass(  double _X);
   short __cdecl _ldclass(  long double _X);
   short __cdecl _fdclass(  float _X);

   int __cdecl _dsign(  double _X);
   int __cdecl _ldsign(  long double _X);
   int __cdecl _fdsign(  float _X);

   int __cdecl _dpcomp(  double _X,   double _Y);
   int __cdecl _ldpcomp(  long double _X,   long double _Y);
   int __cdecl _fdpcomp(  float _X,   float _Y);

   short __cdecl _dtest(  double* _Px);
   short __cdecl _ldtest(  long double* _Px);
   short __cdecl _fdtest(  float* _Px);

 short __cdecl _d_int(  double* _Px,   short _Xexp);
 short __cdecl _ld_int(  long double* _Px,   short _Xexp);
 short __cdecl _fd_int(  float* _Px,   short _Xexp);

 short __cdecl _dscale(  double* _Px,   long _Lexp);
 short __cdecl _ldscale(  long double* _Px,   long _Lexp);
 short __cdecl _fdscale(  float* _Px,   long _Lexp);

 short __cdecl _dunscale(  short* _Pex,   double* _Px);
 short __cdecl _ldunscale(  short* _Pex,   long double* _Px);
 short __cdecl _fdunscale(  short* _Pex,   float* _Px);

   short __cdecl _dexp(  double* _Px,   double _Y,   long _Eoff);
   short __cdecl _ldexp(  long double* _Px,   long double _Y,   long _Eoff);
   short __cdecl _fdexp(  float* _Px,   float _Y,   long _Eoff);

   short __cdecl _dnorm(  unsigned short* _Ps);
   short __cdecl _fdnorm(  unsigned short* _Ps);

   double __cdecl _dpoly(  double _X,   double const* _Tab,   int _N);
   long double __cdecl _ldpoly(  long double _X,   long double const* _Tab,   int _N);
   float __cdecl _fdpoly(  float _X,   float const* _Tab,   int _N);

   double __cdecl _dlog(  double _X,   int _Baseflag);
   long double __cdecl _ldlog(  long double _X,   int _Baseflag);
   float __cdecl _fdlog(  float _X,   int _Baseflag);

   double __cdecl _dsin(  double _X,   unsigned int _Qoff);
   long double __cdecl _ldsin(  long double _X,   unsigned int _Qoff);
   float __cdecl _fdsin(  float _X,   unsigned int _Qoff);


typedef union
{   
    unsigned short _Sh[4];
    double _Val;
} _double_val;


typedef union
{   
    unsigned short _Sh[2];
    float _Val;
} _float_val;


typedef union
{   
    unsigned short _Sh[4];
    long double _Val;
} _ldouble_val;

typedef union
{   
    unsigned short _Word[4];
    float _Float;
    double _Double;
    long double _Long_double;
} _float_const;

extern const _float_const _Denorm_C,  _Inf_C,  _Nan_C,  _Snan_C, _Hugeval_C;
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C;
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C;

extern const _float_const _Eps_C,  _Rteps_C;
extern const _float_const _FEps_C, _FRteps_C;
extern const _float_const _LEps_C, _LRteps_C;

extern const double      _Zero_C,  _Xbig_C;
extern const float       _FZero_C, _FXbig_C;
extern const long double _LZero_C, _LXbig_C;




























extern "C++"
{
      inline int fpclassify(  float _X) throw()
    {
        return _fdtest(&_X);
    }

      inline int fpclassify(  double _X) throw()
    {
        return _dtest(&_X);
    }

      inline int fpclassify(  long double _X) throw()
    {
        return _ldtest(&_X);
    }

      inline bool signbit(  float _X) throw()
    {
        return _fdsign(_X) != 0;
    }

      inline bool signbit(  double _X) throw()
    {
        return _dsign(_X) != 0;
    }

      inline bool signbit(  long double _X) throw()
    {
        return _ldsign(_X) != 0;
    }

      inline int _fpcomp(  float _X,   float _Y) throw()
    {
        return _fdpcomp(_X, _Y);
    }

      inline int _fpcomp(  double _X,   double _Y) throw()
    {
        return _dpcomp(_X, _Y);
    }

      inline int _fpcomp(  long double _X,   long double _Y) throw()
    {
        return _ldpcomp(_X, _Y);
    }

    template <class _Trc, class _Tre> struct _Combined_type
    {   
        typedef float _Type;
    };

    template <> struct _Combined_type<float, double>
    {   
        typedef double _Type;
    };

    template <> struct _Combined_type<float, long double>
    {   
        typedef long double _Type;
    };

    template <class _Ty, class _T2> struct _Real_widened
    {   
        typedef long double _Type;
    };

    template <> struct _Real_widened<float, float>
    {   
        typedef float _Type;
    };

    template <> struct _Real_widened<float, double>
    {   
        typedef double _Type;
    };

    template <> struct _Real_widened<double, float>
    {   
        typedef double _Type;
    };

    template <> struct _Real_widened<double, double>
    {   
        typedef double _Type;
    };

    template <class _Ty> struct _Real_type
    {   
        typedef double _Type;   
    };

    template <> struct _Real_type<float>
    {   
        typedef float _Type;
    };

    template <> struct _Real_type<long double>
    {   
        typedef long double _Type;
    };

    template <class _T1, class _T2>
      inline int _fpcomp(  _T1 _X,   _T2 _Y) throw()
    {   
        typedef typename _Combined_type<float,
            typename _Real_widened<
            typename _Real_type<_T1>::_Type,
            typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw;
        return _fpcomp((_Tw)_X, (_Tw)_Y);
    }

    template <class _Ty>
      inline bool isfinite(  _Ty _X) throw()
    {
        return fpclassify(_X) <= 0;
    }

    template <class _Ty>
      inline bool isinf(  _Ty _X) throw()
    {
        return fpclassify(_X) == 1;
    }

    template <class _Ty>
      inline bool isnan(  _Ty _X) throw()
    {
        return fpclassify(_X) == 2;
    }

    template <class _Ty>
      inline bool isnormal(  _Ty _X) throw()
    {
        return fpclassify(_X) == (-1);
    }

    template <class _Ty1, class _Ty2>
      inline bool isgreater(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 4) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isgreaterequal(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (2 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isless(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 1) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool islessequal(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 2)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool islessgreater(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isunordered(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return _fpcomp(_X, _Y) == 0;
    }
}  
#line 465 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_math.h"





      int       __cdecl abs(  int _X);
      long      __cdecl labs(  long _X);
      long long __cdecl llabs(  long long _X);

      double __cdecl acos(  double _X);
      double __cdecl asin(  double _X);
      double __cdecl atan(  double _X);
      double __cdecl atan2(  double _Y,   double _X);

      double __cdecl cos(  double _X);
      double __cdecl cosh(  double _X);
      double __cdecl exp(  double _X);
       double __cdecl fabs(  double _X);
      double __cdecl fmod(  double _X,   double _Y);
      double __cdecl log(  double _X);
      double __cdecl log10(  double _X);
      double __cdecl pow(  double _X,   double _Y);
      double __cdecl sin(  double _X);
      double __cdecl sinh(  double _X);
       double __cdecl sqrt(  double _X);
      double __cdecl tan(  double _X);
      double __cdecl tanh(  double _X);

       double    __cdecl acosh(  double _X);
       double    __cdecl asinh(  double _X);
       double    __cdecl atanh(  double _X);
        double    __cdecl atof(  char const* _String);
        double    __cdecl _atof_l(  char const* _String,   _locale_t _Locale);
       double    __cdecl _cabs(  struct _complex _Complex_value);
       double    __cdecl cbrt(  double _X);
       double    __cdecl ceil(  double _X);
       double    __cdecl _chgsign(  double _X);
       double    __cdecl copysign(  double _Number,   double _Sign);
       double    __cdecl _copysign(  double _Number,   double _Sign);
       double    __cdecl erf(  double _X);
       double    __cdecl erfc(  double _X);
       double    __cdecl exp2(  double _X);
       double    __cdecl expm1(  double _X);
       double    __cdecl fdim(  double _X,   double _Y);
       double    __cdecl floor(  double _X);
       double    __cdecl fma(  double _X,   double _Y,   double _Z);
       double    __cdecl fmax(  double _X,   double _Y);
       double    __cdecl fmin(  double _X,   double _Y);
       double    __cdecl frexp(  double _X,   int* _Y);
       double    __cdecl hypot(  double _X,   double _Y);
       double    __cdecl _hypot(  double _X,   double _Y);
       int       __cdecl ilogb(  double _X);
       double    __cdecl ldexp(  double _X,   int _Y);
       double    __cdecl lgamma(  double _X);
       long long __cdecl llrint(  double _X);
       long long __cdecl llround(  double _X);
       double    __cdecl log1p(  double _X);
       double    __cdecl log2(  double _X);
       double    __cdecl logb(  double _X);
       long      __cdecl lrint(  double _X);
       long      __cdecl lround(  double _X);

    int __cdecl _matherr(  struct _exception* _Except);

       double __cdecl modf(  double _X,   double* _Y);
       double __cdecl nan(  char const* _X);
       double __cdecl nearbyint(  double _X);
       double __cdecl nextafter(  double _X,   double _Y);
       double __cdecl nexttoward(  double _X,   long double _Y);
       double __cdecl remainder(  double _X,   double _Y);
       double __cdecl remquo(  double _X,   double _Y,   int* _Z);
       double __cdecl rint(  double _X);
       double __cdecl round(  double _X);
       double __cdecl scalbln(  double _X,   long _Y);
       double __cdecl scalbn(  double _X,   int _Y);
       double __cdecl tgamma(  double _X);
       double __cdecl trunc(  double _X);
       double __cdecl _j0(  double _X );
       double __cdecl _j1(  double _X );
       double __cdecl _jn(int _X,   double _Y);
       double __cdecl _y0(  double _X);
       double __cdecl _y1(  double _X);
       double __cdecl _yn(  int _X,   double _Y);

       float     __cdecl acoshf(  float _X);
       float     __cdecl asinhf(  float _X);
       float     __cdecl atanhf(  float _X);
       float     __cdecl cbrtf(  float _X);
       float     __cdecl _chgsignf(  float _X);
       float     __cdecl copysignf(  float _Number,   float _Sign);
       float     __cdecl _copysignf(  float _Number,   float _Sign);
       float     __cdecl erff(  float _X);
       float     __cdecl erfcf(  float _X);
       float     __cdecl expm1f(  float _X);
       float     __cdecl exp2f(  float _X);
       float     __cdecl fdimf(  float _X,   float _Y);
       float     __cdecl fmaf(  float _X,   float _Y,   float _Z);
       float     __cdecl fmaxf(  float _X,   float _Y);
       float     __cdecl fminf(  float _X,   float _Y);
       float     __cdecl _hypotf(  float _X,   float _Y);
       int       __cdecl ilogbf(  float _X);
       float     __cdecl lgammaf(  float _X);
       long long __cdecl llrintf(  float _X);
       long long __cdecl llroundf(  float _X);
       float     __cdecl log1pf(  float _X);
       float     __cdecl log2f(  float _X);
       float     __cdecl logbf(  float _X);
       long      __cdecl lrintf(  float _X);
       long      __cdecl lroundf(  float _X);
       float     __cdecl nanf(  char const* _X);
       float     __cdecl nearbyintf(  float _X);
       float     __cdecl nextafterf(  float _X,   float _Y);
       float     __cdecl nexttowardf(  float _X,   long double _Y);
       float     __cdecl remainderf(  float _X,   float _Y);
       float     __cdecl remquof(  float _X,   float _Y,   int* _Z);
       float     __cdecl rintf(  float _X);
       float     __cdecl roundf(  float _X);
       float     __cdecl scalblnf(  float _X,   long _Y);
       float     __cdecl scalbnf(  float _X,   int _Y);
       float     __cdecl tgammaf(  float _X);
       float     __cdecl truncf(  float _X);

    



#line 592 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_math.h"

    

           float __cdecl _logbf(  float _X);
           float __cdecl _nextafterf(  float _X,   float _Y);
           int   __cdecl _finitef(  float _X);
           int   __cdecl _isnanf(  float _X);
           int   __cdecl _fpclassf(  float _X);

           int   __cdecl _set_FMA3_enable(  int _Flag);
           int   __cdecl _get_FMA3_enable(void);

    




#line 610 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_math.h"



    

           float __cdecl acosf(  float _X);
           float __cdecl asinf(  float _X);
           float __cdecl atan2f(  float _Y,   float _X);
           float __cdecl atanf(  float _X);
           float __cdecl ceilf(  float _X);
           float __cdecl cosf(  float _X);
           float __cdecl coshf(  float _X);
           float __cdecl expf(  float _X);

    









































#line 667 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_math.h"

    







#line 677 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_math.h"

          __inline float __cdecl fabsf(  float _X)
        {
            return (float)fabs(_X);
        }

    #line 684 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_math.h"

    

           float __cdecl floorf(  float _X);
           float __cdecl fmodf(  float _X,   float _Y);

    











#line 703 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_math.h"

      __inline float __cdecl frexpf(  float _X,   int *_Y)
    {
        return (float)frexp(_X, _Y);
    }

      __inline float __cdecl hypotf(  float _X,   float _Y)
    {
        return _hypotf(_X, _Y);
    }

      __inline float __cdecl ldexpf(  float _X,   int _Y)
    {
        return (float)ldexp(_X, _Y);
    }

    

           float  __cdecl log10f(  float _X);
           float  __cdecl logf(  float _X);
           float  __cdecl modff(  float _X,   float *_Y);
           float  __cdecl powf(  float _X,   float _Y);
           float  __cdecl sinf(  float _X);
           float  __cdecl sinhf(  float _X);
           float  __cdecl sqrtf(  float _X);
           float  __cdecl tanf(  float _X);
           float  __cdecl tanhf(  float _X);

    

















































#line 782 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_math.h"

       long double __cdecl acoshl(  long double _X);

      __inline long double __cdecl acosl(  long double _X)
    {
        return acos((double)_X);
    }

       long double __cdecl asinhl(  long double _X);

      __inline long double __cdecl asinl(  long double _X)
    {
        return asin((double)_X);
    }

      __inline long double __cdecl atan2l(  long double _Y,   long double _X)
    {
        return atan2((double)_Y, (double)_X);
    }

       long double __cdecl atanhl(  long double _X);

      __inline long double __cdecl atanl(  long double _X)
    {
        return atan((double)_X);
    }

       long double __cdecl cbrtl(  long double _X);

      __inline long double __cdecl ceill(  long double _X)
    {
        return ceil((double)_X);
    }

      __inline long double __cdecl _chgsignl(  long double _X)
    {
        return _chgsign((double)_X);
    }

       long double __cdecl copysignl(  long double _Number,   long double _Sign);

      __inline long double __cdecl _copysignl(  long double _Number,   long double _Sign)
    {
        return _copysign((double)_Number, (double)_Sign);
    }

      __inline long double __cdecl coshl(  long double _X)
    {
        return cosh((double)_X);
    }

      __inline long double __cdecl cosl(  long double _X)
    {
        return cos((double)_X);
    }

       long double __cdecl erfl(  long double _X);
       long double __cdecl erfcl(  long double _X);

      __inline long double __cdecl expl(  long double _X)
    {
        return exp((double)_X);
    }

       long double __cdecl exp2l(  long double _X);
       long double __cdecl expm1l(  long double _X);

      __inline long double __cdecl fabsl(  long double _X)
    {
        return fabs((double)_X);
    }

       long double __cdecl fdiml(  long double _X,   long double _Y);

      __inline long double __cdecl floorl(  long double _X)
    {
        return floor((double)_X);
    }

       long double __cdecl fmal(  long double _X,   long double _Y,   long double _Z);
       long double __cdecl fmaxl(  long double _X,   long double _Y);
       long double __cdecl fminl(  long double _X,   long double _Y);

      __inline long double __cdecl fmodl(  long double _X,   long double _Y)
    {
        return fmod((double)_X, (double)_Y);
    }

      __inline long double __cdecl frexpl(  long double _X,   int *_Y)
    {
        return frexp((double)_X, _Y);
    }

       int __cdecl ilogbl(  long double _X);

      __inline long double __cdecl _hypotl(  long double _X,   long double _Y)
    {
        return _hypot((double)_X, (double)_Y);
    }

      __inline long double __cdecl hypotl(  long double _X,   long double _Y)
    {
        return _hypot((double)_X, (double)_Y);
    }

      __inline long double __cdecl ldexpl(  long double _X,   int _Y)
    {
        return ldexp((double)_X, _Y);
    }

       long double __cdecl lgammal(  long double _X);
       long long __cdecl llrintl(  long double _X);
       long long __cdecl llroundl(  long double _X);

      __inline long double __cdecl logl(  long double _X)
    {
        return log((double)_X);
    }

      __inline long double __cdecl log10l(  long double _X)
    {
        return log10((double)_X);
    }

       long double __cdecl log1pl(  long double _X);
       long double __cdecl log2l(  long double _X);
       long double __cdecl logbl(  long double _X);
       long __cdecl lrintl(  long double _X);
       long __cdecl lroundl(  long double _X);

      __inline long double __cdecl modfl(  long double _X,   long double* _Y)
    {
        double _F, _I;
        _F = modf((double)_X, &_I);
        *_Y = _I;
        return _F;
    }

       long double __cdecl nanl(  char const* _X);
       long double __cdecl nearbyintl(  long double _X);
       long double __cdecl nextafterl(  long double _X,   long double _Y);
       long double __cdecl nexttowardl(  long double _X,   long double _Y);

      __inline long double __cdecl powl(  long double _X,   long double _Y)
    {
        return pow((double)_X, (double)_Y);
    }

       long double __cdecl remainderl(  long double _X,   long double _Y);
       long double __cdecl remquol(  long double _X,   long double _Y,   int* _Z);
       long double __cdecl rintl(  long double _X);
       long double __cdecl roundl(  long double _X);
       long double __cdecl scalblnl(  long double _X,   long _Y);
       long double __cdecl scalbnl(  long double _X,   int _Y);

      __inline long double __cdecl sinhl(  long double _X)
    {
        return sinh((double)_X);
    }

      __inline long double __cdecl sinl(  long double _X)
    {
        return sin((double)_X);
    }

      __inline long double __cdecl sqrtl(  long double _X)
    {
        return sqrt((double)_X);
    }

      __inline long double __cdecl tanhl(  long double _X)
    {
        return tanh((double)_X);
    }

      __inline long double __cdecl tanl(  long double _X)
    {
        return tan((double)_X);
    }

       long double __cdecl tgammal(  long double _X);
       long double __cdecl truncl(  long double _X);

    



#line 970 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_math.h"



    
    
    
    
    
    

    

    
        
            extern double HUGE;
        

#line 988 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_math.h"

            double __cdecl j0(  double _X);
            double __cdecl j1(  double _X);
            double __cdecl jn(  int _X,   double _Y);
            double __cdecl y0(  double _X);
            double __cdecl y1(  double _X);
            double __cdecl yn(  int _X,   double _Y);
    #line 996 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_math.h"

#line 998 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_math.h"

} __pragma(pack(pop))

#pragma warning(pop) 
#line 1003 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt_math.h"
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\math.h"




#line 10548 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"



#line 1 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"







#line 1 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"











#line 1 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"













#line 15 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 17 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"
#line 18 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"




































































































































































































































































































































































































































































































#line 1 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"






























#line 32 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 38 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 44 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 50 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 56 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 62 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 68 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 74 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 80 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 86 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 92 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 98 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 104 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 110 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 116 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 122 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 128 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 134 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 140 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 146 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 152 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 158 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 164 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 170 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 176 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 182 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 188 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 194 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 200 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 206 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 212 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 218 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 224 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 230 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 236 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 242 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 248 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 254 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 260 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 266 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 272 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 278 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 284 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 290 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 296 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"






#line 303 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 309 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 315 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 321 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 327 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 333 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 339 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 345 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 351 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 357 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 363 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 369 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 375 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 381 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 387 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 393 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 399 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 405 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 411 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 417 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 423 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 429 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 435 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 441 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 447 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 453 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 459 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 465 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 471 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 477 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 483 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 489 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 495 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 501 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 507 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 513 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"






#line 520 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 526 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 532 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 538 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"






#line 545 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 551 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 557 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"







#line 565 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 571 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 577 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"





#line 583 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"



#line 587 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"

#line 589 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"
#line 590 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xkeycheck.h"
#line 503 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"







#line 511 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"










#line 522 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 524 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"
#line 525 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



#line 529 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



#line 533 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"





#line 539 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 541 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"







#line 549 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"


#line 552 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"


#line 555 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"













#line 569 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"










#line 580 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"





#line 586 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"





















































































#line 672 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



































#line 708 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"





#line 714 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 716 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"





#line 722 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 724 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"





#line 730 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 732 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"




#line 737 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 739 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 741 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 743 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"














#line 758 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"






#line 765 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"






#line 772 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



#line 776 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"









































#line 818 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"






















#line 841 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"
#line 842 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"






#line 849 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"
#line 850 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"















#line 866 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"
#line 867 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"









#line 877 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"
#line 878 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"









#line 888 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"












#line 901 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"
#line 902 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



#line 906 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



#line 910 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"







#line 918 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 920 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"




#line 925 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 927 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"




#line 932 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 934 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"









#line 944 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"




#line 949 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 951 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"




#line 956 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"




#line 961 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



#line 965 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"




#line 970 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"




#line 975 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"







#line 983 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"




#line 988 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"













#line 1002 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"
#line 1003 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"






#line 1010 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"









#line 1020 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"










#line 1031 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"








#line 1040 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"
#line 1041 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"












#line 1055 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1057 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"







#line 1066 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1068 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"









#line 1079 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1081 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"










#line 1093 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1095 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"









#line 1106 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1108 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"











#line 1121 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1123 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"









#line 1134 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"








#line 1146 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1148 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"








#line 1158 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1160 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"









#line 1171 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1173 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"













#line 1188 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1190 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"








#line 1200 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1202 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"














#line 1218 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1220 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"
















#line 1237 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"













#line 1252 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1254 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"










#line 1266 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1268 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"











#line 1280 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"












#line 1293 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"










#line 1305 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1307 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"









#line 1318 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1320 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"







#line 1328 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1330 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"









#line 1341 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1343 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"








#line 1353 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1355 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"








#line 1365 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1367 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"







#line 1376 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1378 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"







#line 1387 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1389 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"








#line 1399 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1401 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"








#line 1411 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1413 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"








#line 1423 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1425 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"








#line 1435 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1437 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"







#line 1445 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1447 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"










#line 1458 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"
















#line 1476 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1478 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"







#line 1487 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1489 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"








#line 1499 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1501 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"







#line 1510 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1512 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"








#line 1522 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1524 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"








#line 1533 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



#line 1537 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



#line 1541 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



#line 1545 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



#line 1549 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



#line 1553 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



#line 1557 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



#line 1561 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



#line 1565 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



#line 1569 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



#line 1573 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"











#line 1585 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"





#line 1591 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



#line 1595 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"




#line 1600 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"































#line 1632 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"


























































#line 1691 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"














































































































#line 1802 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"































































#line 1866 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"




#line 1871 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1873 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"





#line 1879 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1881 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



#line 1885 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1887 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"




#line 1892 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1894 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"
#line 1895 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



#line 1899 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1901 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1903 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"







#line 1911 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



#line 1915 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1917 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



#line 1921 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1923 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



#line 1927 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 1929 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"





































#line 1967 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



#line 1971 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"



#line 1975 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"












#line 1988 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"


#line 1991 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"


#line 1994 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"
#line 1995 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"





#line 2001 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"







#line 2009 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"





#line 2015 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"

#line 2017 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"
#line 2018 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals_core.h"
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"







#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\crtdbg.h"







#pragma once




#line 1 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new_debug.h"







#pragma once

#line 1 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"







#pragma once



#pragma warning(push)
#pragma warning(disable:   4514 4820 )
#pragma warning(disable: 4985) 


extern "C++" {

#pragma pack(push, 8)













    namespace std
    {
        struct nothrow_t {
            explicit nothrow_t() = default;
        };

        


            extern nothrow_t const nothrow;
        #line 44 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
    }
#line 46 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"

[[nodiscard]]     __declspec(allocator)
void* __cdecl operator new(
    size_t _Size
    );

[[nodiscard]]       __declspec(allocator)
void* __cdecl operator new(
    size_t _Size,
    ::std::nothrow_t const&
    ) noexcept;

[[nodiscard]]     __declspec(allocator)
void* __cdecl operator new[](
    size_t _Size
    );

[[nodiscard]]       __declspec(allocator)
void* __cdecl operator new[](
    size_t _Size,
    ::std::nothrow_t const&
    ) noexcept;

void __cdecl operator delete(
    void* _Block
    ) noexcept;

void __cdecl operator delete(
    void* _Block,
    ::std::nothrow_t const&
    ) noexcept;

void __cdecl operator delete[](
    void* _Block
    ) noexcept;

void __cdecl operator delete[](
    void* _Block,
    ::std::nothrow_t const&
    ) noexcept;

void __cdecl operator delete(
    void*  _Block,
    size_t _Size
    ) noexcept;

void __cdecl operator delete[](
    void* _Block,
    size_t _Size
    ) noexcept;
































































#pragma warning(push)
#pragma warning(disable: 4577) 
#pragma warning(disable: 4514) 

    
    [[nodiscard]] [[msvc::constexpr]]      
    inline void* __cdecl operator new(size_t _Size,
          void* _Where) noexcept
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete(void*, void*) noexcept
    {
        return;
    }
#line 178 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"


    
    [[nodiscard]]      
    inline void* __cdecl operator new[](size_t _Size,
          void* _Where) noexcept
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete[](void*, void*) noexcept
    {
    }
#line 193 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
#pragma warning(pop)



#pragma pack(pop)

} 
#line 201 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"

#pragma warning(pop) 
#line 11 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new_debug.h"

#pragma warning(push)
#pragma warning(disable:   4514 4820 )


extern "C++" {

#pragma pack(push, 8)






    [[nodiscard]]      
    __declspec(allocator) void* __cdecl operator new(
            size_t      _Size,
            int         _BlockUse,
          char const* _FileName,
            int         _LineNumber
        );

    [[nodiscard]]      
    __declspec(allocator) void* __cdecl operator new[](
            size_t      _Size,
            int         _BlockUse,
          char const* _FileName,
            int         _LineNumber
        );

    void __cdecl operator delete(
        void*       _Block,
        int         _BlockUse,
        char const* _FileName,
        int         _LineNumber
        ) noexcept;

    void __cdecl operator delete[](
        void*       _Block,
        int         _BlockUse,
        char const* _FileName,
        int         _LineNumber
        ) noexcept;

#line 56 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new_debug.h"



#pragma pack(pop)

} 
#line 63 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new_debug.h"

#pragma warning(pop) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\crtdbg.h"

#pragma warning(push)
#pragma warning(disable: 4324  4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )


__pragma(pack(push, 8)) extern "C" {



typedef void* _HFILE; 

























typedef int (__cdecl* _CRT_REPORT_HOOK )(int, char*,    int*);
typedef int (__cdecl* _CRT_REPORT_HOOKW)(int, wchar_t*, int*);





typedef int (__cdecl* _CRT_ALLOC_HOOK)(int, void*, size_t, int, long, unsigned char const*, int);























































typedef void (__cdecl* _CRT_DUMP_CLIENT)(void*, size_t);





struct _CrtMemBlockHeader;

typedef struct _CrtMemState
{
    struct _CrtMemBlockHeader* pBlockHeader;
    size_t lCounts[5];
    size_t lSizes[5];
    size_t lHighWaterCount;
    size_t lTotalCount;
} _CrtMemState;



    
    

    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
























































































#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\crtdbg.h"










    
    
    
    
    
    
    

    
    
    
    
    
    
    
    

    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

















































































































































































































































































































#line 590 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\crtdbg.h"











    
    
    
    
    
    
    

















































































#line 690 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\crtdbg.h"











    

    
        
    #line 706 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\crtdbg.h"

    
        
    #line 710 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\crtdbg.h"

    
        
    #line 714 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\crtdbg.h"

    
    

    
    

    
    

    
    












































#line 771 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\crtdbg.h"













    
#line 786 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\crtdbg.h"



























} __pragma(pack(pop))

#pragma warning(pop) 
#line 817 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\crtdbg.h"
#line 21 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
#line 1 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\crtdefs.h"


















































































#line 22 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294  4984 5053 )












#line 39 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"

#line 41 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"















#line 57 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
#line 58 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
#line 59 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"






















































#line 114 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
#line 115 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"









#line 125 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"

#line 127 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
#line 128 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"




#line 133 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"

#line 135 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"

#line 137 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"

#line 139 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"


#pragma detect_mismatch("_MSC_VER", "1900")
#line 143 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"


#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "0")
#line 147 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"



#pragma detect_mismatch("RuntimeLibrary", "MT_StaticRelease")






#line 158 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
#line 159 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"






#line 166 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
#line 167 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"



#line 171 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"






#line 178 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"

#line 180 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
#line 181 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"





























#line 211 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"





#line 217 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"





#line 223 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"






#line 230 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
#line 231 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"



#line 235 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"

#line 237 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"

#line 1 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\use_ansi.h"












#line 14 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\use_ansi.h"
















#line 31 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\use_ansi.h"



#line 35 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\use_ansi.h"




#line 40 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\use_ansi.h"
#line 41 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\use_ansi.h"



#line 45 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\use_ansi.h"

#pragma comment(lib, "libcpmt" "" "")






#line 54 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\use_ansi.h"

#line 56 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\use_ansi.h"

#line 58 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\use_ansi.h"
#line 239 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"

















#line 257 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"






#line 264 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
#line 265 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"



#line 269 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"






#line 276 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
#line 277 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"




#line 282 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"

#line 284 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"

#line 286 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
#line 287 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"






#line 294 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
#line 295 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"






#line 302 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
#line 303 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"




#line 308 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"

#line 310 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
#line 311 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"










#line 322 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"

#line 324 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
#line 325 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"



#line 329 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"



#line 333 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"

namespace std {
enum _Uninitialized { 
    _Noinit
};

extern "C++" class  _Lockit { 
public:














    __thiscall _Lockit() noexcept;
    explicit __thiscall _Lockit(int) noexcept; 
    __thiscall ~_Lockit() noexcept; 
#line 359 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"

    static void __cdecl _Lockit_ctor(int) noexcept;
    static void __cdecl _Lockit_dtor(int) noexcept;

private:
    static void __cdecl _Lockit_ctor(_Lockit*) noexcept;
    static void __cdecl _Lockit_ctor(_Lockit*, int) noexcept;
    static void __cdecl _Lockit_dtor(_Lockit*) noexcept;

public:
     _Lockit(const _Lockit&)            = delete;
    _Lockit&  operator=(const _Lockit&) = delete;

private:
    int _Locktype;
};



































































#line 443 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"




































#line 480 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
}



#pragma warning(pop)
#pragma pack(pop)
#line 487 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
#line 488 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
#line 9 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"


#line 1 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"










#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\math.h"















#line 12 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"


#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294  4984 5053 )





[[nodiscard]]   inline double abs(  double _Xx) noexcept  {
    return :: fabs(_Xx);
}

[[nodiscard]]   inline float abs(  float _Xx) noexcept  {
    return :: fabsf(_Xx);
}

[[nodiscard]]   inline long double abs(  long double _Xx) noexcept  {
    return :: fabsl(_Xx);
}

namespace std {
 using :: size_t;
 using :: div_t;
 using :: ldiv_t;
 using :: abort;
 using :: abs;
 using :: atexit;
 using :: atof;
 using :: atoi;
 using :: atol;
 using :: bsearch;
 using :: calloc;
 using :: div;
 using :: exit;
 using :: free;
 using :: labs;
 using :: ldiv;
 using :: malloc;
 using :: mblen;
 using :: mbstowcs;
 using :: mbtowc;
 using :: qsort;
 using :: rand;
 using :: realloc;
 using :: srand;
 using :: strtod;
 using :: strtol;
 using :: strtoul;
 using :: wcstombs;
 using :: wctomb;

 using :: lldiv_t;

 using :: getenv;
 using :: system;

 using :: atoll;
 using :: llabs;
 using :: lldiv;
 using :: strtof;
 using :: strtold;
 using :: strtoll;
 using :: strtoull;

 using :: _Exit;
 using :: at_quick_exit;
 using :: quick_exit;
}



#pragma warning(pop)
#pragma pack(pop)

#line 89 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
#line 90 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
#line 12 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
#line 1 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"










#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294  4984 5053 )










namespace std {
 template <class _Ty, _Ty _Val>
struct integral_constant {
    static constexpr _Ty value = _Val;

    using value_type = _Ty;
    using type       = integral_constant;

    constexpr operator value_type() const noexcept {
        return value;
    }

    [[nodiscard]] constexpr value_type operator()() const noexcept {
        return value;
    }
};

 template <bool _Val>
using bool_constant = integral_constant<bool, _Val>;

 using true_type  = bool_constant<true>;
 using false_type = bool_constant<false>;

 template <bool _Test, class _Ty = void>
struct enable_if {}; 

template <class _Ty>
struct enable_if<true, _Ty> { 
    using type = _Ty;
};

 template <bool _Test, class _Ty = void>
using enable_if_t = typename enable_if<_Test, _Ty>::type;

 template <bool _Test, class _Ty1, class _Ty2>
struct conditional { 
    using type = _Ty1;
};

template <class _Ty1, class _Ty2>
struct conditional<false, _Ty1, _Ty2> {
    using type = _Ty2;
};

 template <bool _Test, class _Ty1, class _Ty2>
using conditional_t = typename conditional<_Test, _Ty1, _Ty2>::type;








 template <class, class>
 constexpr bool is_same_v = false; 
template <class _Ty>
 constexpr bool is_same_v<_Ty, _Ty> = true;

 template <class _Ty1, class _Ty2>
struct is_same : bool_constant<is_same_v<_Ty1, _Ty2>> {};
#line 86 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"

 template <class _Ty>
struct remove_const { 
    using type = _Ty;
};

template <class _Ty>
struct remove_const<const _Ty> {
    using type = _Ty;
};

 template <class _Ty>
using remove_const_t = typename remove_const<_Ty>::type;

 template <class _Ty>
struct remove_volatile { 
    using type = _Ty;
};

template <class _Ty>
struct remove_volatile<volatile _Ty> {
    using type = _Ty;
};

 template <class _Ty>
using remove_volatile_t = typename remove_volatile<_Ty>::type;

 template <class _Ty>
struct remove_cv { 
    using type = _Ty;

    template <template <class> class _Fn>
    using _Apply = _Fn<_Ty>; 
};

template <class _Ty>
struct remove_cv<const _Ty> {
    using type = _Ty;

    template <template <class> class _Fn>
    using _Apply = const _Fn<_Ty>;
};

template <class _Ty>
struct remove_cv<volatile _Ty> {
    using type = _Ty;

    template <template <class> class _Fn>
    using _Apply = volatile _Fn<_Ty>;
};

template <class _Ty>
struct remove_cv<const volatile _Ty> {
    using type = _Ty;

    template <template <class> class _Fn>
    using _Apply = const volatile _Fn<_Ty>;
};

 template <class _Ty>
using remove_cv_t = typename remove_cv<_Ty>::type;

template <bool _First_value, class _First, class... _Rest>
struct _Disjunction { 
    using type = _First;
};

template <class _False, class _Next, class... _Rest>
struct _Disjunction<false, _False, _Next, _Rest...> { 
    using type = typename _Disjunction<_Next::value, _Next, _Rest...>::type;
};

 template <class... _Traits>
struct disjunction : false_type {}; 

template <class _First, class... _Rest>
struct disjunction<_First, _Rest...> : _Disjunction<_First::value, _First, _Rest...>::type {
    
};

 template <class... _Traits>
 constexpr bool disjunction_v = disjunction<_Traits...>::value;

template <class _Ty, class... _Types>
 constexpr bool _Is_any_of_v = 


#line 174 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
    disjunction_v<is_same<_Ty, _Types>...>;
#line 176 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"

[[nodiscard]] constexpr bool _Is_constant_evaluated() noexcept { 
    return __builtin_is_constant_evaluated();
}





#line 186 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"

 template <class _Ty>
 constexpr bool is_integral_v = _Is_any_of_v<remove_cv_t<_Ty>, bool, char, signed char, unsigned char,
    wchar_t,



    char16_t, char32_t, short, unsigned short, int, unsigned int, long, unsigned long, long long, unsigned long long>;

 template <class _Ty>
struct is_integral : bool_constant<is_integral_v<_Ty>> {};

 template <class _Ty>
 constexpr bool is_floating_point_v = _Is_any_of_v<remove_cv_t<_Ty>, float, double, long double>;

 template <class _Ty>
struct is_floating_point : bool_constant<is_floating_point_v<_Ty>> {};

 template <class _Ty>
 constexpr bool is_arithmetic_v = 
    is_integral_v<_Ty> || is_floating_point_v<_Ty>;

 template <class _Ty>
struct is_arithmetic : bool_constant<is_arithmetic_v<_Ty>> {};

 template <class _Ty>
struct remove_reference {
    using type                 = _Ty;
    using _Const_thru_ref_type = const _Ty;
};

template <class _Ty>
struct remove_reference<_Ty&> {
    using type                 = _Ty;
    using _Const_thru_ref_type = const _Ty&;
};

template <class _Ty>
struct remove_reference<_Ty&&> {
    using type                 = _Ty;
    using _Const_thru_ref_type = const _Ty&&;
};

 template <class _Ty>
using remove_reference_t = typename remove_reference<_Ty>::type;

template <class _Ty>
using _Const_thru_ref = typename remove_reference<_Ty>::_Const_thru_ref_type;

template <class _Ty>
using _Remove_cvref_t  = remove_cv_t<remove_reference_t<_Ty>>;









#line 247 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"

}







#pragma warning(pop)
#pragma pack(pop)
#line 259 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
#line 260 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"



#line 18 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"

#line 20 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"



#line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"



#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294  4984 5053 )




[[nodiscard]]   inline float acos(  float _Xx) noexcept  {
    return :: acosf(_Xx);
}

[[nodiscard]]   inline float acosh(  float _Xx) noexcept  {
    return :: acoshf(_Xx);
}

[[nodiscard]]   inline float asin(  float _Xx) noexcept  {
    return :: asinf(_Xx);
}

[[nodiscard]]   inline float asinh(  float _Xx) noexcept  {
    return :: asinhf(_Xx);
}

[[nodiscard]]   inline float atan(  float _Xx) noexcept  {
    return :: atanf(_Xx);
}

[[nodiscard]]   inline float atanh(  float _Xx) noexcept  {
    return :: atanhf(_Xx);
}

[[nodiscard]]   inline float atan2(  float _Yx,   float _Xx) noexcept  {
    return :: atan2f(_Yx, _Xx);
}

[[nodiscard]]   inline float cbrt(  float _Xx) noexcept  {
    return :: cbrtf(_Xx);
}

[[nodiscard]]   inline float ceil(  float _Xx) noexcept  {


#line 72 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"

#line 74 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
    return :: ceilf(_Xx);
#line 76 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
}

[[nodiscard]]   inline float copysign(  float _Number,   float _Sign) noexcept  {


#line 82 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"

#line 84 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
    return :: copysignf(_Number, _Sign);
#line 86 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
}

[[nodiscard]]   inline float cos(  float _Xx) noexcept  {
    return :: cosf(_Xx);
}

[[nodiscard]]   inline float cosh(  float _Xx) noexcept  {
    return :: coshf(_Xx);
}

[[nodiscard]]   inline float erf(  float _Xx) noexcept  {
    return :: erff(_Xx);
}

[[nodiscard]]   inline float erfc(  float _Xx) noexcept  {
    return :: erfcf(_Xx);
}

[[nodiscard]]   inline float exp(  float _Xx) noexcept  {
    return :: expf(_Xx);
}

[[nodiscard]]   inline float exp2(  float _Xx) noexcept  {
    return :: exp2f(_Xx);
}

[[nodiscard]]   inline float expm1(  float _Xx) noexcept  {
    return :: expm1f(_Xx);
}

[[nodiscard]]   inline float fabs(  float _Xx) noexcept  {
    return :: fabsf(_Xx);
}

[[nodiscard]]   inline float fdim(  float _Xx,   float _Yx) noexcept  {
    return :: fdimf(_Xx, _Yx);
}

[[nodiscard]]   inline float floor(  float _Xx) noexcept  {


#line 128 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"

#line 130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
    return :: floorf(_Xx);
#line 132 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
}

[[nodiscard]]   inline float fma(  float _Xx,   float _Yx,   float _Zx) noexcept  {
    return :: fmaf(_Xx, _Yx, _Zx);
}

[[nodiscard]]   inline float fmax(  float _Xx,   float _Yx) noexcept  {
    return :: fmaxf(_Xx, _Yx);
}

[[nodiscard]]   inline float fmin(  float _Xx,   float _Yx) noexcept  {
    return :: fminf(_Xx, _Yx);
}

[[nodiscard]]   inline float fmod(  float _Xx,   float _Yx) noexcept  {
    return :: fmodf(_Xx, _Yx);
}

inline float frexp(  float _Xx,   int* _Yx) noexcept  {
    return :: frexpf(_Xx, _Yx);
}

[[nodiscard]]   inline float hypot(  float _Xx,   float _Yx) noexcept  {
    return :: hypotf(_Xx, _Yx);
}

[[nodiscard]]   inline int ilogb(  float _Xx) noexcept  {
    return :: ilogbf(_Xx);
}

[[nodiscard]]   inline float ldexp(  float _Xx,   int _Yx) noexcept  {
    return :: ldexpf(_Xx, _Yx);
}

[[nodiscard]]   inline float lgamma(  float _Xx) noexcept  {
    return :: lgammaf(_Xx);
}

[[nodiscard]]   inline long long llrint(  float _Xx) noexcept  {
    return :: llrintf(_Xx);
}

[[nodiscard]]   inline long long llround(  float _Xx) noexcept  {
    return :: llroundf(_Xx);
}

[[nodiscard]]   inline float log(  float _Xx) noexcept  {
    return :: logf(_Xx);
}

[[nodiscard]]   inline float log10(  float _Xx) noexcept  {
    return :: log10f(_Xx);
}

[[nodiscard]]   inline float log1p(  float _Xx) noexcept  {
    return :: log1pf(_Xx);
}

[[nodiscard]]   inline float log2(  float _Xx) noexcept  {
    return :: log2f(_Xx);
}

[[nodiscard]]   inline float logb(  float _Xx) noexcept  {
    return :: logbf(_Xx);
}

[[nodiscard]]   inline long lrint(  float _Xx) noexcept  {
    return :: lrintf(_Xx);
}

[[nodiscard]]   inline long lround(  float _Xx) noexcept  {
    return :: lroundf(_Xx);
}

inline float modf(  float _Xx,   float* _Yx) noexcept  {
    return :: modff(_Xx, _Yx);
}

[[nodiscard]]   inline float nearbyint(  float _Xx) noexcept  {
    return :: nearbyintf(_Xx);
}

[[nodiscard]]   inline float nextafter(  float _Xx,   float _Yx) noexcept  {
    return :: nextafterf(_Xx, _Yx);
}

[[nodiscard]]   inline float nexttoward(  float _Xx,   long double _Yx) noexcept  {
    return :: nexttowardf(_Xx, _Yx);
}

[[nodiscard]]   inline float pow(  float _Xx,   float _Yx) noexcept  {
    return :: powf(_Xx, _Yx);
}

[[nodiscard]]   inline float remainder(  float _Xx,   float _Yx) noexcept  {
    return :: remainderf(_Xx, _Yx);
}

inline float remquo(  float _Xx,   float _Yx,   int* _Zx) noexcept  {
    return :: remquof(_Xx, _Yx, _Zx);
}

[[nodiscard]]   inline float rint(  float _Xx) noexcept  {
    return :: rintf(_Xx);
}

[[nodiscard]]   inline float round(  float _Xx) noexcept  {


#line 242 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"

#line 244 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
    return :: roundf(_Xx);
#line 246 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
}

[[nodiscard]]   inline float scalbln(  float _Xx,   long _Yx) noexcept  {
    return :: scalblnf(_Xx, _Yx);
}

[[nodiscard]]   inline float scalbn(  float _Xx,   int _Yx) noexcept  {
    return :: scalbnf(_Xx, _Yx);
}

[[nodiscard]]   inline float sin(  float _Xx) noexcept  {
    return :: sinf(_Xx);
}

[[nodiscard]]   inline float sinh(  float _Xx) noexcept  {
    return :: sinhf(_Xx);
}

[[nodiscard]]   inline float sqrt(  float _Xx) noexcept  {
    return :: sqrtf(_Xx);
}

[[nodiscard]]   inline float tan(  float _Xx) noexcept  {
    return :: tanf(_Xx);
}

[[nodiscard]]   inline float tanh(  float _Xx) noexcept  {
    return :: tanhf(_Xx);
}

[[nodiscard]]   inline float tgamma(  float _Xx) noexcept  {
    return :: tgammaf(_Xx);
}

[[nodiscard]]   inline float trunc(  float _Xx) noexcept  {


#line 284 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"

#line 286 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
    return :: truncf(_Xx);
#line 288 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
}

[[nodiscard]]   inline long double acos(  long double _Xx) noexcept  {
    return :: acosl(_Xx);
}

[[nodiscard]]   inline long double acosh(  long double _Xx) noexcept  {
    return :: acoshl(_Xx);
}

[[nodiscard]]   inline long double asin(  long double _Xx) noexcept  {
    return :: asinl(_Xx);
}

[[nodiscard]]   inline long double asinh(  long double _Xx) noexcept  {
    return :: asinhl(_Xx);
}

[[nodiscard]]   inline long double atan(  long double _Xx) noexcept  {
    return :: atanl(_Xx);
}

[[nodiscard]]   inline long double atanh(  long double _Xx) noexcept  {
    return :: atanhl(_Xx);
}

[[nodiscard]]   inline long double atan2(  long double _Yx,   long double _Xx) noexcept
 {
    return :: atan2l(_Yx, _Xx);
}

[[nodiscard]]   inline long double cbrt(  long double _Xx) noexcept  {
    return :: cbrtl(_Xx);
}

[[nodiscard]]   inline long double ceil(  long double _Xx) noexcept  {


#line 327 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"

#line 329 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
    return :: ceill(_Xx);
#line 331 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
}

[[nodiscard]]   inline long double copysign(  long double _Number,   long double _Sign) noexcept
 {


#line 338 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"

#line 340 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
    return :: copysignl(_Number, _Sign);
#line 342 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
}

[[nodiscard]]   inline long double cos(  long double _Xx) noexcept  {
    return :: cosl(_Xx);
}

[[nodiscard]]   inline long double cosh(  long double _Xx) noexcept  {
    return :: coshl(_Xx);
}

[[nodiscard]]   inline long double erf(  long double _Xx) noexcept  {
    return :: erfl(_Xx);
}

[[nodiscard]]   inline long double erfc(  long double _Xx) noexcept  {
    return :: erfcl(_Xx);
}

[[nodiscard]]   inline long double exp(  long double _Xx) noexcept  {
    return :: expl(_Xx);
}

[[nodiscard]]   inline long double exp2(  long double _Xx) noexcept  {
    return :: exp2l(_Xx);
}

[[nodiscard]]   inline long double expm1(  long double _Xx) noexcept  {
    return :: expm1l(_Xx);
}

[[nodiscard]]   inline long double fabs(  long double _Xx) noexcept  {
    return :: fabsl(_Xx);
}

[[nodiscard]]   inline long double fdim(  long double _Xx,   long double _Yx) noexcept
 {
    return :: fdiml(_Xx, _Yx);
}

[[nodiscard]]   inline long double floor(  long double _Xx) noexcept  {


#line 385 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"

#line 387 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
    return :: floorl(_Xx);
#line 389 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
}

[[nodiscard]]   inline long double fma(
      long double _Xx,   long double _Yx,   long double _Zx) noexcept  {
    return :: fmal(_Xx, _Yx, _Zx);
}

[[nodiscard]]   inline long double fmax(  long double _Xx,   long double _Yx) noexcept
 {
    return :: fmaxl(_Xx, _Yx);
}

[[nodiscard]]   inline long double fmin(  long double _Xx,   long double _Yx) noexcept
 {
    return :: fminl(_Xx, _Yx);
}

[[nodiscard]]   inline long double fmod(  long double _Xx,   long double _Yx) noexcept
 {
    return :: fmodl(_Xx, _Yx);
}

inline long double frexp(  long double _Xx,   int* _Yx) noexcept  {
    return :: frexpl(_Xx, _Yx);
}

[[nodiscard]]   inline long double hypot(  long double _Xx,   long double _Yx) noexcept
 {
    return :: hypotl(_Xx, _Yx);
}

[[nodiscard]]   inline int ilogb(  long double _Xx) noexcept  {
    return :: ilogbl(_Xx);
}

[[nodiscard]]   inline long double ldexp(  long double _Xx,   int _Yx) noexcept  {
    return :: ldexpl(_Xx, _Yx);
}

[[nodiscard]]   inline long double lgamma(  long double _Xx) noexcept  {
    return :: lgammal(_Xx);
}

[[nodiscard]]   inline long long llrint(  long double _Xx) noexcept  {
    return :: llrintl(_Xx);
}

[[nodiscard]]   inline long long llround(  long double _Xx) noexcept  {
    return :: llroundl(_Xx);
}

[[nodiscard]]   inline long double log(  long double _Xx) noexcept  {
    return :: logl(_Xx);
}

[[nodiscard]]   inline long double log10(  long double _Xx) noexcept  {
    return :: log10l(_Xx);
}

[[nodiscard]]   inline long double log1p(  long double _Xx) noexcept  {
    return :: log1pl(_Xx);
}

[[nodiscard]]   inline long double log2(  long double _Xx) noexcept  {
    return :: log2l(_Xx);
}

[[nodiscard]]   inline long double logb(  long double _Xx) noexcept  {
    return :: logbl(_Xx);
}

[[nodiscard]]   inline long lrint(  long double _Xx) noexcept  {
    return :: lrintl(_Xx);
}

[[nodiscard]]   inline long lround(  long double _Xx) noexcept  {
    return :: lroundl(_Xx);
}

inline long double modf(  long double _Xx,   long double* _Yx) noexcept  {
    return :: modfl(_Xx, _Yx);
}

[[nodiscard]]   inline long double nearbyint(  long double _Xx) noexcept  {
    return :: nearbyintl(_Xx);
}

[[nodiscard]]   inline long double nextafter(  long double _Xx,   long double _Yx) noexcept
 {
    return :: nextafterl(_Xx, _Yx);
}

[[nodiscard]]   inline long double nexttoward(  long double _Xx,   long double _Yx) noexcept
 {
    return :: nexttowardl(_Xx, _Yx);
}

[[nodiscard]]   inline long double pow(  long double _Xx,   long double _Yx) noexcept
 {
    return :: powl(_Xx, _Yx);
}

[[nodiscard]]   inline long double remainder(  long double _Xx,   long double _Yx) noexcept
 {
    return :: remainderl(_Xx, _Yx);
}

inline long double remquo(  long double _Xx,   long double _Yx,   int* _Zx) noexcept  {
    return :: remquol(_Xx, _Yx, _Zx);
}

[[nodiscard]]   inline long double rint(  long double _Xx) noexcept  {
    return :: rintl(_Xx);
}

[[nodiscard]]   inline long double round(  long double _Xx) noexcept  {


#line 508 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"

#line 510 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
    return :: roundl(_Xx);
#line 512 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
}

[[nodiscard]]   inline long double scalbln(  long double _Xx,   long _Yx) noexcept  {
    return :: scalblnl(_Xx, _Yx);
}

[[nodiscard]]   inline long double scalbn(  long double _Xx,   int _Yx) noexcept  {
    return :: scalbnl(_Xx, _Yx);
}

[[nodiscard]]   inline long double sin(  long double _Xx) noexcept  {
    return :: sinl(_Xx);
}

[[nodiscard]]   inline long double sinh(  long double _Xx) noexcept  {
    return :: sinhl(_Xx);
}

[[nodiscard]]   inline long double sqrt(  long double _Xx) noexcept  {
    return :: sqrtl(_Xx);
}

[[nodiscard]]   inline long double tan(  long double _Xx) noexcept  {
    return :: tanl(_Xx);
}

[[nodiscard]]   inline long double tanh(  long double _Xx) noexcept  {
    return :: tanhl(_Xx);
}

[[nodiscard]]   inline long double tgamma(  long double _Xx) noexcept  {
    return :: tgammal(_Xx);
}

[[nodiscard]]   inline long double trunc(  long double _Xx) noexcept  {


#line 550 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"

#line 552 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
    return :: truncl(_Xx);
#line 554 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
}

namespace std {
template <class _Ty1, class _Ty2>
using _Common_float_type_t = conditional_t<is_same_v<_Ty1, long double> || is_same_v<_Ty2, long double>, long double,
    conditional_t<is_same_v<_Ty1, float> && is_same_v<_Ty2, float>, float,
        double>>; 
}

template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0>
double frexp(_Ty _Value,   int* const _Exp) noexcept  {
    return :: frexp(static_cast<double>(_Value), _Exp);
}

template <class _Ty1, class _Ty2, class _Ty3,
    ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2> && ::std:: is_arithmetic_v<_Ty3>, int> = 0>
[[nodiscard]] ::std:: _Common_float_type_t<_Ty1, ::std:: _Common_float_type_t<_Ty2, _Ty3>> fma(
    _Ty1 _Left, _Ty2 _Middle, _Ty3 _Right) noexcept  {
    using _Common = ::std:: _Common_float_type_t<_Ty1, ::std:: _Common_float_type_t<_Ty2, _Ty3>>;
    if constexpr (::std:: is_same_v<_Common, float>) {
        return :: fmaf(static_cast<_Common>(_Left), static_cast<_Common>(_Middle), static_cast<_Common>(_Right));
    } else if constexpr (::std:: is_same_v<_Common, double>) {
        return :: fma(static_cast<_Common>(_Left), static_cast<_Common>(_Middle), static_cast<_Common>(_Right));
    } else {
        return :: fmal(static_cast<_Common>(_Left), static_cast<_Common>(_Middle), static_cast<_Common>(_Right));
    }
}

template <class _Ty1, class _Ty2, ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>, int> = 0>
::std:: _Common_float_type_t<_Ty1, _Ty2> remquo(_Ty1 _Left, _Ty2 _Right, int* _Pquo) noexcept  {
    using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>;
    if constexpr (::std:: is_same_v<_Common, float>) {
        return :: remquof(static_cast<_Common>(_Left), static_cast<_Common>(_Right), _Pquo);
    } else if constexpr (::std:: is_same_v<_Common, double>) {
        return :: remquo(static_cast<_Common>(_Left), static_cast<_Common>(_Right), _Pquo);
    } else {
        return :: remquol(static_cast<_Common>(_Left), static_cast<_Common>(_Right), _Pquo);
    }
}












#line 606 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"

#line 608 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"

#line 610 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
























#line 635 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"

#line 637 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"

#line 639 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"


template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double acos(_Ty _Left) noexcept { return :: acos(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double asin(_Ty _Left) noexcept { return :: asin(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double atan(_Ty _Left) noexcept { return :: atan(static_cast<double>(_Left)); }
template <class _Ty1, class _Ty2, ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>, int> = 0> [[nodiscard]] ::std:: _Common_float_type_t<_Ty1, _Ty2> atan2(_Ty1 _Left, _Ty2 _Right) noexcept { return :: atan2(static_cast<double>(_Left), static_cast<double>(_Right)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double cos(_Ty _Left) noexcept { return :: cos(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double sin(_Ty _Left) noexcept { return :: sin(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double tan(_Ty _Left) noexcept { return :: tan(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double acosh(_Ty _Left) noexcept { return :: acosh(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double asinh(_Ty _Left) noexcept { return :: asinh(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double atanh(_Ty _Left) noexcept { return :: atanh(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double cosh(_Ty _Left) noexcept { return :: cosh(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double sinh(_Ty _Left) noexcept { return :: sinh(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double tanh(_Ty _Left) noexcept { return :: tanh(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double exp(_Ty _Left) noexcept { return :: exp(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double exp2(_Ty _Left) noexcept { return :: exp2(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double expm1(_Ty _Left) noexcept { return :: expm1(static_cast<double>(_Left)); }

template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] int ilogb(_Ty _Left) noexcept { return :: ilogb(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double ldexp(_Ty _Left, int _Arg2) noexcept { return :: ldexp(static_cast<double>(_Left), _Arg2); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double log(_Ty _Left) noexcept { return :: log(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double log10(_Ty _Left) noexcept { return :: log10(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double log1p(_Ty _Left) noexcept { return :: log1p(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double log2(_Ty _Left) noexcept { return :: log2(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double logb(_Ty _Left) noexcept { return :: logb(static_cast<double>(_Left)); }

template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double scalbn(_Ty _Left, int _Arg2) noexcept { return :: scalbn(static_cast<double>(_Left), _Arg2); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double scalbln(_Ty _Left, long _Arg2) noexcept { return :: scalbln(static_cast<double>(_Left), _Arg2); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double cbrt(_Ty _Left) noexcept { return :: cbrt(static_cast<double>(_Left)); }

template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double fabs(_Ty _Left) noexcept { return :: fabs(static_cast<double>(_Left)); }
template <class _Ty1, class _Ty2, ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>, int> = 0> [[nodiscard]] ::std:: _Common_float_type_t<_Ty1, _Ty2> hypot(_Ty1 _Left, _Ty2 _Right) noexcept { return :: hypot(static_cast<double>(_Left), static_cast<double>(_Right)); }

template <class _Ty1, class _Ty2, ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>, int> = 0> [[nodiscard]] ::std:: _Common_float_type_t<_Ty1, _Ty2> pow(_Ty1 _Left, _Ty2 _Right) noexcept { return :: pow(static_cast<double>(_Left), static_cast<double>(_Right)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double sqrt(_Ty _Left) noexcept { return :: sqrt(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double erf(_Ty _Left) noexcept { return :: erf(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double erfc(_Ty _Left) noexcept { return :: erfc(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double lgamma(_Ty _Left) noexcept { return :: lgamma(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double tgamma(_Ty _Left) noexcept { return :: tgamma(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double ceil(_Ty _Left) noexcept { return :: ceil(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double floor(_Ty _Left) noexcept { return :: floor(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double nearbyint(_Ty _Left) noexcept { return :: nearbyint(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double rint(_Ty _Left) noexcept { return :: rint(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] long lrint(_Ty _Left) noexcept { return :: lrint(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] long long llrint(_Ty _Left) noexcept { return :: llrint(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double round(_Ty _Left) noexcept { return :: round(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] long lround(_Ty _Left) noexcept { return :: lround(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] long long llround(_Ty _Left) noexcept { return :: llround(static_cast<double>(_Left)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double trunc(_Ty _Left) noexcept { return :: trunc(static_cast<double>(_Left)); }
template <class _Ty1, class _Ty2, ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>, int> = 0> [[nodiscard]] ::std:: _Common_float_type_t<_Ty1, _Ty2> fmod(_Ty1 _Left, _Ty2 _Right) noexcept { return :: fmod(static_cast<double>(_Left), static_cast<double>(_Right)); }
template <class _Ty1, class _Ty2, ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>, int> = 0> [[nodiscard]] ::std:: _Common_float_type_t<_Ty1, _Ty2> remainder(_Ty1 _Left, _Ty2 _Right) noexcept { return :: remainder(static_cast<double>(_Left), static_cast<double>(_Right)); }

template <class _Ty1, class _Ty2, ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>, int> = 0> [[nodiscard]] ::std:: _Common_float_type_t<_Ty1, _Ty2> copysign(_Ty1 _Left, _Ty2 _Right) noexcept { return :: copysign(static_cast<double>(_Left), static_cast<double>(_Right)); }

template <class _Ty1, class _Ty2, ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>, int> = 0> [[nodiscard]] ::std:: _Common_float_type_t<_Ty1, _Ty2> nextafter(_Ty1 _Left, _Ty2 _Right) noexcept { return :: nextafter(static_cast<double>(_Left), static_cast<double>(_Right)); }
template <class _Ty, ::std:: enable_if_t<::std:: is_integral_v<_Ty>, int> = 0> [[nodiscard]] double nexttoward(_Ty _Left, long double _Arg2) noexcept { return :: nexttoward(static_cast<double>(_Left), _Arg2); }
template <class _Ty1, class _Ty2, ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>, int> = 0> [[nodiscard]] ::std:: _Common_float_type_t<_Ty1, _Ty2> fdim(_Ty1 _Left, _Ty2 _Right) noexcept { return :: fdim(static_cast<double>(_Left), static_cast<double>(_Right)); }
template <class _Ty1, class _Ty2, ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>, int> = 0> [[nodiscard]] ::std:: _Common_float_type_t<_Ty1, _Ty2> fmax(_Ty1 _Left, _Ty2 _Right) noexcept { return :: fmax(static_cast<double>(_Left), static_cast<double>(_Right)); }
template <class _Ty1, class _Ty2, ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>, int> = 0> [[nodiscard]] ::std:: _Common_float_type_t<_Ty1, _Ty2> fmin(_Ty1 _Left, _Ty2 _Right) noexcept { return :: fmin(static_cast<double>(_Left), static_cast<double>(_Right)); }














namespace std {
 using :: abs;
 using :: acos;
 using :: asin;
 using :: atan;
 using :: atan2;
 using :: ceil;
 using :: cos;
 using :: cosh;
 using :: exp;
 using :: fabs;
 using :: floor;
 using :: fmod;
 using :: frexp;
 using :: ldexp;
 using :: log;
 using :: log10;
 using :: modf;
 using :: pow;
 using :: sin;
 using :: sinh;
 using :: sqrt;
 using :: tan;
 using :: tanh;

 using :: acosf;
 using :: asinf;
 using :: atanf;
 using :: atan2f;
 using :: ceilf;
 using :: cosf;
 using :: coshf;
 using :: expf;
 using :: fabsf;
 using :: floorf;
 using :: fmodf;
 using :: frexpf;
 using :: ldexpf;
 using :: logf;
 using :: log10f;
 using :: modff;
 using :: powf;
 using :: sinf;
 using :: sinhf;
 using :: sqrtf;
 using :: tanf;
 using :: tanhf;

 using :: acosl;
 using :: asinl;
 using :: atanl;
 using :: atan2l;
 using :: ceill;
 using :: cosl;
 using :: coshl;
 using :: expl;
 using :: fabsl;
 using :: floorl;
 using :: fmodl;
 using :: frexpl;
 using :: ldexpl;
 using :: logl;
 using :: log10l;
 using :: modfl;
 using :: powl;
 using :: sinl;
 using :: sinhl;
 using :: sqrtl;
 using :: tanl;
 using :: tanhl;

 using :: float_t;
 using :: double_t;

 using :: acosh;
 using :: asinh;
 using :: atanh;
 using :: cbrt;
 using :: erf;
 using :: erfc;
 using :: expm1;
 using :: exp2;

inline namespace _Binary_hypot {
     using :: hypot;
} 

 using :: ilogb;
 using :: lgamma;
 using :: log1p;
 using :: log2;
 using :: logb;
 using :: llrint;
 using :: lrint;
 using :: nearbyint;
 using :: rint;
 using :: llround;
 using :: lround;
 using :: fdim;
 using :: fma;
 using :: fmax;
 using :: fmin;
 using :: round;
 using :: trunc;
 using :: remainder;
 using :: remquo;
 using :: copysign;
 using :: nan;
 using :: nextafter;
 using :: scalbn;
 using :: scalbln;
 using :: nexttoward;
 using :: tgamma;

 using :: acoshf;
 using :: asinhf;
 using :: atanhf;
 using :: cbrtf;
 using :: erff;
 using :: erfcf;
 using :: expm1f;
 using :: exp2f;
 using :: hypotf;
 using :: ilogbf;
 using :: lgammaf;
 using :: log1pf;
 using :: log2f;
 using :: logbf;
 using :: llrintf;
 using :: lrintf;
 using :: nearbyintf;
 using :: rintf;
 using :: llroundf;
 using :: lroundf;
 using :: fdimf;
 using :: fmaf;
 using :: fmaxf;
 using :: fminf;
 using :: roundf;
 using :: truncf;
 using :: remainderf;
 using :: remquof;
 using :: copysignf;
 using :: nanf;
 using :: nextafterf;
 using :: scalbnf;
 using :: scalblnf;
 using :: nexttowardf;
 using :: tgammaf;

 using :: acoshl;
 using :: asinhl;
 using :: atanhl;
 using :: cbrtl;
 using :: erfl;
 using :: erfcl;
 using :: expm1l;
 using :: exp2l;
 using :: hypotl;
 using :: ilogbl;
 using :: lgammal;
 using :: log1pl;
 using :: log2l;
 using :: logbl;
 using :: llrintl;
 using :: lrintl;
 using :: nearbyintl;
 using :: rintl;
 using :: llroundl;
 using :: lroundl;
 using :: fdiml;
 using :: fmal;
 using :: fmaxl;
 using :: fminl;
 using :: roundl;
 using :: truncl;
 using :: remainderl;
 using :: remquol;
 using :: copysignl;
 using :: nanl;
 using :: nextafterl;
 using :: scalbnl;
 using :: scalblnl;
 using :: nexttowardl;
 using :: tgammal;

 using :: fpclassify;
 using :: signbit;
 using :: isfinite;
 using :: isinf;
 using :: isnan;
 using :: isnormal;
 using :: isgreater;
 using :: isgreaterequal;
 using :: isless;
 using :: islessequal;
 using :: islessgreater;
 using :: isunordered;
}





























































































































































































































































































































































































































































































































































































#line 1486 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"



#pragma warning(pop)
#pragma pack(pop)

#line 1493 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
#line 1494 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
#line 10552 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

#line 10554 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
#line 10555 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

























#line 10581 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"





























































































































































































































































#line 10835 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__)  double __cdecl _hypot(double x, double y);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__)  float  __cdecl _hypotf(float x, float y);



#line 10842 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"




#line 10847 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool signbit(long double) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__)  int _ldsign(long double);

#line 10851 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"



















#line 10871 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"





#line 10877 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"














extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool signbit(double) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__)  int _dsign(double);


#line 10896 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"



















#line 10916 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"





#line 10922 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"














extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool signbit(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__)  int _fdsign(float);


#line 10941 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"



#line 10945 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
static __inline __declspec(__host__) __declspec(__device__) bool isinf(long double a);
#line 10947 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


















#line 10966 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"














static __inline __declspec(__host__) __declspec(__device__) bool isinf(double a);

#line 10983 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"



















#line 11003 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"















static __inline __declspec(__host__) __declspec(__device__) bool isinf(float a);

#line 11021 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"



#line 11025 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
static __inline __declspec(__host__) __declspec(__device__) bool isnan(long double a);
#line 11027 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

















#line 11045 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"













static __inline __declspec(__host__) __declspec(__device__) bool isnan(double a);

#line 11061 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


















#line 11080 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"














static __inline __declspec(__host__) __declspec(__device__) bool isnan(float a);

#line 11097 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"



#line 11101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
static __inline __declspec(__host__) __declspec(__device__) bool isfinite(long double a);
#line 11103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"



















#line 11123 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"















static __inline __declspec(__host__) __declspec(__device__) bool isfinite(double a);

#line 11141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


















#line 11160 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"














static __inline __declspec(__host__) __declspec(__device__) bool isfinite(float a);

#line 11177 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"




#line 11182 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
template<class T> extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) T _Pow_int(T, int) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long long int abs(long long int) throw();
#line 11185 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

#line 11187 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"



#line 11191 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

#line 11193 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"









#line 11203 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


#line 11206 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"











#line 11218 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"











































#line 11264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long int __cdecl abs(long int) throw();


#line 11268 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl abs(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double   __cdecl abs(double) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl fabs(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl ceil(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl floor(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl sqrt(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl pow(float, float) throw();





























#line 11305 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


template <class _Ty1, class _Ty2, ::std:: enable_if_t< ::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>, int> > [[nodiscard]] __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) ::std:: _Common_float_type_t<_Ty1, _Ty2> __cdecl pow(_Ty1 _Left, _Ty2 _Right) noexcept;



#line 11312 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
#line 11313 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
#line 11314 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl log(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl log10(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl fmod(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl modf(float, float*) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl exp(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl frexp(float, int*) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl ldexp(float, int) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl asin(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl sin(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl sinh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl acos(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl cos(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl cosh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl atan(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl atan2(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl tan(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl tanh(float) throw();
#line 11332 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"










#line 11343 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


#line 11346 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"







#line 11354 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


#line 11357 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"



































































































































































































#line 11553 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl logb(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) int   __cdecl ilogb(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl scalbn(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl scalbln(float, long int) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl exp2(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl expm1(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl log2(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl log1p(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl acosh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl asinh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl atanh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl hypot(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl cbrt(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl erf(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl erfc(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl lgamma(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl tgamma(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl copysign(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl nextafter(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl remainder(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl remquo(float, float, int *) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl round(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long int      __cdecl lround(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long long int __cdecl llround(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl trunc(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl rint(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long int      __cdecl lrint(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long long int __cdecl llrint(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl nearbyint(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl fdim(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl fma(float, float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl fmax(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl fmin(float, float) throw();
#line 11587 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float exp10(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float rsqrt(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float rcbrt(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float sinpi(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float cospi(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void sincospi(const float a, float *const sptr, float *const cptr);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void sincos(const float a, float *const sptr, float *const cptr);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float j0(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float j1(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float jn(const int n, const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float y0(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float y1(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float yn(const int n, const float a);

static inline __declspec(__device__) __declspec(__cudart_builtin__) float cyl_bessel_i0(const float a);

static inline __declspec(__device__) __declspec(__cudart_builtin__) float cyl_bessel_i1(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float erfinv(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float erfcinv(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float normcdfinv(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float normcdf(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float erfcx(const float a);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double copysign(const double a, const float b);

static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double copysign(const float a, const double b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned int min(const unsigned int a, const unsigned int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned int min(const int a, const unsigned int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned int min(const unsigned int a, const int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long int min(const long int a, const long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long int min(const unsigned long int a, const unsigned long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long int min(const long int a, const unsigned long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long int min(const unsigned long int a, const long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long long int min(const long long int a, const long long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int min(const unsigned long long int a, const unsigned long long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int min(const long long int a, const unsigned long long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int min(const unsigned long long int a, const long long int b);










static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float min(const float a, const float b);










static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double min(const double a, const double b);









static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double min(const float a, const double b);









static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double min(const double a, const float b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned int max(const unsigned int a, const unsigned int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned int max(const int a, const unsigned int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned int max(const unsigned int a, const int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long int max(const long int a, const long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long int max(const unsigned long int a, const unsigned long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long int max(const long int a, const unsigned long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long int max(const unsigned long int a, const long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long long int max(const long long int a, const long long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int max(const unsigned long long int a, const unsigned long long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int max(const long long int a, const unsigned long long int b);







static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int max(const unsigned long long int a, const long long int b);










static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float max(const float a, const float b);










static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double max(const double a, const double b);









static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double max(const float a, const double b);









static inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double max(const double a, const float b);










extern "C"{
inline __declspec(__device__) void *__nv_aligned_device_malloc(size_t size, size_t align)
{
  __declspec(__device__) void *__nv_aligned_device_malloc_impl(size_t, size_t);
  return __nv_aligned_device_malloc_impl(size, align);
}
}
#line 11909 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"


















































































































































































































































































#line 12184 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"



#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"


















#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"











































































































#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
















































































































































































#line 178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 78 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"







































































































































































































#line 259 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"




#line 264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"
#line 79 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"

























































#line 137 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"















































































































































































































































































#line 409 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
















#line 426 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"






#line 433 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool isinf(const long double a)
{


#line 438 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
  return isinf<long double>(a);
#line 440 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
}
#line 442 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"






#line 449 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool isinf(const double a)
{


#line 454 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
  return isinf<double>(a);
#line 456 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
}
#line 458 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"






#line 465 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isinf(const float a)
{


#line 470 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
  return isinf<float>(a);
#line 472 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
}
#line 474 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"






#line 481 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool isnan(const long double a)
{


#line 486 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
  return isnan<long double>(a);
#line 488 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
}
#line 490 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"






#line 497 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool isnan(const double a)
{


#line 502 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
  return isnan<double>(a);
#line 504 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
}
#line 506 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"






#line 513 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool isnan(const float a)
{


#line 518 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
  return isnan<float>(a);
#line 520 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
}
#line 522 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"






#line 529 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool isfinite(const long double a)
{


#line 534 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
  return isfinite<long double>(a);
#line 536 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
}
#line 538 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"






#line 545 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool isfinite(const double a)
{


#line 550 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
  return isfinite<double>(a);
#line 552 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
}
#line 554 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"






#line 561 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool isfinite(const float a)
{


#line 566 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
  return isfinite<float>(a);
#line 568 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
}
#line 570 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"

#line 572 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"




#line 577 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"


#line 580 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
















































































































































































#line 757 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"

static inline __declspec(__host__) __declspec(__device__) float exp10(const float a)
{
  return exp10f(a);
}

static inline __declspec(__host__) __declspec(__device__) float rsqrt(const float a)
{
  return rsqrtf(a);
}

static inline __declspec(__host__) __declspec(__device__) float rcbrt(const float a)
{
  return rcbrtf(a);
}

static inline __declspec(__host__) __declspec(__device__) float sinpi(const float a)
{
  return sinpif(a);
}

static inline __declspec(__host__) __declspec(__device__) float cospi(const float a)
{
  return cospif(a);
}

static inline __declspec(__host__) __declspec(__device__) void sincospi(const float a, float *const sptr, float *const cptr)
{
  sincospif(a, sptr, cptr);
}

static inline __declspec(__host__) __declspec(__device__) void sincos(const float a, float *const sptr, float *const cptr)
{
  sincosf(a, sptr, cptr);
}

static inline __declspec(__host__) __declspec(__device__) float j0(const float a)
{
  return j0f(a);
}

static inline __declspec(__host__) __declspec(__device__) float j1(const float a)
{
  return j1f(a);
}

static inline __declspec(__host__) __declspec(__device__) float jn(const int n, const float a)
{
  return jnf(n, a);
}

static inline __declspec(__host__) __declspec(__device__) float y0(const float a)
{
  return y0f(a);
}

static inline __declspec(__host__) __declspec(__device__) float y1(const float a)
{
  return y1f(a);
}

static inline __declspec(__host__) __declspec(__device__) float yn(const int n, const float a)
{ 
  return ynf(n, a);
}

static inline __declspec(__device__) float cyl_bessel_i0(const float a)
{
  return cyl_bessel_i0f(a);
}

static inline __declspec(__device__) float cyl_bessel_i1(const float a)
{
  return cyl_bessel_i1f(a);
}

static inline __declspec(__host__) __declspec(__device__) float erfinv(const float a)
{
  return erfinvf(a);
}

static inline __declspec(__host__) __declspec(__device__) float erfcinv(const float a)
{
  return erfcinvf(a);
}

static inline __declspec(__host__) __declspec(__device__) float normcdfinv(const float a)
{
  return normcdfinvf(a);
}

static inline __declspec(__host__) __declspec(__device__) float normcdf(const float a)
{
  return normcdff(a);
}

static inline __declspec(__host__) __declspec(__device__) float erfcx(const float a)
{
  return erfcxf(a);
}

static inline __declspec(__host__) __declspec(__device__) double copysign(const double a, const float b)
{
  return copysign(a, static_cast<double>(b));
}

static inline __declspec(__host__) __declspec(__device__) double copysign(const float a, const double b)
{
  return copysign(static_cast<double>(a), b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int min(const unsigned int a, const unsigned int b)
{
  return umin(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int min(const int a, const unsigned int b)
{
  return umin(static_cast<unsigned int>(a), b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int min(const unsigned int a, const int b)
{
  return umin(a, static_cast<unsigned int>(b));
}

static inline __declspec(__host__) __declspec(__device__) long int min(const long int a, const long int b)
{
  long int retval;
  

#pragma warning (disable: 4127)
#line 890 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
  
  if (sizeof(long int) == sizeof(int)) {

#pragma warning (default: 4127)
#line 895 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
    retval = static_cast<long int>(min(static_cast<int>(a), static_cast<int>(b)));
  } else {
    retval = static_cast<long int>(llmin(static_cast<long long int>(a), static_cast<long long int>(b)));
  }
  return retval;
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int min(const unsigned long int a, const unsigned long int b)
{
  unsigned long int retval;

#pragma warning (disable: 4127)
#line 908 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {

#pragma warning (default: 4127)
#line 912 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
    retval = static_cast<unsigned long int>(umin(static_cast<unsigned int>(a), static_cast<unsigned int>(b)));
  } else {
    retval = static_cast<unsigned long int>(ullmin(static_cast<unsigned long long int>(a), static_cast<unsigned long long int>(b)));
  }
  return retval;
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int min(const long int a, const unsigned long int b)
{
  unsigned long int retval;

#pragma warning (disable: 4127)
#line 925 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {

#pragma warning (default: 4127)
#line 929 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
    retval = static_cast<unsigned long int>(umin(static_cast<unsigned int>(a), static_cast<unsigned int>(b)));
  } else {
    retval = static_cast<unsigned long int>(ullmin(static_cast<unsigned long long int>(a), static_cast<unsigned long long int>(b)));
  }
  return retval;
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int min(const unsigned long int a, const long int b)
{
  unsigned long int retval;

#pragma warning (disable: 4127)
#line 942 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {

#pragma warning (default: 4127)
#line 946 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
    retval = static_cast<unsigned long int>(umin(static_cast<unsigned int>(a), static_cast<unsigned int>(b)));
  } else {
    retval = static_cast<unsigned long int>(ullmin(static_cast<unsigned long long int>(a), static_cast<unsigned long long int>(b)));
  }
  return retval;
}

static inline __declspec(__host__) __declspec(__device__) long long int min(const long long int a, const long long int b)
{
  return llmin(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int min(const unsigned long long int a, const unsigned long long int b)
{
  return ullmin(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int min(const long long int a, const unsigned long long int b)
{
  return ullmin(static_cast<unsigned long long int>(a), b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int min(const unsigned long long int a, const long long int b)
{
  return ullmin(a, static_cast<unsigned long long int>(b));
}

static inline __declspec(__host__) __declspec(__device__) float min(const float a, const float b)
{
  return fminf(a, b);
}

static inline __declspec(__host__) __declspec(__device__) double min(const double a, const double b)
{
  return fmin(a, b);
}

static inline __declspec(__host__) __declspec(__device__) double min(const float a, const double b)
{
  return fmin(static_cast<double>(a), b);
}

static inline __declspec(__host__) __declspec(__device__) double min(const double a, const float b)
{
  return fmin(a, static_cast<double>(b));
}

static inline __declspec(__host__) __declspec(__device__) unsigned int max(const unsigned int a, const unsigned int b)
{
  return umax(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int max(const int a, const unsigned int b)
{
  return umax(static_cast<unsigned int>(a), b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int max(const unsigned int a, const int b)
{
  return umax(a, static_cast<unsigned int>(b));
}

static inline __declspec(__host__) __declspec(__device__) long int max(const long int a, const long int b)
{
  long int retval;
  

#pragma warning (disable: 4127)
#line 1015 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
  if (sizeof(long int) == sizeof(int)) {

#pragma warning (default: 4127)
#line 1019 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
    retval = static_cast<long int>(max(static_cast<int>(a), static_cast<int>(b)));
  } else {
    retval = static_cast<long int>(llmax(static_cast<long long int>(a), static_cast<long long int>(b)));
  }
  return retval;
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int max(const unsigned long int a, const unsigned long int b)
{
  unsigned long int retval;

#pragma warning (disable: 4127)
#line 1032 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {

#pragma warning (default: 4127)
#line 1036 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
    retval = static_cast<unsigned long int>(umax(static_cast<unsigned int>(a), static_cast<unsigned int>(b)));
  } else {
    retval = static_cast<unsigned long int>(ullmax(static_cast<unsigned long long int>(a), static_cast<unsigned long long int>(b)));
  }
  return retval;
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int max(const long int a, const unsigned long int b)
{
  unsigned long int retval;

#pragma warning (disable: 4127)
#line 1049 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {

#pragma warning (default: 4127)
#line 1053 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
    retval = static_cast<unsigned long int>(umax(static_cast<unsigned int>(a), static_cast<unsigned int>(b)));
  } else {
    retval = static_cast<unsigned long int>(ullmax(static_cast<unsigned long long int>(a), static_cast<unsigned long long int>(b)));
  }
  return retval;
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int max(const unsigned long int a, const long int b)
{
  unsigned long int retval;

#pragma warning (disable: 4127)
#line 1066 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {

#pragma warning (default: 4127)
#line 1070 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
    retval = static_cast<unsigned long int>(umax(static_cast<unsigned int>(a), static_cast<unsigned int>(b)));
  } else {
    retval = static_cast<unsigned long int>(ullmax(static_cast<unsigned long long int>(a), static_cast<unsigned long long int>(b)));
  }
  return retval;
}

static inline __declspec(__host__) __declspec(__device__) long long int max(const long long int a, const long long int b)
{
  return llmax(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int max(const unsigned long long int a, const unsigned long long int b)
{
  return ullmax(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int max(const long long int a, const unsigned long long int b)
{
  return ullmax(static_cast<unsigned long long int>(a), b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int max(const unsigned long long int a, const long long int b)
{
  return ullmax(a, static_cast<unsigned long long int>(b));
}

static inline __declspec(__host__) __declspec(__device__) float max(const float a, const float b)
{
  return fmaxf(a, b);
}

static inline __declspec(__host__) __declspec(__device__) double max(const double a, const double b)
{
  return fmax(a, b);
}

static inline __declspec(__host__) __declspec(__device__) double max(const float a, const double b)
{
  return fmax(static_cast<double>(a), b);
}

static inline __declspec(__host__) __declspec(__device__) double max(const double a, const float b)
{
  return fmax(a, static_cast<double>(b));
}





#pragma warning(disable : 4211)


#line 1125 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"

static inline __declspec(__host__) __declspec(__device__) int min(const int a, const int b)
{
  return (a < b) ? a : b;
}

static inline __declspec(__host__) __declspec(__device__) unsigned int umin(const unsigned int a, const unsigned int b)
{
  return (a < b) ? a : b;
}

static inline __declspec(__host__) __declspec(__device__) long long int llmin(const long long int a, const long long int b)
{
  return (a < b) ? a : b;
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int ullmin(const unsigned long long int a,
                                                    const unsigned long long int b)
{
  return (a < b) ? a : b;
}

static inline __declspec(__host__) __declspec(__device__) int max(const int a, const int b)
{
  return (a > b) ? a : b;
}

static inline __declspec(__host__) __declspec(__device__) unsigned int umax(const unsigned int a, const unsigned int b)
{
  return (a > b) ? a : b;
}

static inline __declspec(__host__) __declspec(__device__) long long int llmax(const long long int a, const long long int b)
{
  return (a > b) ? a : b;
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int ullmax(const unsigned long long int a,
                                                    const unsigned long long int b)
{
  return (a > b) ? a : b;
}


#pragma warning(default: 4211)
#line 1171 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"



#line 1175 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"










#line 1186 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3385 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"

#line 3387 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"




#line 3392 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
#line 12188 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

#line 12190 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"

#line 12192 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"




#line 12197 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
#line 304 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/common_functions.h"

#line 306 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/common_functions.h"




#line 311 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/common_functions.h"
#line 119 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
















#line 76 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"



#line 80 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"











































































































#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
















































































































































































#line 178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
#line 83 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"







































































































































































































#line 259 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"




#line 264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"
#line 84 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"







extern "C"
{









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __mulhi(int x, int y);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __umulhi(unsigned int x, unsigned int y);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __mul64hi(long long int x, long long int y);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __umul64hi(unsigned long long int x, unsigned long long int y);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int_as_float(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float_as_int(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint_as_float(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float_as_uint(float x);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __syncthreads(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __prof_trigger(int);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __threadfence(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __threadfence_block(void);
__declspec(__device__) __declspec(__cudart_builtin__) 


#line 177 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
__declspec(noreturn)
#line 179 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
__declspec(__device_builtin__) void                   __trap(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __brkpt();






















__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __saturatef(float x);




































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __sad(int x, int y, unsigned int z);



































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __usad(unsigned int x, unsigned int y, unsigned int z);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __mul24(int x, int y);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __umul24(unsigned int x, unsigned int y);












__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  fdividef(float x, float y);








































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdividef(float x, float y);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) double                 fdivide(double x, double y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __sinf(float x) ;










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __cosf(float x) ;












__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __tanf(float x) ;














__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) void                   __sincosf(float x, float *sptr, float *cptr) ;
















































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __expf(float x) ;






























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __exp10f(float x) ;
























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __log2f(float x) ;


























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __log10f(float x) ;










































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __logf(float x) ;









































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __powf(float x, float y) ;








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float2int_rn(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float2int_rz(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float2int_ru(float);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float2int_rd(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float2uint_rn(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float2uint_rz(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float2uint_ru(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float2uint_rd(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int2float_rn(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int2float_rz(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int2float_ru(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int2float_rd(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint2float_rn(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint2float_rz(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint2float_ru(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint2float_rd(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __float2ll_rn(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __float2ll_rz(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __float2ll_ru(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __float2ll_rd(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __float2ull_rn(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __float2ull_rz(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __float2ull_ru(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __float2ull_rd(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ll2float_rn(long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ll2float_rz(long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ll2float_ru(long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ll2float_rd(long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ull2float_rn(unsigned long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ull2float_rz(unsigned long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ull2float_ru(unsigned long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ull2float_rd(unsigned long long int x);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fadd_rn(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fadd_rz(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fadd_ru(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fadd_rd(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsub_rn(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsub_rz(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsub_ru(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsub_rd(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmul_rn(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmul_rz(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmul_ru(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmul_rd(float x, float y);
























































































































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmaf_rn(float x, float y, float z);
























































































































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmaf_rz(float x, float y, float z);
























































































































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmaf_ru(float x, float y, float z);
























































































































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmaf_rd(float x, float y, float z);
































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frcp_rn(float x);
































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frcp_rz(float x);
































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frcp_ru(float x);
































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frcp_rd(float x);






























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsqrt_rn(float x);






























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsqrt_rz(float x);






























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsqrt_ru(float x);






























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsqrt_rd(float x);






































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frsqrt_rn(float x);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdiv_rn(float x, float y);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdiv_rz(float x, float y);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdiv_ru(float x, float y);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdiv_rd(float x, float y);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __clz(int x);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __ffs(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __popc(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __brev(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __clzll(long long int x);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __ffsll(long long int x);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __popcll(unsigned long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __brevll(unsigned long long int x);






















__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __byte_perm(unsigned int x, unsigned int y, unsigned int s);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __hadd(int x, int y);












__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __rhadd(int x, int y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __uhadd(unsigned int x, unsigned int y);












__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __urhadd(unsigned int x, unsigned int y);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __double2int_rz(double x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __double2uint_rz(double x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __double2ll_rz(double x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __double2ull_rz(double x);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __pm0(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __pm1(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __pm2(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __pm3(void);







 

















__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabs2(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsss2(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vadd2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vaddss2 (unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vaddus2 (unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vavgs2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vavgu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vhaddu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpeq2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpges2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgeu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgts2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgtu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmples2(unsigned int a, unsigned int b);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpleu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmplts2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpltu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpne2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsdiffu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmaxs2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmaxu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmins2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vminu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vseteq2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetges2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgeu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgts2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgtu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetles2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetleu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetlts2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetltu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetne2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsadu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsub2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsubss2 (unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsubus2 (unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vneg2(unsigned int a);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vnegss2(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsdiffs2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsads2(unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabs4(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsss4(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vadd4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vaddss4 (unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vaddus4 (unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vavgs4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vavgu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vhaddu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpeq4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpges4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgeu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgts4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgtu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmples4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpleu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmplts4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpltu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpne4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsdiffu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmaxs4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmaxu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmins4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vminu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vseteq4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetles4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetleu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetlts4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetltu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetges4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgeu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgts4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgtu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetne4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsadu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsub4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsubss4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsubus4(unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vneg4(unsigned int a);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vnegss4(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsdiffs4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsads4(unsigned int a, unsigned int b);









static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) int __vimax_s32_relu(const int a, const int b);











static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  unsigned int __vimax_s16x2_relu(const unsigned int a, const unsigned int b);








static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  int __vimin_s32_relu(const int a, const int b);











static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  unsigned int __vimin_s16x2_relu(const unsigned int a, const unsigned int b);








static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  int __vimax3_s32(const int a, const int b, const int c);











static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  unsigned int __vimax3_s16x2(const unsigned int a, const unsigned int b, const unsigned int c);








static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  unsigned int __vimax3_u32(const unsigned int a, const unsigned int b, const unsigned int c);











static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  unsigned int __vimax3_u16x2(const unsigned int a, const unsigned int b, const unsigned int c);








static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  int __vimin3_s32(const int a, const int b, const int c);











static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  unsigned int __vimin3_s16x2(const unsigned int a, const unsigned int b, const unsigned int c);








static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  unsigned int __vimin3_u32(const unsigned int a, const unsigned int b, const unsigned int c);











static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  unsigned int __vimin3_u16x2(const unsigned int a, const unsigned int b, const unsigned int c);








static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  int __vimax3_s32_relu(const int a, const int b, const int c);











static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  unsigned int __vimax3_s16x2_relu(const unsigned int a, const unsigned int b, const unsigned int c);








static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  int __vimin3_s32_relu(const int a, const int b, const int c);











static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  unsigned int __vimin3_s16x2_relu(const unsigned int a, const unsigned int b, const unsigned int c);








static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  int __viaddmax_s32(const int a, const int b, const int c);











static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  unsigned int __viaddmax_s16x2(const unsigned int a, const unsigned int b, const unsigned int c);








static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  unsigned int __viaddmax_u32(const unsigned int a, const unsigned int b, const unsigned int c);











static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  unsigned int __viaddmax_u16x2(const unsigned int a, const unsigned int b, const unsigned int c);








static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  int __viaddmin_s32(const int a, const int b, const int c);











static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  unsigned int __viaddmin_s16x2(const unsigned int a, const unsigned int b, const unsigned int c);








static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  unsigned int __viaddmin_u32(const unsigned int a, const unsigned int b, const unsigned int c);











static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  unsigned int __viaddmin_u16x2(const unsigned int a, const unsigned int b, const unsigned int c);









static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  int __viaddmax_s32_relu(const int a, const int b, const int c);











static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  unsigned int __viaddmax_s16x2_relu(const unsigned int a, const unsigned int b, const unsigned int c);









static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  int __viaddmin_s32_relu(const int a, const int b, const int c);











static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  unsigned int __viaddmin_s16x2_relu(const unsigned int a, const unsigned int b, const unsigned int c);








static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  int __vibmax_s32(const int a, const int b, bool* const pred);








static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  unsigned int __vibmax_u32(const unsigned int a, const unsigned int b, bool* const pred);








static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  int __vibmin_s32(const int a, const int b, bool* const pred);








static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  unsigned int __vibmin_u32(const unsigned int a, const unsigned int b, bool* const pred);













static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  unsigned int __vibmax_s16x2(const unsigned int a, const unsigned int b, bool* const pred_hi, bool* const pred_lo);













static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  unsigned int __vibmax_u16x2(const unsigned int a, const unsigned int b, bool* const pred_hi, bool* const pred_lo);













static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  unsigned int __vibmin_s16x2(const unsigned int a, const unsigned int b, bool* const pred_hi, bool* const pred_lo);













static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__)  unsigned int __vibmin_u16x2(const unsigned int a, const unsigned int b, bool* const pred_hi, bool* const pred_lo);






} 





#line 3604 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"








#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
















#line 76 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"



#line 80 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"











































































































#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
















































































































































































#line 178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
#line 83 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"







































































































































































































#line 259 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"




#line 264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"
#line 84 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"




#line 89 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"










#line 100 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
#line 101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) int __vimax_s32_relu(const int a, const int b){





  
  int ans = max(a, b);

  return (ans > 0) ? ans : 0;
#line 113 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) unsigned int __vimax_s16x2_relu(const unsigned int a, const unsigned int b){





  
  
  unsigned short aU_lo = (unsigned short)(a & 0xFFFFU);
  unsigned short aU_hi = (unsigned short)(a >> 16);

  unsigned short bU_lo = (unsigned short)(b & 0xFFFFU);
  unsigned short bU_hi = (unsigned short)(b >> 16);

  
  short aS_lo = *(short*)& aU_lo;
  short aS_hi = *(short*)& aU_hi;

  short bS_lo = *(short*)& bU_lo;
  short bS_hi = *(short*)& bU_hi;

  
  short ansS_lo = (short)max(aS_lo, bS_lo);
  short ansS_hi = (short)max(aS_hi, bS_hi);

  
  if(ansS_lo < 0){ ansS_lo = 0; }
  if(ansS_hi < 0){ ansS_hi = 0; }

  
  unsigned short ansU_lo = *(unsigned short*)& ansS_lo;
  unsigned short ansU_hi = *(unsigned short*)& ansS_hi;

  
  unsigned int ans = ((unsigned int) ansU_lo) | (((unsigned int) ansU_hi) << 16);

  return ans;
#line 153 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) int __vimin_s32_relu(const int a, const int b){





  
    int ans = min(a, b);
    
    return (ans > 0) ? ans : 0;
#line 166 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) unsigned int __vimin_s16x2_relu(const unsigned int a, const unsigned int b){





  
  
  unsigned short aU_lo = (unsigned short)(a & 0xFFFFU);
  unsigned short aU_hi = (unsigned short)(a >> 16);

  unsigned short bU_lo = (unsigned short)(b & 0xFFFFU);
  unsigned short bU_hi = (unsigned short)(b >> 16);

  
  short aS_lo = *(short*)& aU_lo;
  short aS_hi = *(short*)& aU_hi;

  short bS_lo = *(short*)& bU_lo;
  short bS_hi = *(short*)& bU_hi;

  
  short ansS_lo = (short)min(aS_lo, bS_lo);
  short ansS_hi = (short)min(aS_hi, bS_hi);

  
  if(ansS_lo < 0){ ansS_lo = 0; }
  if(ansS_hi < 0){ ansS_hi = 0; }

  
  unsigned short ansU_lo = *(unsigned short*)& ansS_lo;
  unsigned short ansU_hi = *(unsigned short*)& ansS_hi;

  
  unsigned int ans = ((unsigned int) ansU_lo) | (((unsigned int) ansU_hi) << 16);

  return ans;
#line 206 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) int __vimax3_s32(const int a, const int b, const int c){








  
  return max(max(a, b), c);
#line 220 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) unsigned int __vimax3_s16x2(const unsigned int a, const unsigned int b, const unsigned int c){









  
  
  unsigned short aU_lo = (unsigned short)(a & 0xFFFFU);
  unsigned short aU_hi = (unsigned short)(a >> 16);

  unsigned short bU_lo = (unsigned short)(b & 0xFFFFU);
  unsigned short bU_hi = (unsigned short)(b >> 16);

  unsigned short cU_lo = (unsigned short)(c & 0xFFFFU);
  unsigned short cU_hi = (unsigned short)(c >> 16);

  
  short aS_lo = *(short*)& aU_lo;
  short aS_hi = *(short*)& aU_hi;

  short bS_lo = *(short*)& bU_lo;
  short bS_hi = *(short*)& bU_hi;

  short cS_lo = *(short*)& cU_lo;
  short cS_hi = *(short*)& cU_hi;

  
  short ansS_lo = (short)max(max(aS_lo, bS_lo), cS_lo);
  short ansS_hi = (short)max(max(aS_hi, bS_hi), cS_hi);

  
  unsigned short ansU_lo = *(unsigned short*)& ansS_lo;
  unsigned short ansU_hi = *(unsigned short*)& ansS_hi;

  
  unsigned int ans = ((unsigned int) ansU_lo) | (((unsigned int) ansU_hi) << 16);

  return ans;
#line 266 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) unsigned int __vimax3_u32(const unsigned int a, const unsigned int b, const unsigned int c){








  
  return max(max(a, b), c);
#line 280 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) unsigned int __vimax3_u16x2(const unsigned int a, const unsigned int b, const unsigned int c){








  
  
  unsigned short aU_lo = (unsigned short)(a & 0xFFFFU);
  unsigned short aU_hi = (unsigned short)(a >> 16);

  unsigned short bU_lo = (unsigned short)(b & 0xFFFFU);
  unsigned short bU_hi = (unsigned short)(b >> 16);

  unsigned short cU_lo = (unsigned short)(c & 0xFFFFU);
  unsigned short cU_hi = (unsigned short)(c >> 16);

  
  unsigned short ansU_lo = (unsigned short)max(max(aU_lo, bU_lo), cU_lo);
  unsigned short ansU_hi = (unsigned short)max(max(aU_hi, bU_hi), cU_hi);

  
  unsigned int ans = ((unsigned int) ansU_lo) | (((unsigned int) ansU_hi) << 16);

  return ans;
#line 311 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) int __vimin3_s32(const int a, const int b, const int c){








  
  return min(min(a, b), c);
#line 325 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) unsigned int __vimin3_s16x2(const unsigned int a, const unsigned int b, const unsigned int c){








  
  
  unsigned short aU_lo = (unsigned short)(a & 0xFFFFU);
  unsigned short aU_hi = (unsigned short)(a >> 16);

  unsigned short bU_lo = (unsigned short)(b & 0xFFFFU);
  unsigned short bU_hi = (unsigned short)(b >> 16);

  unsigned short cU_lo = (unsigned short)(c & 0xFFFFU);
  unsigned short cU_hi = (unsigned short)(c >> 16);

  
  short aS_lo = *(short*)& aU_lo;
  short aS_hi = *(short*)& aU_hi;

  short bS_lo = *(short*)& bU_lo;
  short bS_hi = *(short*)& bU_hi;

  short cS_lo = *(short*)& cU_lo;
  short cS_hi = *(short*)& cU_hi;

  
  short ansS_lo = (short)min(min(aS_lo, bS_lo), cS_lo);
  short ansS_hi = (short)min(min(aS_hi, bS_hi), cS_hi);

  
  unsigned short ansU_lo = *(unsigned short*)& ansS_lo;
  unsigned short ansU_hi = *(unsigned short*)& ansS_hi;

  
  unsigned int ans = ((unsigned int) ansU_lo) | (((unsigned int) ansU_hi) << 16);

  return ans;
#line 370 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) unsigned int __vimin3_u32(const unsigned int a, const unsigned int b, const unsigned int c){








  
  return min(min(a, b), c);
#line 384 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) unsigned int __vimin3_u16x2(const unsigned int a, const unsigned int b, const unsigned int c){








  
  
  unsigned short aU_lo = (unsigned short)(a & 0xFFFFU);
  unsigned short aU_hi = (unsigned short)(a >> 16);

  unsigned short bU_lo = (unsigned short)(b & 0xFFFFU);
  unsigned short bU_hi = (unsigned short)(b >> 16);

  unsigned short cU_lo = (unsigned short)(c & 0xFFFFU);
  unsigned short cU_hi = (unsigned short)(c >> 16);

  
  unsigned short ansU_lo = (unsigned short)min(min(aU_lo, bU_lo), cU_lo);
  unsigned short ansU_hi = (unsigned short)min(min(aU_hi, bU_hi), cU_hi);

  
  unsigned int ans = ((unsigned int) ansU_lo) | (((unsigned int) ansU_hi) << 16);

  return ans;
#line 415 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) int __vimax3_s32_relu(const int a, const int b, const int c){








  
  int ans = max(max(a, b), c);

  return (ans > 0) ? ans : 0;
#line 431 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) unsigned int __vimax3_s16x2_relu(const unsigned int a, const unsigned int b, const unsigned int c){








  
  
  unsigned short aU_lo = (unsigned short)(a & 0xFFFFU);
  unsigned short aU_hi = (unsigned short)(a >> 16);

  unsigned short bU_lo = (unsigned short)(b & 0xFFFFU);
  unsigned short bU_hi = (unsigned short)(b >> 16);

  unsigned short cU_lo = (unsigned short)(c & 0xFFFFU);
  unsigned short cU_hi = (unsigned short)(c >> 16);

  
  short aS_lo = *(short*)& aU_lo;
  short aS_hi = *(short*)& aU_hi;

  short bS_lo = *(short*)& bU_lo;
  short bS_hi = *(short*)& bU_hi;

  short cS_lo = *(short*)& cU_lo;
  short cS_hi = *(short*)& cU_hi;

  
  short ansS_lo = (short)max(max(aS_lo, bS_lo), cS_lo);
  short ansS_hi = (short)max(max(aS_hi, bS_hi), cS_hi);

  
  if(ansS_lo < 0){ansS_lo = 0;}
  if(ansS_hi < 0){ansS_hi = 0;}

  
  unsigned short ansU_lo = *(unsigned short*)& ansS_lo;
  unsigned short ansU_hi = *(unsigned short*)& ansS_hi;

  
  unsigned int ans = ((unsigned int) ansU_lo) | (((unsigned int) ansU_hi) << 16);

  return ans;
#line 480 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) int __vimin3_s32_relu(const int a, const int b, const int c){








  
  int ans = min(min(a, b), c);

  return (ans > 0) ? ans : 0;
#line 496 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) unsigned int __vimin3_s16x2_relu(const unsigned int a, const unsigned int b, const unsigned int c){








  
  
  unsigned short aU_lo = (unsigned short)(a & 0xFFFFU);
  unsigned short aU_hi = (unsigned short)(a >> 16);

  unsigned short bU_lo = (unsigned short)(b & 0xFFFFU);
  unsigned short bU_hi = (unsigned short)(b >> 16);

  unsigned short cU_lo = (unsigned short)(c & 0xFFFFU);
  unsigned short cU_hi = (unsigned short)(c >> 16);

  
  short aS_lo = *(short*)& aU_lo;
  short aS_hi = *(short*)& aU_hi;

  short bS_lo = *(short*)& bU_lo;
  short bS_hi = *(short*)& bU_hi;

  short cS_lo = *(short*)& cU_lo;
  short cS_hi = *(short*)& cU_hi;

  
  short ansS_lo = (short)min(min(aS_lo, bS_lo), cS_lo);
  short ansS_hi = (short)min(min(aS_hi, bS_hi), cS_hi);

  
  if(ansS_lo < 0){ansS_lo = 0;}
  if(ansS_hi < 0){ansS_hi = 0;}

  
  unsigned short ansU_lo = *(unsigned short*)& ansS_lo;
  unsigned short ansU_hi = *(unsigned short*)& ansS_hi;

  
  unsigned int ans = ((unsigned int) ansU_lo) | (((unsigned int) ansU_hi) << 16);

  return ans;
#line 545 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) int __viaddmax_s32(const int a, const int b, const int c){








  
  return max(a + b, c);
#line 559 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) unsigned int __viaddmax_s16x2(const unsigned int a, const unsigned int b, const unsigned int c){








  
  
  unsigned short aU_lo = (unsigned short)(a & 0xFFFFU);
  unsigned short aU_hi = (unsigned short)(a >> 16);

  unsigned short bU_lo = (unsigned short)(b & 0xFFFFU);
  unsigned short bU_hi = (unsigned short)(b >> 16);

  unsigned short cU_lo = (unsigned short)(c & 0xFFFFU);
  unsigned short cU_hi = (unsigned short)(c >> 16);

  
  short aS_lo = *(short*)& aU_lo;
  short aS_hi = *(short*)& aU_hi;

  short bS_lo = *(short*)& bU_lo;
  short bS_hi = *(short*)& bU_hi;

  short cS_lo = *(short*)& cU_lo;
  short cS_hi = *(short*)& cU_hi;

  
  short ansS_lo = (short)max((short)(aS_lo + bS_lo), cS_lo);
  short ansS_hi = (short)max((short)(aS_hi + bS_hi), cS_hi);

  
  unsigned short ansU_lo = *(unsigned short*)& ansS_lo;
  unsigned short ansU_hi = *(unsigned short*)& ansS_hi;

  
  unsigned int ans = ((unsigned int) ansU_lo) | (((unsigned int) ansU_hi) << 16);

  return ans;  
#line 604 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) unsigned int __viaddmax_u32(const unsigned int a, const unsigned int b, const unsigned int c){








  
  return max(a + b, c);
#line 618 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) unsigned int __viaddmax_u16x2(const unsigned int a, const unsigned int b, const unsigned int c){








  
  
  unsigned short aU_lo = (unsigned short)(a & 0xFFFFU);
  unsigned short aU_hi = (unsigned short)(a >> 16);

  unsigned short bU_lo = (unsigned short)(b & 0xFFFFU);
  unsigned short bU_hi = (unsigned short)(b >> 16);

  unsigned short cU_lo = (unsigned short)(c & 0xFFFFU);
  unsigned short cU_hi = (unsigned short)(c >> 16);

  
  unsigned short ansU_lo = (unsigned short)max((unsigned short)(aU_lo + bU_lo), cU_lo);
  unsigned short ansU_hi = (unsigned short)max((unsigned short)(aU_hi + bU_hi), cU_hi);

  
  unsigned int ans = ((unsigned int) ansU_lo) | (((unsigned int) ansU_hi) << 16);

  return ans;
#line 649 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) int __viaddmin_s32(const int a, const int b, const int c){








  
  return min(a + b, c);
#line 663 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) unsigned int __viaddmin_s16x2(const unsigned int a, const unsigned int b, const unsigned int c){








  
  
  unsigned short aU_lo = (unsigned short)(a & 0xFFFFU);
  unsigned short aU_hi = (unsigned short)(a >> 16);

  unsigned short bU_lo = (unsigned short)(b & 0xFFFFU);
  unsigned short bU_hi = (unsigned short)(b >> 16);

  unsigned short cU_lo = (unsigned short)(c & 0xFFFFU);
  unsigned short cU_hi = (unsigned short)(c >> 16);

  
  short aS_lo = *(short*)& aU_lo;
  short aS_hi = *(short*)& aU_hi;

  short bS_lo = *(short*)& bU_lo;
  short bS_hi = *(short*)& bU_hi;

  short cS_lo = *(short*)& cU_lo;
  short cS_hi = *(short*)& cU_hi;

  
  short ansS_lo = (short)min((short)(aS_lo + bS_lo), cS_lo);
  short ansS_hi = (short)min((short)(aS_hi + bS_hi), cS_hi);

  
  unsigned short ansU_lo = *(unsigned short*)& ansS_lo;
  unsigned short ansU_hi = *(unsigned short*)& ansS_hi;

  
  unsigned int ans = ((unsigned int) ansU_lo) | (((unsigned int) ansU_hi) << 16);

  return ans;
#line 708 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) unsigned int __viaddmin_u32(const unsigned int a, const unsigned int b, const unsigned int c){








  
  return min(a + b, c);
#line 722 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) unsigned int __viaddmin_u16x2(const unsigned int a, const unsigned int b, const unsigned int c){








  
  
  unsigned short aU_lo = (unsigned short)(a & 0xFFFFU);
  unsigned short aU_hi = (unsigned short)(a >> 16);

  unsigned short bU_lo = (unsigned short)(b & 0xFFFFU);
  unsigned short bU_hi = (unsigned short)(b >> 16);

  unsigned short cU_lo = (unsigned short)(c & 0xFFFFU);
  unsigned short cU_hi = (unsigned short)(c >> 16);

  
  unsigned short ansU_lo = (unsigned short)min((unsigned short)(aU_lo + bU_lo), cU_lo);
  unsigned short ansU_hi = (unsigned short)min((unsigned short)(aU_hi + bU_hi), cU_hi);

  
  unsigned int ans = ((unsigned int) ansU_lo) | (((unsigned int) ansU_hi) << 16);

  return ans;
#line 753 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) int __viaddmax_s32_relu(const int a, const int b, const int c){








  
  int ans = max(a + b, c);

  return (ans > 0) ? ans : 0;
#line 769 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) unsigned int __viaddmax_s16x2_relu(const unsigned int a, const unsigned int b, const unsigned int c){








  
  
  unsigned short aU_lo = (unsigned short)(a & 0xFFFFU);
  unsigned short aU_hi = (unsigned short)(a >> 16);

  unsigned short bU_lo = (unsigned short)(b & 0xFFFFU);
  unsigned short bU_hi = (unsigned short)(b >> 16);

  unsigned short cU_lo = (unsigned short)(c & 0xFFFFU);
  unsigned short cU_hi = (unsigned short)(c >> 16);

  
  short aS_lo = *(short*)& aU_lo;
  short aS_hi = *(short*)& aU_hi;

  short bS_lo = *(short*)& bU_lo;
  short bS_hi = *(short*)& bU_hi;

  short cS_lo = *(short*)& cU_lo;
  short cS_hi = *(short*)& cU_hi;

  
  short ansS_lo = (short)max((short)(aS_lo + bS_lo), cS_lo);
  short ansS_hi = (short)max((short)(aS_hi + bS_hi), cS_hi);

  if(ansS_lo < 0){ansS_lo = 0;}
  if(ansS_hi < 0){ansS_hi = 0;}

  
  unsigned short ansU_lo = *(unsigned short*)& ansS_lo;
  unsigned short ansU_hi = *(unsigned short*)& ansS_hi;

  
  unsigned int ans = ((unsigned int) ansU_lo) | (((unsigned int) ansU_hi) << 16);

  return ans;
#line 817 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) int __viaddmin_s32_relu(const int a, const int b, const int c){








  
  int ans = min(a + b, c);

  return (ans > 0) ? ans : 0;
#line 833 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) unsigned int __viaddmin_s16x2_relu(const unsigned int a, const unsigned int b, const unsigned int c){








  
  
  unsigned short aU_lo = (unsigned short)(a & 0xFFFFU);
  unsigned short aU_hi = (unsigned short)(a >> 16);

  unsigned short bU_lo = (unsigned short)(b & 0xFFFFU);
  unsigned short bU_hi = (unsigned short)(b >> 16);

  unsigned short cU_lo = (unsigned short)(c & 0xFFFFU);
  unsigned short cU_hi = (unsigned short)(c >> 16);

  
  short aS_lo = *(short*)& aU_lo;
  short aS_hi = *(short*)& aU_hi;

  short bS_lo = *(short*)& bU_lo;
  short bS_hi = *(short*)& bU_hi;

  short cS_lo = *(short*)& cU_lo;
  short cS_hi = *(short*)& cU_hi;

  
  short ansS_lo = (short)min((short)(aS_lo + bS_lo), cS_lo);
  short ansS_hi = (short)min((short)(aS_hi + bS_hi), cS_hi);

  if(ansS_lo < 0){ansS_lo = 0;}
  if(ansS_hi < 0){ansS_hi = 0;}

  
  unsigned short ansU_lo = *(unsigned short*)& ansS_lo;
  unsigned short ansU_hi = *(unsigned short*)& ansS_hi;

  
  unsigned int ans = ((unsigned int) ansU_lo) | (((unsigned int) ansU_hi) << 16);

  return ans;
#line 881 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}



static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) int __vibmax_s32(const int a, const int b, bool* const pred){












  
  int ans = max(a, b);

  *pred = (a >= b);
  return ans;
#line 904 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) unsigned int __vibmax_u32(const unsigned int a, const unsigned int b, bool* const pred){












  
  unsigned int ans = max(a, b);

  *pred = (a >= b);
  return ans;
#line 925 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}


static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) int __vibmin_s32(const int a, const int b, bool* const pred){












  
  int ans = min(a, b);

  *pred = (a <= b);
  return ans;
#line 947 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}


static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) unsigned int __vibmin_u32(const unsigned int a, const unsigned int b, bool* const pred){












  
  unsigned int ans = min(a, b);

  *pred = (a <= b);
  return ans;
#line 969 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) unsigned int __vibmax_s16x2(const unsigned int a, const unsigned int b, bool* const pred_hi, bool* const pred_lo){



















  
  
  unsigned short aU_lo = (unsigned short)(a & 0xFFFFU);
  unsigned short aU_hi = (unsigned short)(a >> 16);

  unsigned short bU_lo = (unsigned short)(b & 0xFFFFU);
  unsigned short bU_hi = (unsigned short)(b >> 16);

  
  short aS_lo = *(short*)& aU_lo;
  short aS_hi = *(short*)& aU_hi;

  short bS_lo = *(short*)& bU_lo;
  short bS_hi = *(short*)& bU_hi;

  
  short ansS_lo = (short)max(aS_lo, bS_lo);
  short ansS_hi = (short)max(aS_hi, bS_hi);

  *pred_hi = (aS_hi >= bS_hi);
  *pred_lo = (aS_lo >= bS_lo);

  
  unsigned short ansU_lo = *(unsigned short*)& ansS_lo;
  unsigned short ansU_hi = *(unsigned short*)& ansS_hi;

  
  unsigned int ans = ((unsigned int) ansU_lo) | (((unsigned int) ansU_hi) << 16);

  return ans;  
#line 1022 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) unsigned int __vibmax_u16x2(const unsigned int a, const unsigned int b, bool* const pred_hi, bool* const pred_lo){



















  
  
  unsigned short aU_lo = (unsigned short)(a & 0xFFFFU);
  unsigned short aU_hi = (unsigned short)(a >> 16);

  unsigned short bU_lo = (unsigned short)(b & 0xFFFFU);
  unsigned short bU_hi = (unsigned short)(b >> 16);

  
  unsigned short ansU_lo = (unsigned short)max(aU_lo, bU_lo);
  unsigned short ansU_hi = (unsigned short)max(aU_hi, bU_hi);

  *pred_hi = (aU_hi >= bU_hi);
  *pred_lo = (aU_lo >= bU_lo);

  
  unsigned int ans = ((unsigned int) ansU_lo) | (((unsigned int) ansU_hi) << 16);

  return ans;  
#line 1064 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) unsigned int __vibmin_s16x2(const unsigned int a, const unsigned int b, bool* const pred_hi, bool* const pred_lo){



















  
  
  unsigned short aU_lo = (unsigned short)(a & 0xFFFFU);
  unsigned short aU_hi = (unsigned short)(a >> 16);

  unsigned short bU_lo = (unsigned short)(b & 0xFFFFU);
  unsigned short bU_hi = (unsigned short)(b >> 16);

  
  short aS_lo = *(short*)& aU_lo;
  short aS_hi = *(short*)& aU_hi;

  short bS_lo = *(short*)& bU_lo;
  short bS_hi = *(short*)& bU_hi;

  
  short ansS_lo = (short)min(aS_lo, bS_lo);
  short ansS_hi = (short)min(aS_hi, bS_hi);

  *pred_hi = (aS_hi <= bS_hi);
  *pred_lo = (aS_lo <= bS_lo);

  
  unsigned short ansU_lo = *(unsigned short*)& ansS_lo;
  unsigned short ansU_hi = *(unsigned short*)& ansS_hi;

  
  unsigned int ans = ((unsigned int) ansU_lo) | (((unsigned int) ansU_hi) << 16);

  return ans;  
#line 1117 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}

static __inline __declspec(__device__) __declspec(__host__) __declspec(__cudart_builtin__) unsigned int __vibmin_u16x2(const unsigned int a, const unsigned int b, bool* const pred_hi, bool* const pred_lo){



















  
  
  unsigned short aU_lo = (unsigned short)(a & 0xFFFFU);
  unsigned short aU_hi = (unsigned short)(a >> 16);

  unsigned short bU_lo = (unsigned short)(b & 0xFFFFU);
  unsigned short bU_hi = (unsigned short)(b >> 16);

  
  unsigned short ansU_lo = (unsigned short)min(aU_lo, bU_lo);
  unsigned short ansU_hi = (unsigned short)min(aU_hi, bU_hi);

  *pred_hi = (aU_hi <= bU_hi);
  *pred_lo = (aU_lo <= bU_lo);

  
  unsigned int ans = ((unsigned int) ansU_lo) | (((unsigned int) ansU_hi) << 16);

  return ans;  
#line 1159 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
}













#line 1174 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"




#line 1179 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
#line 3613 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
#line 3614 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"






















































#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"

#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"

#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"









#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 13141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
#line 70 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"







#line 78 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
























#line 103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"







static __inline __declspec(__device__) int atomicAdd(int *address, int val) { }

static __inline __declspec(__device__) unsigned int atomicAdd(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__) int atomicSub(int *address, int val) { }

static __inline __declspec(__device__) unsigned int atomicSub(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__) int atomicExch(int *address, int val) { }

static __inline __declspec(__device__) unsigned int atomicExch(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__) float atomicExch(float *address, float val) { }

static __inline __declspec(__device__) int atomicMin(int *address, int val) { }

static __inline __declspec(__device__) unsigned int atomicMin(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__) int atomicMax(int *address, int val) { }

static __inline __declspec(__device__) unsigned int atomicMax(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__) unsigned int atomicInc(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__) unsigned int atomicDec(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__) int atomicAnd(int *address, int val) { }

static __inline __declspec(__device__) unsigned int atomicAnd(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__) int atomicOr(int *address, int val) { }

static __inline __declspec(__device__) unsigned int atomicOr(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__) int atomicXor(int *address, int val) { }

static __inline __declspec(__device__) unsigned int atomicXor(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__) int atomicCAS(int *address, int compare, int val) { }

static __inline __declspec(__device__) unsigned int atomicCAS(unsigned int *address, unsigned int compare, unsigned int val) { }







#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 13141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
#line 159 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"







#line 167 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"




#line 172 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"

#line 174 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"

#line 176 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"

extern "C"
{




#line 184 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
extern __declspec(__device__) __declspec(__device_builtin__) __declspec(deprecated("__any""() is deprecated in favor of ""__any""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) int __any(int cond);
extern __declspec(__device__) __declspec(__device_builtin__) __declspec(deprecated("__all""() is deprecated in favor of ""__all""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) int __all(int cond);
}








static __inline __declspec(__device__) unsigned long long int atomicAdd(unsigned long long int *address, unsigned long long int val) { }

static __inline __declspec(__device__) unsigned long long int atomicExch(unsigned long long int *address, unsigned long long int val) { }

static __inline __declspec(__device__) unsigned long long int atomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val) { }

static __inline __declspec(__device__) __declspec(deprecated("__any""() is deprecated in favor of ""__any""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) bool any(bool cond) { }

static __inline __declspec(__device__) __declspec(deprecated("__all""() is deprecated in favor of ""__all""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) bool all(bool cond) { }




#line 209 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"






#line 216 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"

#line 218 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
#line 3616 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.h"




















#line 80 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.h"

#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.h"

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"











































































































#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
















































































































































































#line 178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 84 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
#line 85 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"







































































































































































































#line 259 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"




#line 264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"
#line 86 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.h"

extern "C"
{








extern __declspec(__device__) __declspec(__device_builtin__) long long int         __double_as_longlong(double x);








extern __declspec(__device__) __declspec(__device_builtin__) double                __longlong_as_double(long long int x);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rn(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rz(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_ru(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rd(double x, double y, double z);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rz(double x, double y);










 
extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rd(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rz(double x, double y);










 
extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rd(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rz(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rd(double x, double y);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rz(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_rd(double x);







extern __declspec(__device__) __declspec(__device_builtin__) double                 __int2double_rn(int x);







extern __declspec(__device__) __declspec(__device_builtin__) double                 __uint2double_rn(unsigned int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rn(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rz(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_ru(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rd(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rn(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rz(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_ru(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rd(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __double2hiint(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __double2loint(double x);









extern __declspec(__device__) __declspec(__device_builtin__) double                 __hiloint2double(int hi, int lo);
}







static __inline __declspec(__device__) double fma(double a, double b, double c, enum cudaRoundMode mode);

static __inline __declspec(__device__) double dmul(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double dadd(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double dsub(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) int double2int(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) unsigned int double2uint(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) long long int double2ll(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) unsigned long long int double2ull(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) double ll2double(long long int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double ull2double(unsigned long long int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double int2double(int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double uint2double(unsigned int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double float2double(float a, enum cudaRoundMode mode = cudaRoundNearest);



#line 1176 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.hpp"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.hpp"




















#line 80 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.hpp"

#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.hpp"

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"











































































































#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
















































































































































































#line 178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 84 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.hpp"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
#line 85 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.hpp"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"







































































































































































































#line 259 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"




#line 264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"
#line 86 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.hpp"







static __inline __declspec(__device__) double fma(double a, double b, double c, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __fma_rz(a, b, c) :
         mode == cudaRoundPosInf ? __fma_ru(a, b, c) :
         mode == cudaRoundMinInf ? __fma_rd(a, b, c) :
                                   __fma_rn(a, b, c);
}

static __inline __declspec(__device__) double dmul(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __dmul_rz(a, b) :
         mode == cudaRoundPosInf ? __dmul_ru(a, b) :
         mode == cudaRoundMinInf ? __dmul_rd(a, b) :
                                   __dmul_rn(a, b);
}

static __inline __declspec(__device__) double dadd(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __dadd_rz(a, b) :
         mode == cudaRoundPosInf ? __dadd_ru(a, b) :
         mode == cudaRoundMinInf ? __dadd_rd(a, b) :
                                   __dadd_rn(a, b);
}

static __inline __declspec(__device__) double dsub(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __dsub_rz(a, b) :
         mode == cudaRoundPosInf ? __dsub_ru(a, b) :
         mode == cudaRoundMinInf ? __dsub_rd(a, b) :
                                   __dsub_rn(a, b);
}

static __inline __declspec(__device__) int double2int(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2int_rn(a) :
         mode == cudaRoundPosInf  ? __double2int_ru(a) :
         mode == cudaRoundMinInf  ? __double2int_rd(a) :
                                    __double2int_rz(a);
}

static __inline __declspec(__device__) unsigned int double2uint(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2uint_rn(a) :
         mode == cudaRoundPosInf  ? __double2uint_ru(a) :
         mode == cudaRoundMinInf  ? __double2uint_rd(a) :
                                    __double2uint_rz(a);
}

static __inline __declspec(__device__) long long int double2ll(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2ll_rn(a) :
         mode == cudaRoundPosInf  ? __double2ll_ru(a) :
         mode == cudaRoundMinInf  ? __double2ll_rd(a) :
                                    __double2ll_rz(a);
}

static __inline __declspec(__device__) unsigned long long int double2ull(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2ull_rn(a) :
         mode == cudaRoundPosInf  ? __double2ull_ru(a) :
         mode == cudaRoundMinInf  ? __double2ull_rd(a) :
                                    __double2ull_rz(a);
}

static __inline __declspec(__device__) double ll2double(long long int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __ll2double_rz(a) :
         mode == cudaRoundPosInf ? __ll2double_ru(a) :
         mode == cudaRoundMinInf ? __ll2double_rd(a) :
                                   __ll2double_rn(a);
}

static __inline __declspec(__device__) double ull2double(unsigned long long int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __ull2double_rz(a) :
         mode == cudaRoundPosInf ? __ull2double_ru(a) :
         mode == cudaRoundMinInf ? __ull2double_rd(a) :
                                   __ull2double_rn(a);
}

static __inline __declspec(__device__) double int2double(int a, enum cudaRoundMode mode)
{
  return (double)a;
}

static __inline __declspec(__device__) double uint2double(unsigned int a, enum cudaRoundMode mode)
{
  return (double)a;
}

static __inline __declspec(__device__) double float2double(float a, enum cudaRoundMode mode)
{
  return (double)a;
}



#line 191 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.hpp"

#line 193 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.hpp"




#line 198 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.hpp"
#line 1179 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.h"
#line 1180 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.h"

#line 1182 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.h"




#line 1187 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.h"
#line 3617 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_atomic_functions.h"






















































#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_atomic_functions.h"

#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_atomic_functions.h"

#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_atomic_functions.h"









#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 13141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
#line 70 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_atomic_functions.h"




#line 75 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_atomic_functions.h"







#line 83 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_atomic_functions.h"







#line 91 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_atomic_functions.h"




#line 96 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_atomic_functions.h"







static __inline __declspec(__device__) float atomicAdd(float *address, float val) { }

#line 106 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_atomic_functions.h"






#line 113 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_atomic_functions.h"

#line 115 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_atomic_functions.h"
#line 3618 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_atomic_functions.h"






















































#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_atomic_functions.h"

#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_atomic_functions.h"











#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 13141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
#line 70 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_atomic_functions.h"




#line 75 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_atomic_functions.h"





#line 81 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_atomic_functions.h"





















#line 103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_atomic_functions.h"







static __inline __declspec(__device__) long long atomicMin(long long *address, long long val) { }

static __inline __declspec(__device__) long long atomicMax(long long *address, long long val) { }

static __inline __declspec(__device__) long long atomicAnd(long long *address, long long val) { }

static __inline __declspec(__device__) long long atomicOr(long long *address, long long val) { }

static __inline __declspec(__device__) long long atomicXor(long long *address, long long val) { }

static __inline __declspec(__device__) unsigned long long atomicMin(unsigned long long *address, unsigned long long val) { }

static __inline __declspec(__device__) unsigned long long atomicMax(unsigned long long *address, unsigned long long val) { }

static __inline __declspec(__device__) unsigned long long atomicAnd(unsigned long long *address, unsigned long long val) { }

static __inline __declspec(__device__) unsigned long long atomicOr(unsigned long long *address, unsigned long long val) { }

static __inline __declspec(__device__) unsigned long long atomicXor(unsigned long long *address, unsigned long long val) { }

#line 131 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_atomic_functions.h"

#line 133 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_atomic_functions.h"






#line 140 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_atomic_functions.h"

#line 142 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_atomic_functions.h"
#line 3619 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_35_atomic_functions.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_atomic_functions.h"












































































































































#line 142 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_atomic_functions.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_35_atomic_functions.h"

#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_35_atomic_functions.h"
#line 3620 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"























































#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"

#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"

#line 61 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"











#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 13141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
#line 73 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"







#line 81 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"


































































































































































































































static __inline __declspec(__device__) double atomicAdd(double *address, double val) { }

static __inline __declspec(__device__)
int atomicAdd_block(int *address, int val) { }

static __inline __declspec(__device__)
int atomicAdd_system(int *address, int val) { }

static __inline __declspec(__device__)
unsigned int atomicAdd_block(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__)
unsigned int atomicAdd_system(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__)
unsigned long long atomicAdd_block(unsigned long long *address, unsigned long long val) { }

static __inline __declspec(__device__)
unsigned long long atomicAdd_system(unsigned long long *address, unsigned long long val) { }

static __inline __declspec(__device__)
float atomicAdd_block(float *address, float val) { }

static __inline __declspec(__device__)
float atomicAdd_system(float *address, float val) { }

static __inline __declspec(__device__)
double atomicAdd_block(double *address, double val) { }

static __inline __declspec(__device__)
double atomicAdd_system(double *address, double val) { }

static __inline __declspec(__device__)
int atomicSub_block(int *address, int val) { }

static __inline __declspec(__device__)
int atomicSub_system(int *address, int val) { }

static __inline __declspec(__device__)
unsigned int atomicSub_block(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__)
unsigned int atomicSub_system(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__)
int atomicExch_block(int *address, int val) { }

static __inline __declspec(__device__)
int atomicExch_system(int *address, int val) { }

static __inline __declspec(__device__)
unsigned int atomicExch_block(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__)
unsigned int atomicExch_system(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__)
unsigned long long atomicExch_block(unsigned long long *address, unsigned long long val) { }

static __inline __declspec(__device__)
unsigned long long atomicExch_system(unsigned long long *address, unsigned long long val) { }

static __inline __declspec(__device__)
float atomicExch_block(float *address, float val) { }

static __inline __declspec(__device__)
float atomicExch_system(float *address, float val) { }

static __inline __declspec(__device__)
int atomicMin_block(int *address, int val) { }

static __inline __declspec(__device__)
int atomicMin_system(int *address, int val) { }

static __inline __declspec(__device__)
long long atomicMin_block(long long *address, long long val) { }

static __inline __declspec(__device__)
long long atomicMin_system(long long *address, long long val) { }

static __inline __declspec(__device__)
unsigned int atomicMin_block(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__)
unsigned int atomicMin_system(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__)
unsigned long long atomicMin_block(unsigned long long *address, unsigned long long val) { }

static __inline __declspec(__device__)
unsigned long long atomicMin_system(unsigned long long *address, unsigned long long val) { }

static __inline __declspec(__device__)
int atomicMax_block(int *address, int val) { }

static __inline __declspec(__device__)
int atomicMax_system(int *address, int val) { }

static __inline __declspec(__device__)
long long atomicMax_block(long long *address, long long val) { }

static __inline __declspec(__device__)
long long atomicMax_system(long long *address, long long val) { }

static __inline __declspec(__device__)
unsigned int atomicMax_block(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__)
unsigned int atomicMax_system(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__)
unsigned long long atomicMax_block(unsigned long long *address, unsigned long long val) { }

static __inline __declspec(__device__)
unsigned long long atomicMax_system(unsigned long long *address, unsigned long long val) { }

static __inline __declspec(__device__)
unsigned int atomicInc_block(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__)
unsigned int atomicInc_system(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__)
unsigned int atomicDec_block(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__)
unsigned int atomicDec_system(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__)
int atomicCAS_block(int *address, int compare, int val) { }

static __inline __declspec(__device__)
int atomicCAS_system(int *address, int compare, int val) { }

static __inline __declspec(__device__)
unsigned int atomicCAS_block(unsigned int *address, unsigned int compare,
                             unsigned int val) { }

static __inline __declspec(__device__)
unsigned int atomicCAS_system(unsigned int *address, unsigned int compare,
                              unsigned int val) { }

static __inline __declspec(__device__)
unsigned long long int atomicCAS_block(unsigned long long int *address,
                                       unsigned long long int compare,
                                       unsigned long long int val) { }

static __inline __declspec(__device__)
unsigned long long int atomicCAS_system(unsigned long long int *address,
                                        unsigned long long int compare,
                                        unsigned long long int val) { }

static __inline __declspec(__device__)
int atomicAnd_block(int *address, int val) { }

static __inline __declspec(__device__)
int atomicAnd_system(int *address, int val) { }

static __inline __declspec(__device__)
long long atomicAnd_block(long long *address, long long val) { }

static __inline __declspec(__device__)
long long atomicAnd_system(long long *address, long long val) { }

static __inline __declspec(__device__)
unsigned int atomicAnd_block(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__)
unsigned int atomicAnd_system(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__)
unsigned long long atomicAnd_block(unsigned long long *address, unsigned long long val) { }

static __inline __declspec(__device__)
unsigned long long atomicAnd_system(unsigned long long *address, unsigned long long val) { }

static __inline __declspec(__device__)
int atomicOr_block(int *address, int val) { }

static __inline __declspec(__device__)
int atomicOr_system(int *address, int val) { }

static __inline __declspec(__device__)
long long atomicOr_block(long long *address, long long val) { }

static __inline __declspec(__device__)
long long atomicOr_system(long long *address, long long val) { }

static __inline __declspec(__device__)
unsigned int atomicOr_block(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__)
unsigned int atomicOr_system(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__)
unsigned long long atomicOr_block(unsigned long long *address, unsigned long long val) { }

static __inline __declspec(__device__)
unsigned long long atomicOr_system(unsigned long long *address, unsigned long long val) { }

static __inline __declspec(__device__)
int atomicXor_block(int *address, int val) { }

static __inline __declspec(__device__)
int atomicXor_system(int *address, int val) { }

static __inline __declspec(__device__)
long long atomicXor_block(long long *address, long long val) { }

static __inline __declspec(__device__)
long long atomicXor_system(long long *address, long long val) { }

static __inline __declspec(__device__)
unsigned int atomicXor_block(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__)
unsigned int atomicXor_system(unsigned int *address, unsigned int val) { }

static __inline __declspec(__device__)
unsigned long long atomicXor_block(unsigned long long *address, unsigned long long val) { }

static __inline __declspec(__device__)
unsigned long long atomicXor_system(unsigned long long *address, unsigned long long val) { }

#line 532 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"

#line 534 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"






#line 541 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"

#line 543 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"

#line 3621 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"






















































#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"

#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"









#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 13141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"




#line 73 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"





#line 79 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"







#line 87 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"




#line 92 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"

#line 94 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"

#line 96 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"

extern "C"
{
extern __declspec(__device__) __declspec(__device_builtin__) void                   __threadfence_system(void);











extern __declspec(__device__) __declspec(__device_builtin__) double                __ddiv_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __ddiv_rz(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __ddiv_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __ddiv_rd(double x, double y);

































extern __declspec(__device__) __declspec(__device_builtin__) double                __drcp_rn(double x);

































extern __declspec(__device__) __declspec(__device_builtin__) double                __drcp_rz(double x);

































extern __declspec(__device__) __declspec(__device_builtin__) double                __drcp_ru(double x);

































extern __declspec(__device__) __declspec(__device_builtin__) double                __drcp_rd(double x);































extern __declspec(__device__) __declspec(__device_builtin__) double                __dsqrt_rn(double x);































extern __declspec(__device__) __declspec(__device_builtin__) double                __dsqrt_rz(double x);































extern __declspec(__device__) __declspec(__device_builtin__) double                __dsqrt_ru(double x);































extern __declspec(__device__) __declspec(__device_builtin__) double                __dsqrt_rd(double x);
extern __declspec(__device__) __declspec(__device_builtin__) __declspec(deprecated("__ballot""() is deprecated in favor of ""__ballot""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned int __ballot(int);
extern __declspec(__device__) __declspec(__device_builtin__) int                   __syncthreads_count(int);
extern __declspec(__device__) __declspec(__device_builtin__) int                   __syncthreads_and(int);
extern __declspec(__device__) __declspec(__device_builtin__) int                   __syncthreads_or(int);
extern __declspec(__device__) __declspec(__device_builtin__) long long int         clock64(void);









extern __declspec(__device__) __declspec(__device_builtin__) float                  __fmaf_ieee_rn(float x, float y, float z);








extern __declspec(__device__) __declspec(__device_builtin__) float                  __fmaf_ieee_rd(float x, float y, float z);








extern __declspec(__device__) __declspec(__device_builtin__) float                  __fmaf_ieee_ru(float x, float y, float z);








extern __declspec(__device__) __declspec(__device_builtin__) float                  __fmaf_ieee_rz(float x, float y, float z);












extern __declspec(__device__) __declspec(__device_builtin__) long long int         __double_as_longlong(double x);








extern __declspec(__device__) __declspec(__device_builtin__) double                __longlong_as_double(long long int x);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rn(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rz(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_ru(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rd(double x, double y, double z);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rz(double x, double y);










 
extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rd(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rz(double x, double y);










 
extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rd(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rz(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rd(double x, double y);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rz(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_rd(double x);







extern __declspec(__device__) __declspec(__device_builtin__) double                 __int2double_rn(int x);







extern __declspec(__device__) __declspec(__device_builtin__) double                 __uint2double_rn(unsigned int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rn(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rz(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_ru(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rd(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rn(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rz(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_ru(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rd(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __double2hiint(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __double2loint(double x);









extern __declspec(__device__) __declspec(__device_builtin__) double                 __hiloint2double(int hi, int lo);


}




#line 1516 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"






static __inline __declspec(__device__) __declspec(deprecated("__ballot""() is deprecated in favor of ""__ballot""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned int ballot(bool pred) { }

static __inline __declspec(__device__) int syncthreads_count(bool pred) { }

static __inline __declspec(__device__) bool syncthreads_and(bool pred) { }

static __inline __declspec(__device__) bool syncthreads_or(bool pred) { }




static __inline __declspec(__device__) unsigned int __isGlobal(const void *ptr) { }
static __inline __declspec(__device__) unsigned int __isShared(const void *ptr) { }
static __inline __declspec(__device__) unsigned int __isConstant(const void *ptr) { }
static __inline __declspec(__device__) unsigned int __isLocal(const void *ptr) { }

static __inline __declspec(__device__) unsigned int __isGridConstant(const void *ptr) { }
#line 1540 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"
static __inline __declspec(__device__) size_t __cvta_generic_to_global(const void *ptr) { }
static __inline __declspec(__device__) size_t __cvta_generic_to_shared(const void *ptr) { }
static __inline __declspec(__device__) size_t __cvta_generic_to_constant(const void *ptr) { }
static __inline __declspec(__device__) size_t __cvta_generic_to_local(const void *ptr) { }

static __inline __declspec(__device__) size_t __cvta_generic_to_grid_constant(const void *ptr) { }
#line 1547 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"

static __inline __declspec(__device__) void * __cvta_global_to_generic(size_t rawbits) { }
static __inline __declspec(__device__) void * __cvta_shared_to_generic(size_t rawbits) { }
static __inline __declspec(__device__) void * __cvta_constant_to_generic(size_t rawbits) { }
static __inline __declspec(__device__) void * __cvta_local_to_generic(size_t rawbits) { }

static __inline __declspec(__device__) void * __cvta_grid_constant_to_generic(size_t rawbits) { }
#line 1555 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"
#line 1556 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"






#line 1563 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"
#line 1564 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"
#line 3622 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"






















































#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"

#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"

#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"











#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 13141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
#line 72 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"







#line 80 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"












#line 93 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"







#line 101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"





#line 107 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"

static __declspec(__device__) __inline unsigned  __fns(unsigned mask, unsigned base, int offset) { }
static __declspec(__device__) __inline void  __barrier_sync(unsigned id) { }
static __declspec(__device__) __inline void  __barrier_sync_count(unsigned id, unsigned cnt) { }
static __declspec(__device__) __inline void  __syncwarp(unsigned mask=0xFFFFFFFF) { }
static __declspec(__device__) __inline int __all_sync(unsigned mask, int pred) { }
static __declspec(__device__) __inline int __any_sync(unsigned mask, int pred) { }
static __declspec(__device__) __inline int __uni_sync(unsigned mask, int pred) { }
static __declspec(__device__) __inline unsigned __ballot_sync(unsigned mask, int pred) { }
static __declspec(__device__) __inline unsigned __activemask() { }








static __declspec(__device__) __inline __declspec(deprecated("__shfl""() is deprecated in favor of ""__shfl""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) int __shfl(int var, int srcLane, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl""() is deprecated in favor of ""__shfl""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned int __shfl(unsigned int var, int srcLane, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl_up""() is deprecated in favor of ""__shfl_up""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) int __shfl_up(int var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl_up""() is deprecated in favor of ""__shfl_up""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned int __shfl_up(unsigned int var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl_down""() is deprecated in favor of ""__shfl_down""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) int __shfl_down(int var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl_down""() is deprecated in favor of ""__shfl_down""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned int __shfl_down(unsigned int var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl_xor""() is deprecated in favor of ""__shfl_xor""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) int __shfl_xor(int var, int laneMask, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl_xor""() is deprecated in favor of ""__shfl_xor""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned int __shfl_xor(unsigned int var, int laneMask, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl""() is deprecated in favor of ""__shfl""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) float __shfl(float var, int srcLane, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl_up""() is deprecated in favor of ""__shfl_up""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) float __shfl_up(float var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl_down""() is deprecated in favor of ""__shfl_down""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) float __shfl_down(float var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl_xor""() is deprecated in favor of ""__shfl_xor""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) float __shfl_xor(float var, int laneMask, int width=32) { }
#line 138 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"

static __declspec(__device__) __inline int __shfl_sync(unsigned mask, int var, int srcLane, int width=32) { }
static __declspec(__device__) __inline unsigned int __shfl_sync(unsigned mask, unsigned int var, int srcLane, int width=32) { }
static __declspec(__device__) __inline int __shfl_up_sync(unsigned mask, int var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline unsigned int __shfl_up_sync(unsigned mask, unsigned int var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline int __shfl_down_sync(unsigned mask, int var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline unsigned int __shfl_down_sync(unsigned mask, unsigned int var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline int __shfl_xor_sync(unsigned mask, int var, int laneMask, int width=32) { }
static __declspec(__device__) __inline unsigned int __shfl_xor_sync(unsigned mask, unsigned int var, int laneMask, int width=32) { }
static __declspec(__device__) __inline float __shfl_sync(unsigned mask, float var, int srcLane, int width=32) { }
static __declspec(__device__) __inline float __shfl_up_sync(unsigned mask, float var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline float __shfl_down_sync(unsigned mask, float var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline float __shfl_xor_sync(unsigned mask, float var, int laneMask, int width=32) { }



static __declspec(__device__) __inline __declspec(deprecated("__shfl""() is deprecated in favor of ""__shfl""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned long long __shfl(unsigned long long var, int srcLane, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl""() is deprecated in favor of ""__shfl""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) long long __shfl(long long var, int srcLane, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl_up""() is deprecated in favor of ""__shfl_up""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) long long __shfl_up(long long var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl_up""() is deprecated in favor of ""__shfl_up""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned long long __shfl_up(unsigned long long var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl_down""() is deprecated in favor of ""__shfl_down""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) long long __shfl_down(long long var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl_down""() is deprecated in favor of ""__shfl_down""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned long long __shfl_down(unsigned long long var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl_xor""() is deprecated in favor of ""__shfl_xor""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) long long __shfl_xor(long long var, int laneMask, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl_xor""() is deprecated in favor of ""__shfl_xor""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl""() is deprecated in favor of ""__shfl""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) double __shfl(double var, int srcLane, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl_up""() is deprecated in favor of ""__shfl_up""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) double __shfl_up(double var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl_down""() is deprecated in favor of ""__shfl_down""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) double __shfl_down(double var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl_xor""() is deprecated in favor of ""__shfl_xor""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) double __shfl_xor(double var, int laneMask, int width=32) { }
#line 167 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"

static __declspec(__device__) __inline long long __shfl_sync(unsigned mask, long long var, int srcLane, int width=32) { }
static __declspec(__device__) __inline unsigned long long __shfl_sync(unsigned mask, unsigned long long var, int srcLane, int width=32) { }
static __declspec(__device__) __inline long long __shfl_up_sync(unsigned mask, long long var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline unsigned long long __shfl_up_sync(unsigned mask, unsigned long long var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline long long __shfl_down_sync(unsigned mask, long long var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline unsigned long long __shfl_down_sync(unsigned mask, unsigned long long var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline long long __shfl_xor_sync(unsigned mask, long long var, int laneMask, int width=32) { }
static __declspec(__device__) __inline unsigned long long __shfl_xor_sync(unsigned mask, unsigned long long var, int laneMask, int width=32) { }
static __declspec(__device__) __inline double __shfl_sync(unsigned mask, double var, int srcLane, int width=32) { }
static __declspec(__device__) __inline double __shfl_up_sync(unsigned mask, double var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline double __shfl_down_sync(unsigned mask, double var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline double __shfl_xor_sync(unsigned mask, double var, int laneMask, int width=32) { }



static __declspec(__device__) __inline __declspec(deprecated("__shfl""() is deprecated in favor of ""__shfl""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) long __shfl(long var, int srcLane, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl""() is deprecated in favor of ""__shfl""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned long __shfl(unsigned long var, int srcLane, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl_up""() is deprecated in favor of ""__shfl_up""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) long __shfl_up(long var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl_up""() is deprecated in favor of ""__shfl_up""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned long __shfl_up(unsigned long var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl_down""() is deprecated in favor of ""__shfl_down""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) long __shfl_down(long var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl_down""() is deprecated in favor of ""__shfl_down""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned long __shfl_down(unsigned long var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl_xor""() is deprecated in favor of ""__shfl_xor""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) long __shfl_xor(long var, int laneMask, int width=32) { }
static __declspec(__device__) __inline __declspec(deprecated("__shfl_xor""() is deprecated in favor of ""__shfl_xor""_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).")) unsigned long __shfl_xor(unsigned long var, int laneMask, int width=32) { }
#line 192 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"

static __declspec(__device__) __inline long __shfl_sync(unsigned mask, long var, int srcLane, int width=32) { }
static __declspec(__device__) __inline unsigned long __shfl_sync(unsigned mask, unsigned long var, int srcLane, int width=32) { }
static __declspec(__device__) __inline long __shfl_up_sync(unsigned mask, long var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline unsigned long __shfl_up_sync(unsigned mask, unsigned long var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline long __shfl_down_sync(unsigned mask, long var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline unsigned long __shfl_down_sync(unsigned mask, unsigned long var, unsigned int delta, int width=32) { }
static __declspec(__device__) __inline long __shfl_xor_sync(unsigned mask, long var, int laneMask, int width=32) { }
static __declspec(__device__) __inline unsigned long __shfl_xor_sync(unsigned mask, unsigned long var, int laneMask, int width=32) { }







#line 209 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"

#line 211 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"

#line 213 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"






#line 220 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"

#line 222 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
#line 3623 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"






















































#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"

#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"











#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 13141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
#line 70 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"



#line 74 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"

#line 76 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"











static __declspec(__device__) __inline long __ldg(const long *ptr) { }
static __declspec(__device__) __inline unsigned long __ldg(const unsigned long *ptr) { }

static __declspec(__device__) __inline char __ldg(const char *ptr) { }
static __declspec(__device__) __inline signed char __ldg(const signed char *ptr) { }
static __declspec(__device__) __inline short __ldg(const short *ptr) { }
static __declspec(__device__) __inline int __ldg(const int *ptr) { }
static __declspec(__device__) __inline long long __ldg(const long long *ptr) { }
static __declspec(__device__) __inline char2 __ldg(const char2 *ptr) { }
static __declspec(__device__) __inline char4 __ldg(const char4 *ptr) { }
static __declspec(__device__) __inline short2 __ldg(const short2 *ptr) { }
static __declspec(__device__) __inline short4 __ldg(const short4 *ptr) { }
static __declspec(__device__) __inline int2 __ldg(const int2 *ptr) { }
static __declspec(__device__) __inline int4 __ldg(const int4 *ptr) { }
static __declspec(__device__) __inline longlong2 __ldg(const longlong2 *ptr) { }

static __declspec(__device__) __inline unsigned char __ldg(const unsigned char *ptr) { }
static __declspec(__device__) __inline unsigned short __ldg(const unsigned short *ptr) { }
static __declspec(__device__) __inline unsigned int __ldg(const unsigned int *ptr) { }
static __declspec(__device__) __inline unsigned long long __ldg(const unsigned long long *ptr) { }
static __declspec(__device__) __inline uchar2 __ldg(const uchar2 *ptr) { }
static __declspec(__device__) __inline uchar4 __ldg(const uchar4 *ptr) { }
static __declspec(__device__) __inline ushort2 __ldg(const ushort2 *ptr) { }
static __declspec(__device__) __inline ushort4 __ldg(const ushort4 *ptr) { }
static __declspec(__device__) __inline uint2 __ldg(const uint2 *ptr) { }
static __declspec(__device__) __inline uint4 __ldg(const uint4 *ptr) { }
static __declspec(__device__) __inline ulonglong2 __ldg(const ulonglong2 *ptr) { }

static __declspec(__device__) __inline float __ldg(const float *ptr) { }
static __declspec(__device__) __inline double __ldg(const double *ptr) { }
static __declspec(__device__) __inline float2 __ldg(const float2 *ptr) { }
static __declspec(__device__) __inline float4 __ldg(const float4 *ptr) { }
static __declspec(__device__) __inline double2 __ldg(const double2 *ptr) { }



static __declspec(__device__) __inline long __ldcg(const long *ptr) { }
static __declspec(__device__) __inline unsigned long __ldcg(const unsigned long *ptr) { }

static __declspec(__device__) __inline char __ldcg(const char *ptr) { }
static __declspec(__device__) __inline signed char __ldcg(const signed char *ptr) { }
static __declspec(__device__) __inline short __ldcg(const short *ptr) { }
static __declspec(__device__) __inline int __ldcg(const int *ptr) { }
static __declspec(__device__) __inline long long __ldcg(const long long *ptr) { }
static __declspec(__device__) __inline char2 __ldcg(const char2 *ptr) { }
static __declspec(__device__) __inline char4 __ldcg(const char4 *ptr) { }
static __declspec(__device__) __inline short2 __ldcg(const short2 *ptr) { }
static __declspec(__device__) __inline short4 __ldcg(const short4 *ptr) { }
static __declspec(__device__) __inline int2 __ldcg(const int2 *ptr) { }
static __declspec(__device__) __inline int4 __ldcg(const int4 *ptr) { }
static __declspec(__device__) __inline longlong2 __ldcg(const longlong2 *ptr) { }

static __declspec(__device__) __inline unsigned char __ldcg(const unsigned char *ptr) { }
static __declspec(__device__) __inline unsigned short __ldcg(const unsigned short *ptr) { }
static __declspec(__device__) __inline unsigned int __ldcg(const unsigned int *ptr) { }
static __declspec(__device__) __inline unsigned long long __ldcg(const unsigned long long *ptr) { }
static __declspec(__device__) __inline uchar2 __ldcg(const uchar2 *ptr) { }
static __declspec(__device__) __inline uchar4 __ldcg(const uchar4 *ptr) { }
static __declspec(__device__) __inline ushort2 __ldcg(const ushort2 *ptr) { }
static __declspec(__device__) __inline ushort4 __ldcg(const ushort4 *ptr) { }
static __declspec(__device__) __inline uint2 __ldcg(const uint2 *ptr) { }
static __declspec(__device__) __inline uint4 __ldcg(const uint4 *ptr) { }
static __declspec(__device__) __inline ulonglong2 __ldcg(const ulonglong2 *ptr) { }

static __declspec(__device__) __inline float __ldcg(const float *ptr) { }
static __declspec(__device__) __inline double __ldcg(const double *ptr) { }
static __declspec(__device__) __inline float2 __ldcg(const float2 *ptr) { }
static __declspec(__device__) __inline float4 __ldcg(const float4 *ptr) { }
static __declspec(__device__) __inline double2 __ldcg(const double2 *ptr) { }



static __declspec(__device__) __inline long __ldca(const long *ptr) { }
static __declspec(__device__) __inline unsigned long __ldca(const unsigned long *ptr) { }

static __declspec(__device__) __inline char __ldca(const char *ptr) { }
static __declspec(__device__) __inline signed char __ldca(const signed char *ptr) { }
static __declspec(__device__) __inline short __ldca(const short *ptr) { }
static __declspec(__device__) __inline int __ldca(const int *ptr) { }
static __declspec(__device__) __inline long long __ldca(const long long *ptr) { }
static __declspec(__device__) __inline char2 __ldca(const char2 *ptr) { }
static __declspec(__device__) __inline char4 __ldca(const char4 *ptr) { }
static __declspec(__device__) __inline short2 __ldca(const short2 *ptr) { }
static __declspec(__device__) __inline short4 __ldca(const short4 *ptr) { }
static __declspec(__device__) __inline int2 __ldca(const int2 *ptr) { }
static __declspec(__device__) __inline int4 __ldca(const int4 *ptr) { }
static __declspec(__device__) __inline longlong2 __ldca(const longlong2 *ptr) { }

static __declspec(__device__) __inline unsigned char __ldca(const unsigned char *ptr) { }
static __declspec(__device__) __inline unsigned short __ldca(const unsigned short *ptr) { }
static __declspec(__device__) __inline unsigned int __ldca(const unsigned int *ptr) { }
static __declspec(__device__) __inline unsigned long long __ldca(const unsigned long long *ptr) { }
static __declspec(__device__) __inline uchar2 __ldca(const uchar2 *ptr) { }
static __declspec(__device__) __inline uchar4 __ldca(const uchar4 *ptr) { }
static __declspec(__device__) __inline ushort2 __ldca(const ushort2 *ptr) { }
static __declspec(__device__) __inline ushort4 __ldca(const ushort4 *ptr) { }
static __declspec(__device__) __inline uint2 __ldca(const uint2 *ptr) { }
static __declspec(__device__) __inline uint4 __ldca(const uint4 *ptr) { }
static __declspec(__device__) __inline ulonglong2 __ldca(const ulonglong2 *ptr) { }

static __declspec(__device__) __inline float __ldca(const float *ptr) { }
static __declspec(__device__) __inline double __ldca(const double *ptr) { }
static __declspec(__device__) __inline float2 __ldca(const float2 *ptr) { }
static __declspec(__device__) __inline float4 __ldca(const float4 *ptr) { }
static __declspec(__device__) __inline double2 __ldca(const double2 *ptr) { }



static __declspec(__device__) __inline long __ldcs(const long *ptr) { }
static __declspec(__device__) __inline unsigned long __ldcs(const unsigned long *ptr) { }

static __declspec(__device__) __inline char __ldcs(const char *ptr) { }
static __declspec(__device__) __inline signed char __ldcs(const signed char *ptr) { }
static __declspec(__device__) __inline short __ldcs(const short *ptr) { }
static __declspec(__device__) __inline int __ldcs(const int *ptr) { }
static __declspec(__device__) __inline long long __ldcs(const long long *ptr) { }
static __declspec(__device__) __inline char2 __ldcs(const char2 *ptr) { }
static __declspec(__device__) __inline char4 __ldcs(const char4 *ptr) { }
static __declspec(__device__) __inline short2 __ldcs(const short2 *ptr) { }
static __declspec(__device__) __inline short4 __ldcs(const short4 *ptr) { }
static __declspec(__device__) __inline int2 __ldcs(const int2 *ptr) { }
static __declspec(__device__) __inline int4 __ldcs(const int4 *ptr) { }
static __declspec(__device__) __inline longlong2 __ldcs(const longlong2 *ptr) { }

static __declspec(__device__) __inline unsigned char __ldcs(const unsigned char *ptr) { }
static __declspec(__device__) __inline unsigned short __ldcs(const unsigned short *ptr) { }
static __declspec(__device__) __inline unsigned int __ldcs(const unsigned int *ptr) { }
static __declspec(__device__) __inline unsigned long long __ldcs(const unsigned long long *ptr) { }
static __declspec(__device__) __inline uchar2 __ldcs(const uchar2 *ptr) { }
static __declspec(__device__) __inline uchar4 __ldcs(const uchar4 *ptr) { }
static __declspec(__device__) __inline ushort2 __ldcs(const ushort2 *ptr) { }
static __declspec(__device__) __inline ushort4 __ldcs(const ushort4 *ptr) { }
static __declspec(__device__) __inline uint2 __ldcs(const uint2 *ptr) { }
static __declspec(__device__) __inline uint4 __ldcs(const uint4 *ptr) { }
static __declspec(__device__) __inline ulonglong2 __ldcs(const ulonglong2 *ptr) { }

static __declspec(__device__) __inline float __ldcs(const float *ptr) { }
static __declspec(__device__) __inline double __ldcs(const double *ptr) { }
static __declspec(__device__) __inline float2 __ldcs(const float2 *ptr) { }
static __declspec(__device__) __inline float4 __ldcs(const float4 *ptr) { }
static __declspec(__device__) __inline double2 __ldcs(const double2 *ptr) { }



static __declspec(__device__) __inline long __ldlu(const long *ptr) { }
static __declspec(__device__) __inline unsigned long __ldlu(const unsigned long *ptr) { }

static __declspec(__device__) __inline char __ldlu(const char *ptr) { }
static __declspec(__device__) __inline signed char __ldlu(const signed char *ptr) { }
static __declspec(__device__) __inline short __ldlu(const short *ptr) { }
static __declspec(__device__) __inline int __ldlu(const int *ptr) { }
static __declspec(__device__) __inline long long __ldlu(const long long *ptr) { }
static __declspec(__device__) __inline char2 __ldlu(const char2 *ptr) { }
static __declspec(__device__) __inline char4 __ldlu(const char4 *ptr) { }
static __declspec(__device__) __inline short2 __ldlu(const short2 *ptr) { }
static __declspec(__device__) __inline short4 __ldlu(const short4 *ptr) { }
static __declspec(__device__) __inline int2 __ldlu(const int2 *ptr) { }
static __declspec(__device__) __inline int4 __ldlu(const int4 *ptr) { }
static __declspec(__device__) __inline longlong2 __ldlu(const longlong2 *ptr) { }

static __declspec(__device__) __inline unsigned char __ldlu(const unsigned char *ptr) { }
static __declspec(__device__) __inline unsigned short __ldlu(const unsigned short *ptr) { }
static __declspec(__device__) __inline unsigned int __ldlu(const unsigned int *ptr) { }
static __declspec(__device__) __inline unsigned long long __ldlu(const unsigned long long *ptr) { }
static __declspec(__device__) __inline uchar2 __ldlu(const uchar2 *ptr) { }
static __declspec(__device__) __inline uchar4 __ldlu(const uchar4 *ptr) { }
static __declspec(__device__) __inline ushort2 __ldlu(const ushort2 *ptr) { }
static __declspec(__device__) __inline ushort4 __ldlu(const ushort4 *ptr) { }
static __declspec(__device__) __inline uint2 __ldlu(const uint2 *ptr) { }
static __declspec(__device__) __inline uint4 __ldlu(const uint4 *ptr) { }
static __declspec(__device__) __inline ulonglong2 __ldlu(const ulonglong2 *ptr) { }

static __declspec(__device__) __inline float __ldlu(const float *ptr) { }
static __declspec(__device__) __inline double __ldlu(const double *ptr) { }
static __declspec(__device__) __inline float2 __ldlu(const float2 *ptr) { }
static __declspec(__device__) __inline float4 __ldlu(const float4 *ptr) { }
static __declspec(__device__) __inline double2 __ldlu(const double2 *ptr) { }



static __declspec(__device__) __inline long __ldcv(const long *ptr) { }
static __declspec(__device__) __inline unsigned long __ldcv(const unsigned long *ptr) { }

static __declspec(__device__) __inline char __ldcv(const char *ptr) { }
static __declspec(__device__) __inline signed char __ldcv(const signed char *ptr) { }
static __declspec(__device__) __inline short __ldcv(const short *ptr) { }
static __declspec(__device__) __inline int __ldcv(const int *ptr) { }
static __declspec(__device__) __inline long long __ldcv(const long long *ptr) { }
static __declspec(__device__) __inline char2 __ldcv(const char2 *ptr) { }
static __declspec(__device__) __inline char4 __ldcv(const char4 *ptr) { }
static __declspec(__device__) __inline short2 __ldcv(const short2 *ptr) { }
static __declspec(__device__) __inline short4 __ldcv(const short4 *ptr) { }
static __declspec(__device__) __inline int2 __ldcv(const int2 *ptr) { }
static __declspec(__device__) __inline int4 __ldcv(const int4 *ptr) { }
static __declspec(__device__) __inline longlong2 __ldcv(const longlong2 *ptr) { }

static __declspec(__device__) __inline unsigned char __ldcv(const unsigned char *ptr) { }
static __declspec(__device__) __inline unsigned short __ldcv(const unsigned short *ptr) { }
static __declspec(__device__) __inline unsigned int __ldcv(const unsigned int *ptr) { }
static __declspec(__device__) __inline unsigned long long __ldcv(const unsigned long long *ptr) { }
static __declspec(__device__) __inline uchar2 __ldcv(const uchar2 *ptr) { }
static __declspec(__device__) __inline uchar4 __ldcv(const uchar4 *ptr) { }
static __declspec(__device__) __inline ushort2 __ldcv(const ushort2 *ptr) { }
static __declspec(__device__) __inline ushort4 __ldcv(const ushort4 *ptr) { }
static __declspec(__device__) __inline uint2 __ldcv(const uint2 *ptr) { }
static __declspec(__device__) __inline uint4 __ldcv(const uint4 *ptr) { }
static __declspec(__device__) __inline ulonglong2 __ldcv(const ulonglong2 *ptr) { }

static __declspec(__device__) __inline float __ldcv(const float *ptr) { }
static __declspec(__device__) __inline double __ldcv(const double *ptr) { }
static __declspec(__device__) __inline float2 __ldcv(const float2 *ptr) { }
static __declspec(__device__) __inline float4 __ldcv(const float4 *ptr) { }
static __declspec(__device__) __inline double2 __ldcv(const double2 *ptr) { }



static __declspec(__device__) __inline void __stwb(long *ptr, long value) { }
static __declspec(__device__) __inline void __stwb(unsigned long *ptr, unsigned long value) { }

static __declspec(__device__) __inline void __stwb(char *ptr, char value) { }
static __declspec(__device__) __inline void __stwb(signed char *ptr, signed char value) { }
static __declspec(__device__) __inline void __stwb(short *ptr, short value) { }
static __declspec(__device__) __inline void __stwb(int *ptr, int value) { }
static __declspec(__device__) __inline void __stwb(long long *ptr, long long value) { }
static __declspec(__device__) __inline void __stwb(char2 *ptr, char2 value) { }
static __declspec(__device__) __inline void __stwb(char4 *ptr, char4 value) { }
static __declspec(__device__) __inline void __stwb(short2 *ptr, short2 value) { }
static __declspec(__device__) __inline void __stwb(short4 *ptr, short4 value) { }
static __declspec(__device__) __inline void __stwb(int2 *ptr, int2 value) { }
static __declspec(__device__) __inline void __stwb(int4 *ptr, int4 value) { }
static __declspec(__device__) __inline void __stwb(longlong2 *ptr, longlong2 value) { }

static __declspec(__device__) __inline void __stwb(unsigned char *ptr, unsigned char value) { }
static __declspec(__device__) __inline void __stwb(unsigned short *ptr, unsigned short value) { }
static __declspec(__device__) __inline void __stwb(unsigned int *ptr, unsigned int value) { }
static __declspec(__device__) __inline void __stwb(unsigned long long *ptr, unsigned long long value) { }
static __declspec(__device__) __inline void __stwb(uchar2 *ptr, uchar2 value) { }
static __declspec(__device__) __inline void __stwb(uchar4 *ptr, uchar4 value) { }
static __declspec(__device__) __inline void __stwb(ushort2 *ptr, ushort2 value) { }
static __declspec(__device__) __inline void __stwb(ushort4 *ptr, ushort4 value) { }
static __declspec(__device__) __inline void __stwb(uint2 *ptr, uint2 value) { }
static __declspec(__device__) __inline void __stwb(uint4 *ptr, uint4 value) { }
static __declspec(__device__) __inline void __stwb(ulonglong2 *ptr, ulonglong2 value) { }

static __declspec(__device__) __inline void __stwb(float *ptr, float value) { }
static __declspec(__device__) __inline void __stwb(double *ptr, double value) { }
static __declspec(__device__) __inline void __stwb(float2 *ptr, float2 value) { }
static __declspec(__device__) __inline void __stwb(float4 *ptr, float4 value) { }
static __declspec(__device__) __inline void __stwb(double2 *ptr, double2 value) { }



static __declspec(__device__) __inline void __stcg(long *ptr, long value) { }
static __declspec(__device__) __inline void __stcg(unsigned long *ptr, unsigned long value) { }

static __declspec(__device__) __inline void __stcg(char *ptr, char value) { }
static __declspec(__device__) __inline void __stcg(signed char *ptr, signed char value) { }
static __declspec(__device__) __inline void __stcg(short *ptr, short value) { }
static __declspec(__device__) __inline void __stcg(int *ptr, int value) { }
static __declspec(__device__) __inline void __stcg(long long *ptr, long long value) { }
static __declspec(__device__) __inline void __stcg(char2 *ptr, char2 value) { }
static __declspec(__device__) __inline void __stcg(char4 *ptr, char4 value) { }
static __declspec(__device__) __inline void __stcg(short2 *ptr, short2 value) { }
static __declspec(__device__) __inline void __stcg(short4 *ptr, short4 value) { }
static __declspec(__device__) __inline void __stcg(int2 *ptr, int2 value) { }
static __declspec(__device__) __inline void __stcg(int4 *ptr, int4 value) { }
static __declspec(__device__) __inline void __stcg(longlong2 *ptr, longlong2 value) { }

static __declspec(__device__) __inline void __stcg(unsigned char *ptr, unsigned char value) { }
static __declspec(__device__) __inline void __stcg(unsigned short *ptr, unsigned short value) { }
static __declspec(__device__) __inline void __stcg(unsigned int *ptr, unsigned int value) { }
static __declspec(__device__) __inline void __stcg(unsigned long long *ptr, unsigned long long value) { }
static __declspec(__device__) __inline void __stcg(uchar2 *ptr, uchar2 value) { }
static __declspec(__device__) __inline void __stcg(uchar4 *ptr, uchar4 value) { }
static __declspec(__device__) __inline void __stcg(ushort2 *ptr, ushort2 value) { }
static __declspec(__device__) __inline void __stcg(ushort4 *ptr, ushort4 value) { }
static __declspec(__device__) __inline void __stcg(uint2 *ptr, uint2 value) { }
static __declspec(__device__) __inline void __stcg(uint4 *ptr, uint4 value) { }
static __declspec(__device__) __inline void __stcg(ulonglong2 *ptr, ulonglong2 value) { }

static __declspec(__device__) __inline void __stcg(float *ptr, float value) { }
static __declspec(__device__) __inline void __stcg(double *ptr, double value) { }
static __declspec(__device__) __inline void __stcg(float2 *ptr, float2 value) { }
static __declspec(__device__) __inline void __stcg(float4 *ptr, float4 value) { }
static __declspec(__device__) __inline void __stcg(double2 *ptr, double2 value) { }



static __declspec(__device__) __inline void __stcs(long *ptr, long value) { }
static __declspec(__device__) __inline void __stcs(unsigned long *ptr, unsigned long value) { }

static __declspec(__device__) __inline void __stcs(char *ptr, char value) { }
static __declspec(__device__) __inline void __stcs(signed char *ptr, signed char value) { }
static __declspec(__device__) __inline void __stcs(short *ptr, short value) { }
static __declspec(__device__) __inline void __stcs(int *ptr, int value) { }
static __declspec(__device__) __inline void __stcs(long long *ptr, long long value) { }
static __declspec(__device__) __inline void __stcs(char2 *ptr, char2 value) { }
static __declspec(__device__) __inline void __stcs(char4 *ptr, char4 value) { }
static __declspec(__device__) __inline void __stcs(short2 *ptr, short2 value) { }
static __declspec(__device__) __inline void __stcs(short4 *ptr, short4 value) { }
static __declspec(__device__) __inline void __stcs(int2 *ptr, int2 value) { }
static __declspec(__device__) __inline void __stcs(int4 *ptr, int4 value) { }
static __declspec(__device__) __inline void __stcs(longlong2 *ptr, longlong2 value) { }

static __declspec(__device__) __inline void __stcs(unsigned char *ptr, unsigned char value) { }
static __declspec(__device__) __inline void __stcs(unsigned short *ptr, unsigned short value) { }
static __declspec(__device__) __inline void __stcs(unsigned int *ptr, unsigned int value) { }
static __declspec(__device__) __inline void __stcs(unsigned long long *ptr, unsigned long long value) { }
static __declspec(__device__) __inline void __stcs(uchar2 *ptr, uchar2 value) { }
static __declspec(__device__) __inline void __stcs(uchar4 *ptr, uchar4 value) { }
static __declspec(__device__) __inline void __stcs(ushort2 *ptr, ushort2 value) { }
static __declspec(__device__) __inline void __stcs(ushort4 *ptr, ushort4 value) { }
static __declspec(__device__) __inline void __stcs(uint2 *ptr, uint2 value) { }
static __declspec(__device__) __inline void __stcs(uint4 *ptr, uint4 value) { }
static __declspec(__device__) __inline void __stcs(ulonglong2 *ptr, ulonglong2 value) { }

static __declspec(__device__) __inline void __stcs(float *ptr, float value) { }
static __declspec(__device__) __inline void __stcs(double *ptr, double value) { }
static __declspec(__device__) __inline void __stcs(float2 *ptr, float2 value) { }
static __declspec(__device__) __inline void __stcs(float4 *ptr, float4 value) { }
static __declspec(__device__) __inline void __stcs(double2 *ptr, double2 value) { }



static __declspec(__device__) __inline void __stwt(long *ptr, long value) { }
static __declspec(__device__) __inline void __stwt(unsigned long *ptr, unsigned long value) { }

static __declspec(__device__) __inline void __stwt(char *ptr, char value) { }
static __declspec(__device__) __inline void __stwt(signed char *ptr, signed char value) { }
static __declspec(__device__) __inline void __stwt(short *ptr, short value) { }
static __declspec(__device__) __inline void __stwt(int *ptr, int value) { }
static __declspec(__device__) __inline void __stwt(long long *ptr, long long value) { }
static __declspec(__device__) __inline void __stwt(char2 *ptr, char2 value) { }
static __declspec(__device__) __inline void __stwt(char4 *ptr, char4 value) { }
static __declspec(__device__) __inline void __stwt(short2 *ptr, short2 value) { }
static __declspec(__device__) __inline void __stwt(short4 *ptr, short4 value) { }
static __declspec(__device__) __inline void __stwt(int2 *ptr, int2 value) { }
static __declspec(__device__) __inline void __stwt(int4 *ptr, int4 value) { }
static __declspec(__device__) __inline void __stwt(longlong2 *ptr, longlong2 value) { }

static __declspec(__device__) __inline void __stwt(unsigned char *ptr, unsigned char value) { }
static __declspec(__device__) __inline void __stwt(unsigned short *ptr, unsigned short value) { }
static __declspec(__device__) __inline void __stwt(unsigned int *ptr, unsigned int value) { }
static __declspec(__device__) __inline void __stwt(unsigned long long *ptr, unsigned long long value) { }
static __declspec(__device__) __inline void __stwt(uchar2 *ptr, uchar2 value) { }
static __declspec(__device__) __inline void __stwt(uchar4 *ptr, uchar4 value) { }
static __declspec(__device__) __inline void __stwt(ushort2 *ptr, ushort2 value) { }
static __declspec(__device__) __inline void __stwt(ushort4 *ptr, ushort4 value) { }
static __declspec(__device__) __inline void __stwt(uint2 *ptr, uint2 value) { }
static __declspec(__device__) __inline void __stwt(uint4 *ptr, uint4 value) { }
static __declspec(__device__) __inline void __stwt(ulonglong2 *ptr, ulonglong2 value) { }

static __declspec(__device__) __inline void __stwt(float *ptr, float value) { }
static __declspec(__device__) __inline void __stwt(double *ptr, double value) { }
static __declspec(__device__) __inline void __stwt(float2 *ptr, float2 value) { }
static __declspec(__device__) __inline void __stwt(float4 *ptr, float4 value) { }
static __declspec(__device__) __inline void __stwt(double2 *ptr, double2 value) { }
















static __declspec(__device__) __inline unsigned int __funnelshift_l(unsigned int lo, unsigned int hi, unsigned int shift) { }











static __declspec(__device__) __inline unsigned int __funnelshift_lc(unsigned int lo, unsigned int hi, unsigned int shift) { }












static __declspec(__device__) __inline unsigned int __funnelshift_r(unsigned int lo, unsigned int hi, unsigned int shift) { }











static __declspec(__device__) __inline unsigned int __funnelshift_rc(unsigned int lo, unsigned int hi, unsigned int shift) { }


#line 501 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"

#line 503 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"





#line 509 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"

#line 511 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
#line 3624 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_35_intrinsics.h"














































































































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"





























































































































































































































































































































































































































































































































#line 511 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
#line 112 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_35_intrinsics.h"



#line 116 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_35_intrinsics.h"

#line 3625 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_61_intrinsics.h"






















































#line 56 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_61_intrinsics.h"

#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_61_intrinsics.h"











#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 13141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
#line 70 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_61_intrinsics.h"





#line 76 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_61_intrinsics.h"













static __declspec(__device__) __inline int __dp2a_lo(int srcA, int srcB, int c) { }
static __declspec(__device__) __inline unsigned int __dp2a_lo(unsigned int srcA, unsigned int srcB, unsigned int c) { }

static __declspec(__device__) __inline int __dp2a_lo(short2 srcA, char4 srcB, int c) { }
static __declspec(__device__) __inline unsigned int __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned int c) { }

static __declspec(__device__) __inline int __dp2a_hi(int srcA, int srcB, int c) { }
static __declspec(__device__) __inline unsigned int __dp2a_hi(unsigned int srcA, unsigned int srcB, unsigned int c) { }

static __declspec(__device__) __inline int __dp2a_hi(short2 srcA, char4 srcB, int c) { }
static __declspec(__device__) __inline unsigned int __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned int c) { }






static __declspec(__device__) __inline int __dp4a(int srcA, int srcB, int c) { }
static __declspec(__device__) __inline unsigned int __dp4a(unsigned int srcA, unsigned int srcB, unsigned int c) { }

static __declspec(__device__) __inline int __dp4a(char4 srcA, char4 srcB, int c) { }
static __declspec(__device__) __inline unsigned int __dp4a(uchar4 srcA, uchar4 srcB, unsigned int c) { }

#line 113 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_61_intrinsics.h"

#line 115 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_61_intrinsics.h"






#line 122 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_61_intrinsics.h"

#line 124 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_61_intrinsics.h"
#line 3626 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"






#line 66 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"

#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"











#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"











































































































#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
















































































































































































#line 178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 80 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
#line 81 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"







































































































































































































#line 259 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"




#line 264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"
#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"





#line 88 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"





static __declspec(__device__) __inline unsigned int __match_any_sync(unsigned mask, unsigned value) { }
static __declspec(__device__) __inline unsigned int __match_any_sync(unsigned mask, int value) { }
static __declspec(__device__) __inline unsigned int __match_any_sync(unsigned mask, unsigned long value) { }
static __declspec(__device__) __inline unsigned int __match_any_sync(unsigned mask, long value) { }
static __declspec(__device__) __inline unsigned int __match_any_sync(unsigned mask, unsigned long long value) { }
static __declspec(__device__) __inline unsigned int __match_any_sync(unsigned mask, long long value) { }
static __declspec(__device__) __inline unsigned int __match_any_sync(unsigned mask, float value) { }
static __declspec(__device__) __inline unsigned int __match_any_sync(unsigned mask, double value) { }

static __declspec(__device__) __inline unsigned int __match_all_sync(unsigned mask, unsigned value, int *pred) { }
static __declspec(__device__) __inline unsigned int __match_all_sync(unsigned mask, int value, int *pred) { }
static __declspec(__device__) __inline unsigned int __match_all_sync(unsigned mask, unsigned long value, int *pred) { }
static __declspec(__device__) __inline unsigned int __match_all_sync(unsigned mask, long value, int *pred) { }
static __declspec(__device__) __inline unsigned int __match_all_sync(unsigned mask, unsigned long long value, int *pred) { }
static __declspec(__device__) __inline unsigned int __match_all_sync(unsigned mask, long long value, int *pred) { }
static __declspec(__device__) __inline unsigned int __match_all_sync(unsigned mask, float value, int *pred) { }
static __declspec(__device__) __inline unsigned int __match_all_sync(unsigned mask, double value, int *pred) { }

static __declspec(__device__) __inline void __nanosleep(unsigned int ns) { }

static __declspec(__device__) __inline unsigned short int atomicCAS(unsigned short int *address, unsigned short int compare, unsigned short int val) { }

#line 116 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"

#line 118 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"






#line 125 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"

#line 127 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"




#line 132 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"
#line 3627 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"






#line 66 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"

#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"











#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"











































































































#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
















































































































































































#line 178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 80 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
#line 81 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"







































































































































































































#line 259 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"




#line 264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"
#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"





#line 88 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"





static __declspec(__device__) __inline unsigned __reduce_add_sync(unsigned mask, unsigned value) { }
static __declspec(__device__) __inline unsigned __reduce_min_sync(unsigned mask, unsigned value) { }
static __declspec(__device__) __inline unsigned __reduce_max_sync(unsigned mask, unsigned value) { }

static __declspec(__device__) __inline int __reduce_add_sync(unsigned mask, int value) { }
static __declspec(__device__) __inline int __reduce_min_sync(unsigned mask, int value) { }
static __declspec(__device__) __inline int __reduce_max_sync(unsigned mask, int value) { }

static __declspec(__device__) __inline unsigned __reduce_and_sync(unsigned mask, unsigned value) { }
static __declspec(__device__) __inline unsigned __reduce_or_sync(unsigned mask, unsigned value) { }
static __declspec(__device__) __inline unsigned __reduce_xor_sync(unsigned mask, unsigned value) { }


extern "C" {
inline __declspec(__device__) void *__nv_associate_access_property(const void *ptr, 
                                                       unsigned long long property) {
  extern __declspec(__device__) void *__nv_associate_access_property_impl(const void *,
                                                              unsigned long long);
  return __nv_associate_access_property_impl(ptr, property);
}

inline __declspec(__device__)  void __nv_memcpy_async_shared_global_4(void *dst, 
                                                          const void *src, 
                                                          unsigned src_size) {
  extern __declspec(__device__) void __nv_memcpy_async_shared_global_4_impl(void *, 
                                                                const void *, 
                                                                unsigned);
  __nv_memcpy_async_shared_global_4_impl(dst, src, src_size);
}

inline __declspec(__device__)  void __nv_memcpy_async_shared_global_8(void *dst, 
                                                          const void *src, 
                                                          unsigned src_size) {
  extern __declspec(__device__) void __nv_memcpy_async_shared_global_8_impl(void *, 
                                                                const void *, 
                                                                unsigned);
  __nv_memcpy_async_shared_global_8_impl(dst, src, src_size);
}

inline __declspec(__device__)  void __nv_memcpy_async_shared_global_16(void *dst, 
                                                          const void *src, 
                                                          unsigned src_size) {
  extern __declspec(__device__) void __nv_memcpy_async_shared_global_16_impl(void *, 
                                                                const void *, 
                                                                unsigned);
  __nv_memcpy_async_shared_global_16_impl(dst, src, src_size);
}

}
#line 143 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"

#line 145 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"






#line 152 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"

#line 154 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"




#line 159 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"
#line 3628 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"






#line 66 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"

#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"











#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"


#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"











































































































#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
















































































































































































#line 178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\builtin_types.h"
#line 80 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
















































































#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
#line 81 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"







































































































































































































#line 259 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"




#line 264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\host_defines.h"
#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"





#line 88 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"

static __declspec(__device__) __inline unsigned __isCtaShared(const void *ptr) { }
static __declspec(__device__) __inline unsigned __isClusterShared(const void *ptr) { }
static __declspec(__device__) __inline void *__cluster_map_shared_rank(const void *ptr, unsigned target_block_rank)  { }
static __declspec(__device__) __inline unsigned __cluster_query_shared_rank(const void *ptr) { }
static __declspec(__device__) __inline uint2 __cluster_map_shared_multicast(const void *ptr, unsigned cluster_cta_mask) { }
static __declspec(__device__) __inline unsigned __clusterDimIsSpecified() { }
static __declspec(__device__) __inline dim3 __clusterDim() { }
static __declspec(__device__) __inline dim3 __clusterRelativeBlockIdx() { }
static __declspec(__device__) __inline dim3 __clusterGridDimInClusters() { }
static __declspec(__device__) __inline dim3 __clusterIdx() { }
static __declspec(__device__) __inline unsigned __clusterRelativeBlockRank() { }
static __declspec(__device__) __inline unsigned __clusterSizeInBlocks() { }
static __declspec(__device__) __inline void __cluster_barrier_arrive() { }
static __declspec(__device__) __inline void __cluster_barrier_arrive_relaxed() { }
static __declspec(__device__) __inline void __cluster_barrier_wait() { }
static __declspec(__device__) __inline void __threadfence_cluster() { }

static __declspec(__device__) __inline float2 atomicAdd(float2 *address, float2 val) { }
static __declspec(__device__) __inline float2 atomicAdd_block(float2 *address, float2 val) { }
static __declspec(__device__) __inline float2 atomicAdd_system(float2 *address, float2 val) { }
static __declspec(__device__) __inline float4 atomicAdd(float4 *address, float4 val) { }
static __declspec(__device__) __inline float4 atomicAdd_block(float4 *address, float4 val) { }
static __declspec(__device__) __inline float4 atomicAdd_system(float4 *address, float4 val) { }

#line 114 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"

#line 116 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"






#line 123 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"

#line 125 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"




#line 130 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
#line 3629 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"

























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 13141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"




#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"

template <typename T> struct __nv_itex_trait {   };
template<> struct __nv_itex_trait<char> { typedef void type; };
template<> struct __nv_itex_trait<signed char> { typedef void type; };
template<> struct __nv_itex_trait<char1> { typedef void type; };
template<> struct __nv_itex_trait<char2> { typedef void type; };
template<> struct __nv_itex_trait<char4> { typedef void type; };
template<> struct __nv_itex_trait<unsigned char> { typedef void type; };
template<> struct __nv_itex_trait<uchar1> { typedef void type; };
template<> struct __nv_itex_trait<uchar2> { typedef void type; };
template<> struct __nv_itex_trait<uchar4> { typedef void type; };
template<> struct __nv_itex_trait<short> { typedef void type; };
template<> struct __nv_itex_trait<short1> { typedef void type; };
template<> struct __nv_itex_trait<short2> { typedef void type; };
template<> struct __nv_itex_trait<short4> { typedef void type; };
template<> struct __nv_itex_trait<unsigned short> { typedef void type; };
template<> struct __nv_itex_trait<ushort1> { typedef void type; };
template<> struct __nv_itex_trait<ushort2> { typedef void type; };
template<> struct __nv_itex_trait<ushort4> { typedef void type; };
template<> struct __nv_itex_trait<int> { typedef void type; };
template<> struct __nv_itex_trait<int1> { typedef void type; };
template<> struct __nv_itex_trait<int2> { typedef void type; };
template<> struct __nv_itex_trait<int4> { typedef void type; };
template<> struct __nv_itex_trait<unsigned int> { typedef void type; };
template<> struct __nv_itex_trait<uint1> { typedef void type; };
template<> struct __nv_itex_trait<uint2> { typedef void type; };
template<> struct __nv_itex_trait<uint4> { typedef void type; };

template<> struct __nv_itex_trait<long> { typedef void type; };
template<> struct __nv_itex_trait<long1> { typedef void type; };
template<> struct __nv_itex_trait<long2> { typedef void type; };
template<> struct __nv_itex_trait<long4> { typedef void type; };
template<> struct __nv_itex_trait<unsigned long> { typedef void type; };
template<> struct __nv_itex_trait<ulong1> { typedef void type; };
template<> struct __nv_itex_trait<ulong2> { typedef void type; };
template<> struct __nv_itex_trait<ulong4> { typedef void type; };
#line 101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait<float> { typedef void type; };
template<> struct __nv_itex_trait<float1> { typedef void type; };
template<> struct __nv_itex_trait<float2> { typedef void type; };
template<> struct __nv_itex_trait<float4> { typedef void type; };



template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex1Dfetch(T *ptr, cudaTextureObject_t obj, int x)
{
   __nv_tex_surf_handler("__itex1Dfetch", ptr, obj, x);
}

template <class T>
static __declspec(__device__) T tex1Dfetch(cudaTextureObject_t texObject, int x)
{
  T ret;
  tex1Dfetch(&ret, texObject, x);
  return ret;
}

template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex1D(T *ptr, cudaTextureObject_t obj, float x)
{
   __nv_tex_surf_handler("__itex1D", ptr, obj, x);
}


template <class T>
static __declspec(__device__)  T tex1D(cudaTextureObject_t texObject, float x)
{
  T ret;
  tex1D(&ret, texObject, x);
  return ret;
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2D(T *ptr, cudaTextureObject_t obj, float x, float y)
{
   __nv_tex_surf_handler("__itex2D", ptr, obj, x, y);
}

template <class T>
static __declspec(__device__)  T tex2D(cudaTextureObject_t texObject, float x, float y)
{
  T ret;
  tex2D(&ret, texObject, x, y);
  return ret;
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2D(T *ptr, cudaTextureObject_t obj, float x, float y, 
                                                          bool* isResident)
{
  unsigned char res;
   __nv_tex_surf_handler("__itex2D_sparse", ptr, obj, x, y, &res);
   *isResident = (res != 0);
}

template <class T>
static __declspec(__device__)  T tex2D(cudaTextureObject_t texObject, float x, float y, bool* isResident)
{
  T ret;
  tex2D(&ret, texObject, x, y, isResident);
  return ret;
}

#line 171 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex3D(T *ptr, cudaTextureObject_t obj, float x, float y, float z)
{
   __nv_tex_surf_handler("__itex3D", ptr, obj, x, y, z);
}

template <class T>
static __declspec(__device__)  T tex3D(cudaTextureObject_t texObject, float x, float y, float z)
{
  T ret;
  tex3D(&ret, texObject, x, y, z);
  return ret;
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex3D(T *ptr, cudaTextureObject_t obj, float x, float y, float z, 
                                                          bool* isResident)
{
  unsigned char res;
   __nv_tex_surf_handler("__itex3D_sparse", ptr, obj, x, y, z, &res);
   *isResident = (res != 0);
}

template <class T>
static __declspec(__device__)  T tex3D(cudaTextureObject_t texObject, float x, float y, float z, bool* isResident)
{
  T ret;
  tex3D(&ret, texObject, x, y, z, isResident);
  return ret;
}
#line 205 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex1DLayered(T *ptr, cudaTextureObject_t obj, float x, int layer)
{
   __nv_tex_surf_handler("__itex1DLayered", ptr, obj, x, layer);
}

template <class T>
static __declspec(__device__)  T tex1DLayered(cudaTextureObject_t texObject, float x, int layer)
{
  T ret;
  tex1DLayered(&ret, texObject, x, layer);
  return ret;
}

template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DLayered(T *ptr, cudaTextureObject_t obj, float x, float y, int layer)
{
  __nv_tex_surf_handler("__itex2DLayered", ptr, obj, x, y, layer);
}

template <class T>
static __declspec(__device__)  T tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer)
{
  T ret;
  tex2DLayered(&ret, texObject, x, y, layer);
  return ret;
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DLayered(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, bool* isResident)
{
  unsigned char res;
  __nv_tex_surf_handler("__itex2DLayered_sparse", ptr, obj, x, y, layer, &res);
  *isResident = (res != 0);
}

template <class T>
static __declspec(__device__)  T tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer, bool* isResident)
{
  T ret;
  tex2DLayered(&ret, texObject, x, y, layer, isResident);
  return ret;
}
#line 252 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type texCubemap(T *ptr, cudaTextureObject_t obj, float x, float y, float z)
{
  __nv_tex_surf_handler("__itexCubemap", ptr, obj, x, y, z);
}


template <class T>
static __declspec(__device__)  T texCubemap(cudaTextureObject_t texObject, float x, float y, float z)
{
  T ret;
  texCubemap(&ret, texObject, x, y, z);
  return ret;
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type texCubemapLayered(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer)
{ 
  __nv_tex_surf_handler("__itexCubemapLayered", ptr, obj, x, y, z, layer);
}

template <class T>
static __declspec(__device__)  T texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  T ret;
  texCubemapLayered(&ret, texObject, x, y, z, layer);
  return ret;
}

template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2Dgather(T *ptr, cudaTextureObject_t obj, float x, float y, int comp = 0)
{
  __nv_tex_surf_handler("__itex2Dgather", ptr, obj, x, y, comp);
}

template <class T>
static __declspec(__device__)  T tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = 0)
{
  T ret;
  tex2Dgather(&ret, to, x, y, comp);
  return ret;
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2Dgather(T *ptr, cudaTextureObject_t obj, float x, float y, bool* isResident, int comp = 0)
{
  unsigned char res;
  __nv_tex_surf_handler("__itex2Dgather_sparse", ptr, obj, x, y, comp,  &res);
  *isResident = (res != 0);
}

template <class T>
static __declspec(__device__)  T tex2Dgather(cudaTextureObject_t to, float x, float y, bool* isResident, int comp = 0)
{
  T ret;
  tex2Dgather(&ret, to, x, y,  isResident, comp);
  return ret;
}

#line 316 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"

template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex1DLod(T *ptr, cudaTextureObject_t obj, float x, float level)
{
  __nv_tex_surf_handler("__itex1DLod", ptr, obj, x, level);
}

template <class T>
static __declspec(__device__)  T tex1DLod(cudaTextureObject_t texObject, float x, float level)
{
  T ret;
  tex1DLod(&ret, texObject, x, level);
  return ret;
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float level)
{
  __nv_tex_surf_handler("__itex2DLod", ptr, obj, x, y, level);
}

template <class T>
static __declspec(__device__)  T tex2DLod(cudaTextureObject_t texObject, float x, float y, float level)
{
  T ret;
  tex2DLod(&ret, texObject, x, y, level);
  return ret;
}



template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float level, bool* isResident)
{
  unsigned char res;
  __nv_tex_surf_handler("__itex2DLod_sparse", ptr, obj, x, y, level, &res);
  *isResident = (res != 0);
}

template <class T>
static __declspec(__device__)  T tex2DLod(cudaTextureObject_t texObject, float x, float y, float level, bool* isResident)
{
  T ret;
  tex2DLod(&ret, texObject, x, y, level, isResident);
  return ret;
}

#line 365 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex3DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level)
{ 
  __nv_tex_surf_handler("__itex3DLod", ptr, obj, x, y, z, level);
}

template <class T>
static __declspec(__device__)  T tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  T ret;
  tex3DLod(&ret, texObject, x, y, z, level);
  return ret;
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex3DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level, bool* isResident)
{ 
  unsigned char res;
  __nv_tex_surf_handler("__itex3DLod_sparse", ptr, obj, x, y, z, level, &res);
  *isResident = (res != 0);
}

template <class T>
static __declspec(__device__)  T tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level, bool* isResident)
{
  T ret;
  tex3DLod(&ret, texObject, x, y, z, level, isResident);
  return ret;
}

#line 399 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex1DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, int layer, float level)
{ 
  __nv_tex_surf_handler("__itex1DLayeredLod", ptr, obj, x, layer, level);
}

template <class T>
static __declspec(__device__)  T tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level)
{
  T ret;
  tex1DLayeredLod(&ret, texObject, x, layer, level);
  return ret;
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float level)
{ 
  __nv_tex_surf_handler("__itex2DLayeredLod", ptr, obj, x, y, layer, level);
}

template <class T>
static __declspec(__device__)  T tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  T ret;
  tex2DLayeredLod(&ret, texObject, x, y, layer, level);
  return ret;
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float level, bool* isResident)
{ 
  unsigned char res;
  __nv_tex_surf_handler("__itex2DLayeredLod_sparse", ptr, obj, x, y, layer, level, &res);
  *isResident = (res != 0);
}

template <class T>
static __declspec(__device__)  T tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level, bool* isResident)
{
  T ret;
  tex2DLayeredLod(&ret, texObject, x, y, layer, level, isResident);
  return ret;
}
#line 447 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"

template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type texCubemapLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level)
{ 
  __nv_tex_surf_handler("__itexCubemapLod", ptr, obj, x, y, z, level);
}

template <class T>
static __declspec(__device__)  T texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  T ret;
  texCubemapLod(&ret, texObject, x, y, z, level);
  return ret;
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type texCubemapGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy)
{ 
  __nv_tex_surf_handler("__itexCubemapGrad_v2", ptr, obj, x, y, z, &dPdx, &dPdy);
}

template <class T>
static __declspec(__device__)  T texCubemapGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  T ret;
  texCubemapGrad(&ret, texObject, x, y, z, dPdx, dPdy);
  return ret;
}

template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type texCubemapLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float level)
{ 
  __nv_tex_surf_handler("__itexCubemapLayeredLod", ptr, obj, x, y, z, layer, level);
}

template <class T>
static __declspec(__device__)  T texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  T ret;
  texCubemapLayeredLod(&ret, texObject, x, y, z, layer, level);
  return ret;
}

template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex1DGrad(T *ptr, cudaTextureObject_t obj, float x, float dPdx, float dPdy)
{
  __nv_tex_surf_handler("__itex1DGrad", ptr, obj, x, dPdx, dPdy);
}

template <class T>
static __declspec(__device__)  T tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  T ret;
  tex1DGrad(&ret, texObject, x, dPdx, dPdy);
  return ret;
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float2 dPdx, float2 dPdy)
{ 
  __nv_tex_surf_handler("__itex2DGrad_v2", ptr, obj, x, y, &dPdx, &dPdy);
}

template <class T>
static __declspec(__device__)  T tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  T ret;
  tex2DGrad(&ret, texObject, x, y, dPdx, dPdy);
  return ret;
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float2 dPdx, float2 dPdy, bool* isResident)
{ 
  unsigned char res;
  __nv_tex_surf_handler("__itex2DGrad_sparse", ptr, obj, x, y, &dPdx, &dPdy, &res);
  *isResident = (res != 0);
}

template <class T>
static __declspec(__device__)  T tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy, bool* isResident)
{
  T ret;
  tex2DGrad(&ret, texObject, x, y, dPdx, dPdy, isResident);
  return ret;
}
#line 537 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex3DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy)
{ 
  __nv_tex_surf_handler("__itex3DGrad_v2", ptr, obj, x, y, z, &dPdx, &dPdy);
}

template <class T>
static __declspec(__device__)  T tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  T ret;
  tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy);
  return ret;
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex3DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy, bool* isResident)
{ 
  unsigned char res;
  __nv_tex_surf_handler("__itex3DGrad_sparse", ptr, obj, x, y, z, &dPdx, &dPdy, &res);
  *isResident = (res != 0);
}

template <class T>
static __declspec(__device__)  T tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy, bool* isResident)
{
  T ret;
  tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy, isResident);
  return ret;
}

#line 571 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex1DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, int layer, float dPdx, float dPdy)
{ 
  __nv_tex_surf_handler("__itex1DLayeredGrad", ptr, obj, x, layer, dPdx, dPdy);
}

template <class T>
static __declspec(__device__)  T tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  T ret;
  tex1DLayeredGrad(&ret, texObject, x, layer, dPdx, dPdy);
  return ret;
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DLayeredGrad(T * ptr, cudaTextureObject_t obj, float x, float y, int layer, float2 dPdx, float2 dPdy)
{ 
  __nv_tex_surf_handler("__itex2DLayeredGrad_v2", ptr, obj, x, y, layer, &dPdx, &dPdy);
}

template <class T>
static __declspec(__device__)  T tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  T ret;
  tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy);
  return ret;
}


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type tex2DLayeredGrad(T * ptr, cudaTextureObject_t obj, float x, float y, int layer, float2 dPdx, float2 dPdy, bool* isResident)
{ 
  unsigned char res;
  __nv_tex_surf_handler("__itex2DLayeredGrad_sparse", ptr, obj, x, y, layer, &dPdx, &dPdy, &res);
  *isResident = (res != 0);
}

template <class T>
static __declspec(__device__)  T tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy, bool* isResident)
{
  T ret;
  tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy, isResident);
  return ret;
}
#line 619 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"


template <typename T>
static __declspec(__device__) typename __nv_itex_trait<T>::type texCubemapLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float4 dPdx, float4 dPdy)
{
  __nv_tex_surf_handler("__itexCubemapLayeredGrad_v2", ptr, obj, x, y, z, layer, &dPdx, &dPdy);
}

template <class T>
static __declspec(__device__)  T texCubemapLayeredGrad(cudaTextureObject_t texObject, float x, float y, float z, int layer, float4 dPdx, float4 dPdy)
{
  T ret;
  texCubemapLayeredGrad(&ret, texObject, x, y, z, layer, dPdx, dPdy);
  return ret;
}



#line 638 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
#line 639 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
#line 3630 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"























































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 13141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"

template<typename T> struct __nv_isurf_trait { };
template<> struct __nv_isurf_trait<char> { typedef void type; };
template<> struct __nv_isurf_trait<signed char> { typedef void type; };
template<> struct __nv_isurf_trait<char1> { typedef void type; };
template<> struct __nv_isurf_trait<unsigned char> { typedef void type; };
template<> struct __nv_isurf_trait<uchar1> { typedef void type; };
template<> struct __nv_isurf_trait<short> { typedef void type; };
template<> struct __nv_isurf_trait<short1> { typedef void type; };
template<> struct __nv_isurf_trait<unsigned short> { typedef void type; };
template<> struct __nv_isurf_trait<ushort1> { typedef void type; };
template<> struct __nv_isurf_trait<int> { typedef void type; };
template<> struct __nv_isurf_trait<int1> { typedef void type; };
template<> struct __nv_isurf_trait<unsigned int> { typedef void type; };
template<> struct __nv_isurf_trait<uint1> { typedef void type; };
template<> struct __nv_isurf_trait<long long> { typedef void type; };
template<> struct __nv_isurf_trait<longlong1> { typedef void type; };
template<> struct __nv_isurf_trait<unsigned long long> { typedef void type; };
template<> struct __nv_isurf_trait<ulonglong1> { typedef void type; };
template<> struct __nv_isurf_trait<float> { typedef void type; };
template<> struct __nv_isurf_trait<float1> { typedef void type; };

template<> struct __nv_isurf_trait<char2> { typedef void type; };
template<> struct __nv_isurf_trait<uchar2> { typedef void type; };
template<> struct __nv_isurf_trait<short2> { typedef void type; };
template<> struct __nv_isurf_trait<ushort2> { typedef void type; };
template<> struct __nv_isurf_trait<int2> { typedef void type; };
template<> struct __nv_isurf_trait<uint2> { typedef void type; };
template<> struct __nv_isurf_trait<longlong2> { typedef void type; };
template<> struct __nv_isurf_trait<ulonglong2> { typedef void type; };
template<> struct __nv_isurf_trait<float2> { typedef void type; };

template<> struct __nv_isurf_trait<char4> { typedef void type; };
template<> struct __nv_isurf_trait<uchar4> { typedef void type; };
template<> struct __nv_isurf_trait<short4> { typedef void type; };
template<> struct __nv_isurf_trait<ushort4> { typedef void type; };
template<> struct __nv_isurf_trait<int4> { typedef void type; };
template<> struct __nv_isurf_trait<uint4> { typedef void type; };
template<> struct __nv_isurf_trait<float4> { typedef void type; };


template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type  surf1Dread(T *ptr, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __nv_tex_surf_handler("__isurf1Dread", ptr, obj, x, mode);
}

template <class T>
static __declspec(__device__) T surf1Dread(cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   T ret;
   surf1Dread(&ret, surfObject, x, boundaryMode);
   return ret;
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type  surf2Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __nv_tex_surf_handler("__isurf2Dread", ptr, obj, x, y, mode);
}

template <class T>
static __declspec(__device__) T surf2Dread(cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   T ret;
   surf2Dread(&ret, surfObject, x, y, boundaryMode);
   return ret;
}


template <typename T>
static __declspec(__device__) typename  __nv_isurf_trait<T>::type  surf3Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __nv_tex_surf_handler("__isurf3Dread", ptr, obj, x, y, z, mode);
}

template <class T>
static __declspec(__device__) T surf3Dread(cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   T ret;
   surf3Dread(&ret, surfObject, x, y, z, boundaryMode);
   return ret;
}

template <typename T>
static __declspec(__device__) typename  __nv_isurf_trait<T>::type  surf1DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __nv_tex_surf_handler("__isurf1DLayeredread", ptr, obj, x, layer, mode);
}

template <class T>
static __declspec(__device__) T surf1DLayeredread(cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   T ret;
   surf1DLayeredread(&ret, surfObject, x, layer, boundaryMode);
   return ret;
}

template <typename T>
static __declspec(__device__)  typename __nv_isurf_trait<T>::type  surf2DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __nv_tex_surf_handler("__isurf2DLayeredread", ptr, obj, x, y, layer, mode);
}

template <class T>
static __declspec(__device__) T surf2DLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   T ret;
   surf2DLayeredread(&ret, surfObject, x, y, layer, boundaryMode);
   return ret;
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type  surfCubemapread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __nv_tex_surf_handler("__isurfCubemapread", ptr, obj, x, y, face, mode);
}

template <class T>
static __declspec(__device__) T surfCubemapread(cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   T ret;
   surfCubemapread(&ret, surfObject, x, y, face, boundaryMode);
   return ret;
}

template <typename T>
static __declspec(__device__)  typename __nv_isurf_trait<T>::type  surfCubemapLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __nv_tex_surf_handler("__isurfCubemapLayeredread", ptr, obj, x, y, layerface, mode);
}

template <class T>
static __declspec(__device__) T surfCubemapLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   T ret;
   surfCubemapLayeredread(&ret, surfObject, x, y, layerface, boundaryMode);
   return ret;
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type surf1Dwrite(T val, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{ 
  __nv_tex_surf_handler("__isurf1Dwrite_v2", &val, obj, x, mode);
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type surf2Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __nv_tex_surf_handler("__isurf2Dwrite_v2", &val, obj, x, y, mode);
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type surf3Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __nv_tex_surf_handler("__isurf3Dwrite_v2", &val, obj, x, y, z, mode);
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type surf1DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __nv_tex_surf_handler("__isurf1DLayeredwrite_v2", &val, obj, x, layer, mode);
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type surf2DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __nv_tex_surf_handler("__isurf2DLayeredwrite_v2", &val, obj, x, y, layer, mode);
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type surfCubemapwrite(T val, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __nv_tex_surf_handler("__isurfCubemapwrite_v2", &val, obj, x, y, face, mode);
}

template <typename T>
static __declspec(__device__) typename __nv_isurf_trait<T>::type surfCubemapLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __nv_tex_surf_handler("__isurfCubemapLayeredwrite_v2", &val, obj, x, y, layerface, mode);
}

#line 240 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"

#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"


#line 3631 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\cudacc_ext.h"

























































#line 59 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\cudacc_ext.h"





#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\cudacc_ext.h"
#line 3632 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"


extern "C" __declspec(__host__) __declspec(__device__)  unsigned __stdcall __cudaPushCallConfiguration(dim3 gridDim,
                                      dim3 blockDim, 
                                      size_t sharedMem = 0, 
                                      struct CUstream_st *stream = 0);
#line 3639 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"

#line 3641 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"




#line 3646 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
#line 120 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_launch_parameters.h"




















































#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"


























































































































































































































































































































































































































































#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#line 54 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_launch_parameters.h"






#line 61 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_launch_parameters.h"


#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_launch_parameters.h"

#line 66 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_launch_parameters.h"


extern "C" {
#line 70 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_launch_parameters.h"

uint3 __declspec(__device_builtin__) extern const threadIdx;
uint3 __declspec(__device_builtin__) extern const blockIdx;
dim3 __declspec(__device_builtin__) extern const blockDim;
dim3 __declspec(__device_builtin__) extern const gridDim;
int __declspec(__device_builtin__) extern const warpSize;




}
#line 82 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_launch_parameters.h"






#line 89 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_launch_parameters.h"






#line 96 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_launch_parameters.h"






#line 103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_launch_parameters.h"






#line 110 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_launch_parameters.h"






#line 117 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_launch_parameters.h"

#line 119 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_launch_parameters.h"
#line 121 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"





#line 127 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"


#line 130 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"

#line 132 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"




#line 137 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"





#line 143 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"






#line 150 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"
























































template<class T>
static __inline __declspec(__host__) cudaError_t cudaLaunchKernel(
  const T *func,
  dim3 gridDim,
  dim3 blockDim,
  void **args,
  size_t sharedMem = 0,
  cudaStream_t stream = 0
)
{
    return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream);
}







































































#line 290 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"


















































template<class T>
static __inline __declspec(__host__) cudaError_t cudaLaunchCooperativeKernel(
  const T *func,
  dim3 gridDim,
  dim3 blockDim,
  void **args,
  size_t sharedMem = 0,
  cudaStream_t stream = 0
)
{
    return ::cudaLaunchCooperativeKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream);
}
































static __inline __declspec(__host__) cudaError_t cudaEventCreate(
  cudaEvent_t  *event,
  unsigned int  flags
)
{
  return ::cudaEventCreateWithFlags(event, flags);
}





































static __inline __declspec(__host__) cudaError_t cudaGraphInstantiate(
  cudaGraphExec_t *pGraphExec,
  cudaGraph_t graph,
  cudaGraphNode_t *pErrorNode,
  char *pLogBuffer,
  size_t bufferSize
)
{
  (void)pErrorNode;
  (void)pLogBuffer;
  (void)bufferSize;
  return ::cudaGraphInstantiate(pGraphExec, graph, 0);
}


























































static __inline __declspec(__host__) cudaError_t cudaMallocHost(
  void         **ptr,
  size_t         size,
  unsigned int   flags
)
{
  return ::cudaHostAlloc(ptr, size, flags);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaHostAlloc(
  T            **ptr,
  size_t         size,
  unsigned int   flags
)
{
  return ::cudaHostAlloc((void**)(void*)ptr, size, flags);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaHostGetDevicePointer(
  T            **pDevice,
  void          *pHost,
  unsigned int   flags
)
{
  return ::cudaHostGetDevicePointer((void**)(void*)pDevice, pHost, flags);
}





































































































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMallocManaged(
  T            **devPtr,
  size_t         size,
  unsigned int   flags = 0x01
)
{
  return ::cudaMallocManaged((void**)(void*)devPtr, size, flags);
}

















































































template<class T>
static __inline __declspec(__host__) cudaError_t cudaStreamAttachMemAsync(
  cudaStream_t   stream,
  T              *devPtr,
  size_t         length = 0,
  unsigned int   flags  = 0x04
)
{
  return ::cudaStreamAttachMemAsync(stream, (void*)devPtr, length, flags);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaMalloc(
  T      **devPtr,
  size_t   size
)
{
  return ::cudaMalloc((void**)(void*)devPtr, size);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaMallocHost(
  T            **ptr,
  size_t         size,
  unsigned int   flags = 0
)
{
  return cudaMallocHost((void**)(void*)ptr, size, flags);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaMallocPitch(
  T      **devPtr,
  size_t  *pitch,
  size_t   width,
  size_t   height
)
{
  return ::cudaMallocPitch((void**)(void*)devPtr, pitch, width, height);
}










static __inline __declspec(__host__) cudaError_t cudaMallocAsync(
  void        **ptr,
  size_t        size,
  cudaMemPool_t memPool,
  cudaStream_t  stream
)
{
  return ::cudaMallocFromPoolAsync(ptr, size, memPool, stream);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaMallocAsync(
  T           **ptr,
  size_t        size,
  cudaMemPool_t memPool,
  cudaStream_t  stream
)
{
  return ::cudaMallocFromPoolAsync((void**)(void*)ptr, size, memPool, stream);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaMallocAsync(
  T           **ptr,
  size_t        size,
  cudaStream_t  stream
)
{
  return ::cudaMallocAsync((void**)(void*)ptr, size, stream);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaMallocFromPoolAsync(
  T           **ptr,
  size_t        size,
  cudaMemPool_t memPool,
  cudaStream_t  stream
)
{
  return ::cudaMallocFromPoolAsync((void**)(void*)ptr, size, memPool, stream);
}






































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMemcpyToSymbol(
  const T                   &symbol,
  const void                *src,
        size_t               count,
        size_t               offset = 0,
        enum cudaMemcpyKind  kind   = cudaMemcpyHostToDevice
)
{
  return ::cudaMemcpyToSymbol((const void*)&symbol, src, count, offset, kind);
}











































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMemcpyToSymbolAsync(
  const T                   &symbol,
  const void                *src,
        size_t               count,
        size_t               offset = 0,
        enum cudaMemcpyKind  kind   = cudaMemcpyHostToDevice,
        cudaStream_t         stream = 0
)
{
  return ::cudaMemcpyToSymbolAsync((const void*)&symbol, src, count, offset, kind, stream);
}




































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMemcpyFromSymbol(
        void                *dst,
  const T                   &symbol,
        size_t               count,
        size_t               offset = 0,
        enum cudaMemcpyKind  kind   = cudaMemcpyDeviceToHost
)
{
  return ::cudaMemcpyFromSymbol(dst, (const void*)&symbol, count, offset, kind);
}











































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMemcpyFromSymbolAsync(
        void                *dst,
  const T                   &symbol,
        size_t               count,
        size_t               offset = 0,
        enum cudaMemcpyKind  kind   = cudaMemcpyDeviceToHost,
        cudaStream_t         stream = 0
)
{
  return ::cudaMemcpyFromSymbolAsync(dst, (const void*)&symbol, count, offset, kind, stream);
}

























































template<class T>
static __inline __declspec(__host__) cudaError_t cudaGraphAddMemcpyNodeToSymbol(
    cudaGraphNode_t *pGraphNode,
    cudaGraph_t graph,
    const cudaGraphNode_t *pDependencies,
    size_t numDependencies,
    const T &symbol,
    const void* src,
    size_t count,
    size_t offset,
    enum cudaMemcpyKind kind)
{
  return ::cudaGraphAddMemcpyNodeToSymbol(pGraphNode, graph, pDependencies, numDependencies, (const void*)&symbol, src, count, offset, kind);
}

























































template<class T>
static __inline __declspec(__host__) cudaError_t cudaGraphAddMemcpyNodeFromSymbol(
    cudaGraphNode_t* pGraphNode,
    cudaGraph_t graph,
    const cudaGraphNode_t* pDependencies,
    size_t numDependencies,
    void* dst,
    const T &symbol,
    size_t count,
    size_t offset,
    enum cudaMemcpyKind kind)
{
  return ::cudaGraphAddMemcpyNodeFromSymbol(pGraphNode, graph, pDependencies, numDependencies, dst, (const void*)&symbol, count, offset, kind);
}





































template<class T>
static __inline __declspec(__host__) cudaError_t cudaGraphMemcpyNodeSetParamsToSymbol(
    cudaGraphNode_t node,
    const T &symbol,
    const void* src,
    size_t count,
    size_t offset,
    enum cudaMemcpyKind kind)
{
  return ::cudaGraphMemcpyNodeSetParamsToSymbol(node, (const void*)&symbol, src, count, offset, kind);
}





































template<class T>
static __inline __declspec(__host__) cudaError_t cudaGraphMemcpyNodeSetParamsFromSymbol(
    cudaGraphNode_t node,
    void* dst,
    const T &symbol,
    size_t count,
    size_t offset,
    enum cudaMemcpyKind kind)
{
  return ::cudaGraphMemcpyNodeSetParamsFromSymbol(node, dst, (const void*)&symbol, count, offset, kind);
}















































template<class T>
static __inline __declspec(__host__) cudaError_t cudaGraphExecMemcpyNodeSetParamsToSymbol(
    cudaGraphExec_t hGraphExec,
    cudaGraphNode_t node,
    const T &symbol,
    const void* src,
    size_t count,
    size_t offset,
    enum cudaMemcpyKind kind)
{
    return ::cudaGraphExecMemcpyNodeSetParamsToSymbol(hGraphExec, node, (const void*)&symbol, src, count, offset, kind);
}















































template<class T>
static __inline __declspec(__host__) cudaError_t cudaGraphExecMemcpyNodeSetParamsFromSymbol(
    cudaGraphExec_t hGraphExec,
    cudaGraphNode_t node,
    void* dst,
    const T &symbol,
    size_t count,
    size_t offset,
    enum cudaMemcpyKind kind)
{
  return ::cudaGraphExecMemcpyNodeSetParamsFromSymbol(hGraphExec, node, dst, (const void*)&symbol, count, offset, kind);
}


static __inline __declspec(__host__) cudaError_t __stdcall cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphNode_t *hErrorNode_out, enum cudaGraphExecUpdateResult *updateResult_out)
{
    cudaGraphExecUpdateResultInfo resultInfo;
    cudaError_t status = cudaGraphExecUpdate(hGraphExec, hGraph, &resultInfo);
    if (hErrorNode_out) {
        *hErrorNode_out = resultInfo.errorNode;
    }
    if (updateResult_out) {
        *updateResult_out = resultInfo.result;
    }
    return status;
}




















































#line 1438 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"
























template<class T>
static __inline __declspec(__host__) cudaError_t cudaGetSymbolAddress(
        void **devPtr,
  const T     &symbol
)
{
  return ::cudaGetSymbolAddress(devPtr, (const void*)&symbol);
}
























template<class T>
static __inline __declspec(__host__) cudaError_t cudaGetSymbolSize(
        size_t *size,
  const T      &symbol
)
{
  return ::cudaGetSymbolSize(size, (const void*)&symbol);
}












































template<class T>
static __inline __declspec(__host__) cudaError_t cudaFuncSetCacheConfig(
  T                  *func,
  enum cudaFuncCache  cacheConfig
)
{
  return ::cudaFuncSetCacheConfig((const void*)func, cacheConfig);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaFuncSetSharedMemConfig(
  T                        *func,
  enum cudaSharedMemConfig  config
)
{
  return ::cudaFuncSetSharedMemConfig((const void*)func, config);
}

#line 1565 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"





























template<class T>
static __inline __declspec(__host__) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(
    int   *numBlocks,
    T      func,
    int    blockSize,
    size_t dynamicSMemSize)
{
    return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void*)func, blockSize, dynamicSMemSize, 0x00);
}











































template<class T>
static __inline __declspec(__host__) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
    int         *numBlocks,
    T            func,
    int          blockSize,
    size_t       dynamicSMemSize,
    unsigned int flags)
{
    return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void*)func, blockSize, dynamicSMemSize, flags);
}




class __cudaOccupancyB2DHelper {
  size_t n;
public:
  inline __declspec(__host__) __declspec(__device__) __cudaOccupancyB2DHelper(size_t n_) : n(n_) {}
  inline __declspec(__host__) __declspec(__device__) size_t operator()(int)
  {
      return n;
  }
};















































template<typename UnaryFunction, class T>
static __inline __declspec(__host__) __declspec(__device__) cudaError_t cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(
    int           *minGridSize,
    int           *blockSize,
    T              func,
    UnaryFunction  blockSizeToDynamicSMemSize,
    int            blockSizeLimit = 0,
    unsigned int   flags = 0)
{
    cudaError_t status;

    
    int                       device;
    struct cudaFuncAttributes attr;

    
    int maxThreadsPerMultiProcessor;
    int warpSize;
    int devMaxThreadsPerBlock;
    int multiProcessorCount;
    int funcMaxThreadsPerBlock;
    int occupancyLimit;
    int granularity;

    
    int maxBlockSize = 0;
    int numBlocks    = 0;
    int maxOccupancy = 0;

    
    int blockSizeToTryAligned;
    int blockSizeToTry;
    int blockSizeLimitAligned;
    int occupancyInBlocks;
    int occupancyInThreads;
    size_t dynamicSMemSize;

    
    
    

    if (!minGridSize || !blockSize || !func) {
        return cudaErrorInvalidValue;
    }

    
    
    

    status = ::cudaGetDevice(&device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &maxThreadsPerMultiProcessor,
        cudaDevAttrMaxThreadsPerMultiProcessor,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &warpSize,
        cudaDevAttrWarpSize,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &devMaxThreadsPerBlock,
        cudaDevAttrMaxThreadsPerBlock,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &multiProcessorCount,
        cudaDevAttrMultiProcessorCount,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaFuncGetAttributes(&attr, func);
    if (status != cudaSuccess) {
        return status;
    }
    
    funcMaxThreadsPerBlock = attr.maxThreadsPerBlock;

    
    
    

    occupancyLimit = maxThreadsPerMultiProcessor;
    granularity    = warpSize;

    if (blockSizeLimit == 0) {
        blockSizeLimit = devMaxThreadsPerBlock;
    }

    if (devMaxThreadsPerBlock < blockSizeLimit) {
        blockSizeLimit = devMaxThreadsPerBlock;
    }

    if (funcMaxThreadsPerBlock < blockSizeLimit) {
        blockSizeLimit = funcMaxThreadsPerBlock;
    }

    blockSizeLimitAligned = ((blockSizeLimit + (granularity - 1)) / granularity) * granularity;

    for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) {
        
        
        
        if (blockSizeLimit < blockSizeToTryAligned) {
            blockSizeToTry = blockSizeLimit;
        } else {
            blockSizeToTry = blockSizeToTryAligned;
        }
        
        dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry);

        status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
            &occupancyInBlocks,
            func,
            blockSizeToTry,
            dynamicSMemSize,
            flags);

        if (status != cudaSuccess) {
            return status;
        }

        occupancyInThreads = blockSizeToTry * occupancyInBlocks;

        if (occupancyInThreads > maxOccupancy) {
            maxBlockSize = blockSizeToTry;
            numBlocks    = occupancyInBlocks;
            maxOccupancy = occupancyInThreads;
        }

        
        
        if (occupancyLimit == maxOccupancy) {
            break;
        }
    }

    
    
    

    
    
    *minGridSize = numBlocks * multiProcessorCount;
    *blockSize = maxBlockSize;

    return status;
}

































template<typename UnaryFunction, class T>
static __inline __declspec(__host__) __declspec(__device__) cudaError_t cudaOccupancyMaxPotentialBlockSizeVariableSMem(
    int           *minGridSize,
    int           *blockSize,
    T              func,
    UnaryFunction  blockSizeToDynamicSMemSize,
    int            blockSizeLimit = 0)
{
    return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0x00);
}




































template<class T>
static __inline __declspec(__host__) __declspec(__device__) cudaError_t cudaOccupancyMaxPotentialBlockSize(
    int    *minGridSize,
    int    *blockSize,
    T       func,
    size_t  dynamicSMemSize = 0,
    int     blockSizeLimit = 0)
{
  return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, __cudaOccupancyB2DHelper(dynamicSMemSize), blockSizeLimit, 0x00);
}




























template<class T>
static __inline __declspec(__host__) cudaError_t cudaOccupancyAvailableDynamicSMemPerBlock(
    size_t *dynamicSmemSize,
    T      func,
    int    numBlocks,
    int    blockSize)
{
    return ::cudaOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, (const void*)func, numBlocks, blockSize);
}


















































template<class T>
static __inline __declspec(__host__) __declspec(__device__) cudaError_t cudaOccupancyMaxPotentialBlockSizeWithFlags(
    int    *minGridSize,
    int    *blockSize,
    T      func,
    size_t dynamicSMemSize = 0,
    int    blockSizeLimit = 0,
    unsigned int flags = 0)
{
    return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, __cudaOccupancyB2DHelper(dynamicSMemSize), blockSizeLimit, flags);
}

































template<class T>
static __inline __declspec(__host__) cudaError_t cudaOccupancyMaxPotentialClusterSize(
    int *clusterSize,
    T *func,
    const cudaLaunchConfig_t *config)
{
    return ::cudaOccupancyMaxPotentialClusterSize(clusterSize, (const void*)func, config);
}



































template<class T>
static __inline __declspec(__host__) cudaError_t cudaOccupancyMaxActiveClusters(
    int *numClusters,
    T *func,
    const cudaLaunchConfig_t *config)
{
    return ::cudaOccupancyMaxActiveClusters(numClusters, (const void*)func, config);
}
































template<class T>
static __inline __declspec(__host__) cudaError_t cudaFuncGetAttributes(
  struct cudaFuncAttributes *attr,
  T                         *entry
)
{
  return ::cudaFuncGetAttributes(attr, (const void*)entry);
}






















































template<class T>
static __inline __declspec(__host__) cudaError_t cudaFuncSetAttribute(
  T                         *entry,
  enum cudaFuncAttribute    attr,
  int                       value
)
{
  return ::cudaFuncSetAttribute((const void*)entry, attr, value);
}















template<class T>
static  __inline __declspec(__host__) cudaError_t cudaGetKernel(
  cudaKernel_t *kernelPtr,
  const T *entryFuncAddr
)
{
  return ::cudaGetKernel(kernelPtr, (const void *)entryFuncAddr);
}

#line 2278 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"

 

#line 2282 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"






#line 2289 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"
#pragma warning(pop)
#line 2291 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"
#line 2292 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"






#line 2299 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"

#line 2301 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/../include\\cuda_runtime.h"
#line 1 "CMakeCUDACompilerId.cu"
















#line 18 "CMakeCUDACompilerId.cu"




#line 23 "CMakeCUDACompilerId.cu"

   








#line 34 "CMakeCUDACompilerId.cu"
























#line 59 "CMakeCUDACompilerId.cu"





char const* info_compiler = "INFO" ":" "compiler[" "NVIDIA" "]";

char const* info_simulate = "INFO" ":" "simulate[" "MSVC" "]";
#line 68 "CMakeCUDACompilerId.cu"








#line 77 "CMakeCUDACompilerId.cu"


#line 80 "CMakeCUDACompilerId.cu"


#line 83 "CMakeCUDACompilerId.cu"


#line 86 "CMakeCUDACompilerId.cu"


#line 89 "CMakeCUDACompilerId.cu"





























































































#line 183 "CMakeCUDACompilerId.cu"










#line 194 "CMakeCUDACompilerId.cu"


#line 197 "CMakeCUDACompilerId.cu"

























#line 223 "CMakeCUDACompilerId.cu"




















































































































#line 340 "CMakeCUDACompilerId.cu"





























char const info_version[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
  ('0' + (((12) / 10000000)%10)), ('0' + (((12) / 1000000)%10)), ('0' + (((12) / 100000)%10)), ('0' + (((12) / 10000)%10)), ('0' + (((12) / 1000)%10)), ('0' + (((12) / 100)%10)), ('0' + (((12) / 10)%10)), ('0' + ((12) % 10)),

  '.', ('0' + (((1) / 10000000)%10)), ('0' + (((1) / 1000000)%10)), ('0' + (((1) / 100000)%10)), ('0' + (((1) / 10000)%10)), ('0' + (((1) / 1000)%10)), ('0' + (((1) / 100)%10)), ('0' + (((1) / 10)%10)), ('0' + ((1) % 10)),

   '.', ('0' + (((105) / 10000000)%10)), ('0' + (((105) / 1000000)%10)), ('0' + (((105) / 100000)%10)), ('0' + (((105) / 10000)%10)), ('0' + (((105) / 1000)%10)), ('0' + (((105) / 100)%10)), ('0' + (((105) / 10)%10)), ('0' + ((105) % 10)),



#line 381 "CMakeCUDACompilerId.cu"
#line 382 "CMakeCUDACompilerId.cu"
  ']','\0'};
#line 384 "CMakeCUDACompilerId.cu"










#line 395 "CMakeCUDACompilerId.cu"



char const info_simulate_version[] = {
  'I', 'N', 'F', 'O', ':',
  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',
  ('0' + (((1939 / 100) / 10000000)%10)), ('0' + (((1939 / 100) / 1000000)%10)), ('0' + (((1939 / 100) / 100000)%10)), ('0' + (((1939 / 100) / 10000)%10)), ('0' + (((1939 / 100) / 1000)%10)), ('0' + (((1939 / 100) / 100)%10)), ('0' + (((1939 / 100) / 10)%10)), ('0' + ((1939 / 100) % 10)),

  '.', ('0' + (((1939 % 100) / 10000000)%10)), ('0' + (((1939 % 100) / 1000000)%10)), ('0' + (((1939 % 100) / 100000)%10)), ('0' + (((1939 % 100) / 10000)%10)), ('0' + (((1939 % 100) / 1000)%10)), ('0' + (((1939 % 100) / 100)%10)), ('0' + (((1939 % 100) / 10)%10)), ('0' + ((1939 % 100) % 10)),






#line 411 "CMakeCUDACompilerId.cu"
  ']','\0'};
#line 413 "CMakeCUDACompilerId.cu"





char const* info_platform = "INFO" ":" "platform[" "Windows" "]";
char const* info_arch = "INFO" ":" "arch[" "x64" "]";



const char* info_language_standard_default = "INFO" ":" "standard_default["


#line 427 "CMakeCUDACompilerId.cu"

#line 429 "CMakeCUDACompilerId.cu"

#line 431 "CMakeCUDACompilerId.cu"

#line 433 "CMakeCUDACompilerId.cu"

#line 435 "CMakeCUDACompilerId.cu"
  "03"
#line 437 "CMakeCUDACompilerId.cu"
"]";

const char* info_language_extensions_default = "INFO" ":" "extensions_default["


#line 444 "CMakeCUDACompilerId.cu"
  "OFF"
#line 446 "CMakeCUDACompilerId.cu"
"]";



int main(int argc, char* argv[])
{
  int require = 0;
  require += info_compiler[argc];
  require += info_platform[argc];

  require += info_version[argc];
#line 458 "CMakeCUDACompilerId.cu"

  require += info_simulate[argc];
#line 461 "CMakeCUDACompilerId.cu"

  require += info_simulate_version[argc];
#line 464 "CMakeCUDACompilerId.cu"
  require += info_language_standard_default[argc];
  require += info_language_extensions_default[argc];
  (void)argv;
  return require;
}
